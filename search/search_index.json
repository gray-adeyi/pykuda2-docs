{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyKuda2","text":"<p> A developer friendly wrapper for kuda API</p> <p>Documentation: </p> <p>Source Code: https://github.com/jennyosato/pykuda2</p> <p>PyKuda2 is a python wrapper over the Kuda Open API. It aims at being developer friendly and easy to use.</p> <p>The key features are:</p> <ul> <li>Type hints: All methods provided by PyKuda2 are type annotated, so you can easily infer. This improves the   development experience.</li> <li>Async support: PyKuda2 allow you to also make calls to Kuda Open API using async/await which is super great   for example if your project is in FastAPI where every chance of a performance    improvement is adds up.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.9+</p> <p>PyKuda2 uses httpx under the hood to make API calls to Kuda.</p>"},{"location":"#installation","title":"Installation","text":"pip install pykuda2 Successfully installed pykuda2"},{"location":"#example","title":"Example","text":"<p>Trying out PyKuda2<pre><code>import os\nfrom pykuda2 import Kuda\n# Fetch your credentials from your environment path\nKUDA_EMAIL_ADDRESS = os.getenv(\"KUDA_EMAIL_ADDRESS\")\nKUDA_API_KEY = os.getenv(\"KUDA_API_KEY\")\n# Instantiate the Kuda API wrapper\nkuda = Kuda(email=KUDA_EMAIL_ADDRESS, api_key=KUDA_API_KEY)\n# Get the admin account balance\nresponse = kuda.accounts.get_admin_account_balance()\nprint(response)\n# Get transaction history\nresponse = kuda.transactions.get_transaction_history(page_size=50, page_number=1)\nprint(response)\n</code></pre> All you need to interact with Kuda's Open API in your python project is the <code>Kuda class</code> it has attributes bounded to it that provides methods you can call in your code to make API calls to Kuda. Every method call on the wrapper has the same return type, which is an APIResponse. A data class containing the data from making the actual call to Kuda servers </p>"},{"location":"#async-too","title":"Async Too!","text":"<p>PyKuda2 also lets you use <code>async/await</code> out of the box. See what it looks like in a FastAPI project. PyKuda2 in async/await mode \ud83d\ude0e<pre><code>import os\nfrom pykuda2 import AsyncKuda\nfrom fastapi import FastAPI\n# Fetch your credentials from your environment path\nKUDA_EMAIL_ADDRESS = os.getenv(\"KUDA_EMAIL_ADDRESS\")\nKUDA_API_KEY = os.getenv(\"KUDA_API_KEY\")\n# Instantiate the Kuda API wrapper\nkuda = AsyncKuda(email=KUDA_EMAIL_ADDRESS, api_key=KUDA_API_KEY)\napp = FastAPI()\n@app.get(\"/banks\")\nasync def get_banks():\nresponse = await kuda.transactions.get_banks()\nreturn response.data\n</code></pre></p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"#notice","title":"Notice","text":"<p>This project is a third party open source project and is in no way directly related to Kuda. It's made out of love \u2665\ufe0f for the services offered by Kuda. You can help make it better. If you find typos while reading this documentation or you find any part of it that's out of date, also if you find any bugs while using it or have ideas to make it better, please create an issue at the projects github repo.</p>"},{"location":"#contributors","title":"Contributors","text":"<ul> <li>jennyosato</li> <li>gray-adeyi</li> </ul>"},{"location":"#buy-me-a-coffee","title":"Buy me a coffee","text":"<pre><code>3000606742 Kuda Gbenga Adeyi\n</code></pre>"},{"location":"explanation/","title":"Explanation","text":"<p>This tries to be a comprehensive explanation of how <code>pykuda2</code> works internally.  Most of the classes, functions or variables in <code>pykuda2</code> that you'll ever need in your project has been exposed in the package level, so you'll rarely need to transverse the project structure to get what you need.</p> <p>Here's the structure of the project. <pre><code>$ tree pykuda2\n\u251c\u2500\u2500 base.py\n\u251c\u2500\u2500 exceptions.py\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 kuda.py\n\u251c\u2500\u2500 utils.py\n\u2514\u2500\u2500 wrappers\n    \u251c\u2500\u2500 async_wrappers\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 accounts.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 billing_and_betting.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 card.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 gift_card.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 instant_settlement_service.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 savings.py\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 transaction.py\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 sync_wrappers\n        \u251c\u2500\u2500 accounts.py\n        \u251c\u2500\u2500 billing_and_betting.py\n        \u251c\u2500\u2500 card.py\n        \u251c\u2500\u2500 gift_card.py\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 instant_settlement_service.py\n        \u251c\u2500\u2500 savings.py\n        \u2514\u2500\u2500 transaction.py\n</code></pre> So for example even though <code>TransferInstruction</code> or <code>CardChannel</code> classes live in the <code>pykuda2.utils.py</code> you can import them link this <pre><code>from pykuda2 import TransferInstruction, CardChannel\n</code></pre> instead of this <pre><code>from pykuda2.utils import TransferInstruction, CardChannel\n</code></pre></p>"},{"location":"how-to-guides/","title":"How-To Guides","text":""},{"location":"how-to-guides/#coming-soon","title":"Coming soon","text":""},{"location":"tutorials/","title":"Tutorials","text":""},{"location":"tutorials/#coming-soon","title":"Coming soon","text":""},{"location":"reference/","title":"Introduction","text":"<p>This provides implementation details of <code>pykuda2</code>. Use it as a reference for the technical implementation of the <code>pykuda2</code> project code.</p>"},{"location":"reference/kuda/","title":"Kuda","text":""},{"location":"reference/kuda/#pykuda2.kuda.AsyncKuda","title":"<code>AsyncKuda</code>","text":"<p>         Bases: <code>BaseAsyncAPIWrapper</code></p> <p>An asynchronous API wrapper to Kuda REST API endpoints.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>The email address of your Kuda account with access to an apiKey</p> required <code>api_key</code> <code>str</code> <p>Your Kuda apiKey</p> required <code>mode</code> <code>Mode</code> <p>The mode you desire to use the wrapper in (development or production)</p> <code>Mode.DEVELOPMENT</code> Source code in <code>pykuda2/kuda.py</code> <pre><code>class AsyncKuda(BaseAsyncAPIWrapper):\n\"\"\"An asynchronous API wrapper to Kuda REST API endpoints.\n    Args:\n        email: The email address of your Kuda account with access to an apiKey\n        api_key: Your Kuda apiKey\n        mode: The mode you desire to use the wrapper in (development or production)\n    \"\"\"\ndef __init__(self, email: str, api_key: str, mode: Mode = Mode.DEVELOPMENT):\nsuper().__init__(email=email, api_key=api_key, mode=mode)\nself.accounts = Account(email=email, api_key=api_key, mode=mode)\nself.transactions = Transaction(email=email, api_key=api_key, mode=mode)\nself.billing_and_betting = BillingAndBetting(\nemail=email, api_key=api_key, mode=mode\n)\nself.gift_cards = GiftCard(email=email, api_key=api_key, mode=mode)\nself.savings = Savings(email=email, api_key=api_key, mode=mode)\nself.cards = Card(email=email, api_key=api_key, mode=mode)\n</code></pre>"},{"location":"reference/kuda/#pykuda2.kuda.Kuda","title":"<code>Kuda</code>","text":"<p>         Bases: <code>BaseAPIWrapper</code></p> <p>A synchronous API wrapper to Kuda REST API endpoints.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>The email address of your Kuda account with access to an apiKey</p> required <code>api_key</code> <code>str</code> <p>Your Kuda apiKey</p> required <code>mode</code> <code>Mode</code> <p>The mode you desire to use the wrapper in (development or production)</p> <code>Mode.DEVELOPMENT</code> Source code in <code>pykuda2/kuda.py</code> <pre><code>class Kuda(BaseAPIWrapper):\n\"\"\"A synchronous API wrapper to Kuda REST API endpoints.\n    Args:\n        email: The email address of your Kuda account with access to an apiKey\n        api_key: Your Kuda apiKey\n        mode: The mode you desire to use the wrapper in (development or production)\n    \"\"\"\ndef __init__(self, email: str, api_key: str, mode: Mode = Mode.DEVELOPMENT):\nsuper().__init__(email=email, api_key=api_key, mode=mode)\nself.accounts = Account(email=email, api_key=api_key, mode=mode)\nself.transactions = Transaction(email=email, api_key=api_key, mode=mode)\nself.billing_and_betting = BillingAndBetting(\nemail=email, api_key=api_key, mode=mode\n)\nself.gift_cards = GiftCard(email=email, api_key=api_key, mode=mode)\nself.savings = Savings(email=email, api_key=api_key, mode=mode)\nself.cards = Card(email=email, api_key=api_key, mode=mode)\n# All the attributes above are API wrappers in themselves which means\n# they'll individually try to get the access token with the `emai` and\n# `api_key`. This is like to result in some performance issues. this is\n# a hacky solution to this issue. We use this `Kuda` wrapper to get the\n# `access_token` and feed it to all these attributes, so they don't have\n# to make a request to get the access token.\nself.accounts._saved_token = self._token\nself.transactions._saved_token = self._token\nself.billing_and_betting._saved_token = self._token\nself.gift_cards._saved_token = self._token\nself.savings._saved_token = self._token\nself.cards._saved_token = self._token\n</code></pre>"},{"location":"reference/kuda/#attributes-on-the-kuda-and-asynckuda-classes","title":"Attributes on the <code>Kuda</code> and  <code>AsyncKuda</code> classes","text":"<p>The wrapper classes <code>Kuda</code> and <code>AsyncKuda</code> classes have methods bounded to them that provides methods that lets you interact with Kuda. Here's a comprehensive list of those attributes.</p> Attribute Description Example <code>accounts</code> Provides methods that let's you interact with Kuda's Account API <code>kuda.accounts.get_admin_account_balance()</code> <code>transactions</code> Provides methods that let's you interact with Kuda's Account Transactions API <code>kuda.transactions.get_banks()</code> <code>billing_and_betting</code> Provided methods that let's you interact with Kuda's Bill Payments &amp; Betting Services <code>kuda.billing_and_betting.get_purchased_bills()</code> <code>gift_cards</code> Provides methods that let's you interact with Kuda's Gift Cards API <code>kuda.gift_cards.get_gift_cards()</code> <code>savings</code> Provides methods that let's you interact with Kuda's Savings API <code>kuda.savings.get_fixed_savings_account(tracking_reference=\"12343443435\")</code> <code>cards</code> Provides methods that let's you interact with Kuda's Cards API <code>kuda.cards.get_cards(tracking_reference=\"24232244\")</code> Using a class attribute on the Kuda class to interact with Kuda<pre><code>import os\nfrom pykuda2 import Kuda\nKUDA_EMAIL_ADDRESS = os.getenv(\"KUDA_EMAIL_ADDRESS\")\nKUDA_API_KEY = os.getenv(\"KUDA_API_KEY\")\n# You instantiate the wrapper classes\nkuda = Kuda(email=KUDA_EMAIL_ADDRESS, api_key=KUDA_API_KEY)\n# calling a method by accessing the attributes on `kuda`\nresponse = kuda.accounts.get_admin_account_balance()\nprint(response)\n</code></pre> What the async equivalent might look like<pre><code>import asyncio\nimport os\nfrom pykuda2 import AsyncKuda\nKUDA_EMAIL_ADDRESS = os.getenv(\"KUDA_EMAIL_ADDRESS\")\nKUDA_API_KEY = os.getenv(\"KUDA_API_KEY\")\n# You instantiate the wrapper classes\nasync_kuda = AsyncKuda(email=KUDA_EMAIL_ADDRESS, api_key=KUDA_API_KEY)\n# The bounded attributes have the same name for the async equivalent of the `Kuda` wrapper\nasync def print_admin_balance():\nprint(await async_kuda.accounts.get_admin_account_balance())\ncoroutines = asyncio.gather(print_admin_balance())\nloop = asyncio.get_event_loop()\nloop.run_until_complete(coroutines)\n</code></pre>"},{"location":"reference/utils/","title":"Utils","text":""},{"location":"reference/utils/#pykuda2.utils.APIResponse","title":"<code>APIResponse</code>  <code>dataclass</code>","text":"<p>A model for representing the data gotten from making a call to Kudas' API.</p> <p>Attributes:</p> Name Type Description <code>status_code</code> <code>int</code> <p>The HTTP status code of the call.</p> <code>status</code> <code>Optional[str]</code> <p>The status of the response.</p> <code>message</code> <code>Optional[str]</code> <p>The message of the response.</p> <code>data</code> <code>Optional[dict]</code> <p>The data from the response.</p> <code>raw</code> <code>Union[list, dict]</code> <p>The original data gotten from the response before separating it. into <code>status</code>, <code>message</code> and <code>data</code>. This attribute is provided for cases where the response of a call does not comply the default format.</p> Source code in <code>pykuda2/utils.py</code> <pre><code>@dataclass\nclass APIResponse:\n\"\"\"A model for representing the data gotten from making a call to Kudas' API.\n    Attributes:\n        status_code: The HTTP status code of the call.\n        status: The status of the response.\n        message: The message of the response.\n        data: The data from the response.\n        raw: The original data gotten from the response before separating it.\n            into `status`, `message` and `data`. This attribute is provided\n            for cases where the response of a call does not comply the default\n            format.\n    \"\"\"\nstatus_code: int\nstatus: Optional[str]\nmessage: Optional[str]\ndata: Optional[dict]\nraw: Union[list, dict]\n</code></pre>"},{"location":"reference/utils/#pykuda2.utils.BillType","title":"<code>BillType</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> <p>An enum of possible bill types.</p> Source code in <code>pykuda2/utils.py</code> <pre><code>class BillType(str, Enum):\n\"\"\"An enum of possible bill types.\"\"\"\nAIRTIME = \"airtime\"\nBETTING = \"betting\"\nINTERNET_DATA = \"internet_data\"\nELECTRICITY = \"electricity\"\nCABLE_TV = \"cableTv\"\n</code></pre>"},{"location":"reference/utils/#pykuda2.utils.CardChannel","title":"<code>CardChannel</code>","text":"<p>         Bases: <code>IntEnum</code></p> <p>An enum of card channels supported by Kuda.</p> Source code in <code>pykuda2/utils.py</code> <pre><code>class CardChannel(IntEnum):\n\"\"\"An enum of card channels supported by Kuda.\"\"\"\nATM = 1\nPOS = 2\nWEB = 3\n</code></pre>"},{"location":"reference/utils/#pykuda2.utils.Gender","title":"<code>Gender</code>","text":"<p>         Bases: <code>IntEnum</code></p> <p>An enum of customer genders supported by Kuda.</p> Source code in <code>pykuda2/utils.py</code> <pre><code>class Gender(IntEnum):\n\"\"\"An enum of customer genders supported by Kuda.\"\"\"\nMALE = 1\nFEMALE = 2\n</code></pre>"},{"location":"reference/utils/#pykuda2.utils.HTTPMethod","title":"<code>HTTPMethod</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> <p>An enum of supported HTTP verbs.</p> Source code in <code>pykuda2/utils.py</code> <pre><code>class HTTPMethod(str, Enum):\n\"\"\"An enum of supported HTTP verbs.\"\"\"\nGET = \"GET\"\nPOST = \"POST\"\nPUT = \"PUT\"\nPATCH = \"PATCH\"\nDELETE = \"DELETE\"\nOPTIONS = \"OPTIONS\"\nHEAD = \"HEAD\"\n</code></pre>"},{"location":"reference/utils/#pykuda2.utils.Mode","title":"<code>Mode</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> <p>Modes the APIWrappers can operate in</p> Source code in <code>pykuda2/utils.py</code> <pre><code>class Mode(str, Enum):\n\"\"\"Modes the APIWrappers can operate in\"\"\"\nDEVELOPMENT = \"development\"\nPRODUCTION = \"production\"\n</code></pre>"},{"location":"reference/utils/#pykuda2.utils.ServiceType","title":"<code>ServiceType</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> <p>An enumeration of Service Types Provided by Kuda</p> <p>Attributes:</p> Name Type Description <code>ADMIN_CREATE_VIRTUAL_ACCOUNT</code> <p>Create a virtual account under your main account</p> <code>ADMIN_VIRTUAL_ACCOUNTS</code> <p>Get all Virtual account</p> <code>ADMIN_UPDATE_VIRTUAL_ACCOUNT</code> <p>Update virtual account details</p> <code>ADMIN_DISABLE_VIRTUAL_ACCOUNT</code> <p>Deactivate a virtual account</p> <code>ADMIN_ENABLE_VIRTUAL_ACCOUNT</code> <p>Reactivate a virtual account</p> <code>RETRIEVE_SINGLE_VIRTUAL_ACCOUNT</code> <p>Retrieve the details on a created virtual account</p> <code>BANK_LIST</code> <p>Get a list of all banks</p> <code>NAME_ENQUIRY</code> <p>Retrieve the name linked to a bank account</p> <code>SINGLE_FUND_TRANSFER</code> <p>Transfer money from your main account</p> <code>VIRTUAL_ACCOUNT_FUND_TRANSFER</code> <p>Transfer money from a virtual account</p> <code>TRANSACTION_STATUS_QUERY</code> <p>Get the status of a bank transfer</p> <code>RETRIEVE_VIRTUAL_ACCOUNT_BALANCE</code> <p>Retrieve the account balance on a virtual account</p> <code>ADMIN_MAIN_ACCOUNT_TRANSACTIONS</code> <p>Get all transactions on your account</p> <code>ADMIN_MAIN_ACCOUNT_FILTERED_TRANSACTIONS</code> <p>Get a date filtered range of transactions on your account</p> <code>ADMIN_VIRTUAL_ACCOUNT_TRANSACTIONS</code> <p>Get all transactions on a virtual account</p> <code>ADMIN_VIRTUAL_ACCOUNT_FILTERED_TRANSACTIONS</code> <p>Get a date filtered range of transactions on a virtual account</p> <code>FUND_VIRTUAL_ACCOUNT</code> <p>Transfer money from your main account to your virtual account</p> <code>WITHDRAW_VIRTUAL_ACCOUNT</code> <p>Transfer money from your virtual account to your main account</p> <code>UPDATE_VIRTUAL_ACCOUNT_LIMIT</code> <p>Updated transfer limits up to N5,000,000 daily on your most critical virtual accounts</p> <code>FUND_TRANSFER_INSTRUCTION</code> <p>Instruction for single transaction above the limit of One (1) million naira</p> <code>SEARCH_FUND_TRANSFER_INSTRUCTION</code> <p>Search for transfer instructions and return the status of the transaction</p> <code>RETRIEVE_TRANSACTION_LOGS</code> <p>Fetch all transaction from logs</p> <code>GET_GIFT_CARD</code> <p>gets a list of all gift card supported</p> <code>ADMIN_BUY_GIFT_CARD</code> <p>purchase gift card from admin account</p> <code>BUY_GIFT_CARD</code> <p>purchase gift card from virtual account</p> <code>GIFT_CARD_TSQ</code> <p>status of all gift cards purchased</p> <code>CREATE_PLAIN_SAVE</code> <p>Create a plain savings account</p> <code>GET_PLAIN_SAVE</code> <p>Gets a specific plain savings account information</p> <code>GET_ALL_CUSTOMER_PLAIN_SAVE</code> <p>Gets all plain savings account information</p> <code>PLAIN_SAVE_DEBIT_CREDIT</code> <p>Credit or debit a plain savings account</p> <code>RETRIEVE_PLAIN_SAVE_TRANSACTIONS</code> <p>Retrieves plain savings account transactions</p> <code>CREATE_OPEN_FLEXIBLE_SAVE</code> <p>Create an open flexible account</p> <code>PRE_CREATE_OPEN_FLEXIBLE_SAVE</code> <p>Pre create an open flexible account</p> <code>GET_OPEN_FLEXIBLE_SAVE</code> <p>Get a specific open flexible savings account information</p> <code>GET_ALL_CUSTOMER_OPEN_FLEXIBLE_SAVE</code> <p>Get all open flexible savings account information</p> <code>COMPLETE_OPEN_FLEXIBLE_SAVE_WITHDRAWAL</code> <p>Withdraw from an open flexible savings account</p> <code>RETRIEVE_OPEN_FLEXIBLE_SAVE_TRANSACTIONS</code> <p>Get all open flexible account transactions</p> <code>CREATE_FIXED_SAVE</code> <p>Create fixed savings account</p> <code>GET_FIXED_SAVE</code> <p>Get a specific fixed account information</p> <code>GET_ALL_CUSTOMER_FIXED_SAVE</code> <p>Get all fixed account information</p> <code>COMPLETE_FIXED_SAVE_WITHDRAWAL</code> <p>Close a fixed savings account</p> <code>RETRIEVE_FIXED_SAVE_TRANSACTIONS</code> <p>Get all fixed savings account transaction</p> <code>REQUEST_CARD</code> <p>Request for a new card</p> <code>GET_CUSTOMER_CARDS</code> <p>Get a list of all the cards requested</p> <code>ACTIVATE_CARD</code> <p>Activates a new card</p> <code>DEACTIVATE_CARD</code> <p>Deactivate a card</p> <code>MANAGE_CARD_TRANSACTION_LIMIT</code> <p>Set a limit for a card</p> <code>MANAGE_CARD_CHANNEL</code> <p>Manage where card can be used</p> <code>CHANGE_CARD_PIN</code> <p>Change a card's 4digit PIN</p> <code>BLOCK_CARD</code> <p>Block a card</p> <code>UNBLOCK_CARD</code> <p>Unblock a card that was blocked</p> <code>GET_BILLERS_BY_TYPE</code> <p>Get type of bill</p> <code>VERIFY_BILL_CUSTOMER</code> <p>Verify customer's identity</p> <code>ADMIN_PURCHASE_BILL</code> <p>Purchase a bill from ADMIN account</p> <code>PURCHASE_BILL</code> <p>Purchase a bill from Virtual account</p> <code>BILL_TSQ</code> <p>Get status of bill</p> <code>ADMIN_GET_PURCHASED_BILLS</code> <p>Get a list of bills purchased with ADMIN account</p> <code>GET_PURCHASED_BILLS</code> <p>Get a list of bills purchased with Virtual account</p> <code>NO_OP</code> <p>This is a non-existent service type. It's used to for endpoints with no service type so as not to alter the already existing API.</p> Source code in <code>pykuda2/utils.py</code> <pre><code>class ServiceType(str, Enum):\n\"\"\"\n    An enumeration of Service Types Provided by Kuda\n    Attributes:\n        ADMIN_CREATE_VIRTUAL_ACCOUNT: Create a virtual account under your main account\n        ADMIN_VIRTUAL_ACCOUNTS: Get all Virtual account\n        ADMIN_UPDATE_VIRTUAL_ACCOUNT: Update virtual account details\n        ADMIN_DISABLE_VIRTUAL_ACCOUNT: Deactivate a virtual account\n        ADMIN_ENABLE_VIRTUAL_ACCOUNT: Reactivate a virtual account\n        RETRIEVE_SINGLE_VIRTUAL_ACCOUNT: Retrieve the details on a created virtual account\n        BANK_LIST: Get a list of all banks\n        NAME_ENQUIRY: Retrieve the name linked to a bank account\n        SINGLE_FUND_TRANSFER: Transfer money from your main account\n        VIRTUAL_ACCOUNT_FUND_TRANSFER: Transfer money from a virtual account\n        TRANSACTION_STATUS_QUERY: Get the status of a bank transfer\n        RETRIEVE_VIRTUAL_ACCOUNT_BALANCE: Retrieve the account balance on a virtual account\n        ADMIN_MAIN_ACCOUNT_TRANSACTIONS: Get all transactions on your account\n        ADMIN_MAIN_ACCOUNT_FILTERED_TRANSACTIONS: Get a date filtered range of transactions on your account\n        ADMIN_VIRTUAL_ACCOUNT_TRANSACTIONS: Get all transactions on a virtual account\n        ADMIN_VIRTUAL_ACCOUNT_FILTERED_TRANSACTIONS: Get a date filtered range of transactions on a virtual account\n        FUND_VIRTUAL_ACCOUNT: Transfer money from your main account to your virtual account\n        WITHDRAW_VIRTUAL_ACCOUNT: Transfer money from your virtual account to your main account\n        UPDATE_VIRTUAL_ACCOUNT_LIMIT: Updated transfer limits up to N5,000,000 daily on your most critical virtual accounts\n        FUND_TRANSFER_INSTRUCTION: Instruction for single transaction above the limit of One (1) million naira\n        SEARCH_FUND_TRANSFER_INSTRUCTION: Search for transfer instructions and return the status of the transaction\n        RETRIEVE_TRANSACTION_LOGS: Fetch all transaction from logs\n        GET_GIFT_CARD: gets a list of all gift card supported\n        ADMIN_BUY_GIFT_CARD: purchase gift card from admin account\n        BUY_GIFT_CARD: purchase gift card from virtual account\n        GIFT_CARD_TSQ: status of all gift cards purchased\n        CREATE_PLAIN_SAVE: Create a plain savings account\n        GET_PLAIN_SAVE: Gets a specific plain savings account information\n        GET_ALL_CUSTOMER_PLAIN_SAVE: Gets all plain savings account information\n        PLAIN_SAVE_DEBIT_CREDIT: Credit or debit a plain savings account\n        RETRIEVE_PLAIN_SAVE_TRANSACTIONS: Retrieves plain savings account transactions\n        CREATE_OPEN_FLEXIBLE_SAVE: Create an open flexible account\n        PRE_CREATE_OPEN_FLEXIBLE_SAVE: Pre create an open flexible account\n        GET_OPEN_FLEXIBLE_SAVE: Get a specific open flexible savings account information\n        GET_ALL_CUSTOMER_OPEN_FLEXIBLE_SAVE: Get all open flexible savings account information\n        COMPLETE_OPEN_FLEXIBLE_SAVE_WITHDRAWAL: Withdraw from an open flexible savings account\n        RETRIEVE_OPEN_FLEXIBLE_SAVE_TRANSACTIONS: Get all open flexible account transactions\n        CREATE_FIXED_SAVE: Create fixed savings account\n        GET_FIXED_SAVE: Get a specific fixed account information\n        GET_ALL_CUSTOMER_FIXED_SAVE: Get all fixed account information\n        COMPLETE_FIXED_SAVE_WITHDRAWAL: Close a fixed savings account\n        RETRIEVE_FIXED_SAVE_TRANSACTIONS: Get all fixed savings account transaction\n        REQUEST_CARD: Request for a new card\n        GET_CUSTOMER_CARDS: Get a list of all the cards requested\n        ACTIVATE_CARD: Activates a new card\n        DEACTIVATE_CARD: Deactivate a card\n        MANAGE_CARD_TRANSACTION_LIMIT: Set a limit for a card\n        MANAGE_CARD_CHANNEL: Manage where card can be used\n        CHANGE_CARD_PIN: Change a card's 4digit PIN\n        BLOCK_CARD: Block a card\n        UNBLOCK_CARD: Unblock a card that was blocked\n        GET_BILLERS_BY_TYPE: Get type of bill\n        VERIFY_BILL_CUSTOMER: Verify customer's identity\n        ADMIN_PURCHASE_BILL: Purchase a bill from ADMIN account\n        PURCHASE_BILL: Purchase a bill from Virtual account\n        BILL_TSQ: Get status of bill\n        ADMIN_GET_PURCHASED_BILLS: Get a list of bills purchased with ADMIN account\n        GET_PURCHASED_BILLS: Get a list of bills purchased with Virtual account\n        NO_OP: This is a non-existent service type. It's used to for endpoints with\n            no service type so as not to alter the already existing API.\n    \"\"\"\nADMIN_CREATE_VIRTUAL_ACCOUNT = \"ADMIN_CREATE_VIRTUAL_ACCOUNT\"\nADMIN_VIRTUAL_ACCOUNTS = \"ADMIN_VIRTUAL_ACCOUNTS\"\nADMIN_UPDATE_VIRTUAL_ACCOUNT = \"ADMIN_UPDATE_VIRTUAL_ACCOUNT\"\nADMIN_DISABLE_VIRTUAL_ACCOUNT = \"ADMIN_DISABLE_VIRTUAL_ACCOUNT\"\nADMIN_ENABLE_VIRTUAL_ACCOUNT = \"ADMIN_ENABLE_VIRTUAL_ACCOUNT\"\nADMIN_RETRIEVE_MAIN_ACCOUNT_BALANCE = \"ADMIN_RETRIEVE_MAIN_ACCOUNT_BALANCE\"\nRETRIEVE_SINGLE_VIRTUAL_ACCOUNT = \"RETRIEVE_SINGLE_VIRTUAL_ACCOUNT\"\nBANK_LIST = \"BANK_LIST\"\nNAME_ENQUIRY = \"NAME_ENQUIRY\"\nSINGLE_FUND_TRANSFER = \"SINGLE_FUND_TRANSFER\"\nVIRTUAL_ACCOUNT_FUND_TRANSFER = \"VIRTUAL_ACCOUNT_FUND_TRANSFER\"\nTRANSACTION_STATUS_QUERY = \"TRANSACTION_STATUS_QUERY\"\nRETRIEVE_VIRTUAL_ACCOUNT_BALANCE = \"RETRIEVE_VIRTUAL_ACCOUNT_BALANCE\"\nADMIN_MAIN_ACCOUNT_TRANSACTIONS = \"ADMIN_MAIN_ACCOUNT_TRANSACTIONS\"\nADMIN_MAIN_ACCOUNT_FILTERED_TRANSACTIONS = (\n\"ADMIN_MAIN_ACCOUNT_FILTERED_TRANSACTIONS\"\n)\nADMIN_VIRTUAL_ACCOUNT_TRANSACTIONS = \"ADMIN_VIRTUAL_ACCOUNT_TRANSACTIONS\"\nADMIN_VIRTUAL_ACCOUNT_FILTERED_TRANSACTIONS = (\n\"ADMIN_VIRTUAL_ACCOUNT_FILTERED_TRANSACTIONS\"\n)\nFUND_VIRTUAL_ACCOUNT = \"FUND_VIRTUAL_ACCOUNT\"\nWITHDRAW_VIRTUAL_ACCOUNT = \"WITHDRAW_VIRTUAL_ACCOUNT\"\nUPDATE_VIRTUAL_ACCOUNT_LIMIT = \"UPDATE_VIRTUAL_ACCOUNT_LIMIT\"\nFUND_TRANSFER_INSTRUCTION = \"FUND_TRANSFER_INSTRUCTION\"\nSEARCH_FUND_TRANSFER_INSTRUCTION = \"SEARCH_FUND_TRANSFER_INSTRUCTION\"\nRETRIEVE_TRANSACTION_LOGS = \"RETRIEVE_TRANSACTION_LOGS\"\nGET_GIFT_CARD = \"GET_GIFT_CARD\"\nADMIN_BUY_GIFT_CARD = \"ADMIN_BUY_GIFT_CARD\"\nBUY_GIFT_CARD = \"BUY_GIFT_CARD\"\nGIFT_CARD_TSQ = \"GIFT_CARD_TSQ\"\nCREATE_PLAIN_SAVE = \"CREATE_PLAIN_SAVE\"\nGET_PLAIN_SAVE = \"GET_PLAIN_SAVE\"\nGET_ALL_CUSTOMER_PLAIN_SAVE = \"GET_ALL_CUSTOMER_PLAIN_SAVE\"\nPLAIN_SAVE_DEBIT_CREDIT = \"PLAIN_SAVE_DEBIT_CREDIT\"\nRETRIEVE_PLAIN_SAVE_TRANSACTIONS = \"RETRIEVE_PLAIN_SAVE_TRANSACTIONS\"\nCREATE_OPEN_FLEXIBLE_SAVE = \"CREATE_OPEN_FLEXIBLE_SAVE\"\nPRE_CREATE_OPEN_FLEXIBLE_SAVE = \"PRE_CREATE_OPEN_FLEXIBLE_SAVE\"\nGET_OPEN_FLEXIBLE_SAVE = \"GET_OPEN_FLEXIBLE_SAVE\"\nGET_ALL_CUSTOMER_OPEN_FLEXIBLE_SAVE = \"GET_ALL_CUSTOMER_OPEN_FLEXIBLE_SAVE\"\nCOMPLETE_OPEN_FLEXIBLE_SAVE_WITHDRAWAL = \"COMPLETE_OPEN_FLEXIBLE_SAVE_WITHDRAWAL\"\nRETRIEVE_OPEN_FLEXIBLE_SAVE_TRANSACTIONS = (\n\"RETRIEVE_OPEN_FLEXIBLE_SAVE_TRANSACTIONS\"\n)\nCREATE_FIXED_SAVE = \"CREATE_FIXED_SAVE\"\nGET_FIXED_SAVE = \"GET_FIXED_SAVE\"\nGET_ALL_CUSTOMER_FIXED_SAVE = \"GET_ALL_CUSTOMER_FIXED_SAVE\"\nCOMPLETE_FIXED_SAVE_WITHDRAWAL = \"COMPLETE_FIXED_SAVE_WITHDRAWAL\"\nRETRIEVE_FIXED_SAVE_TRANSACTIONS = \"RETRIEVE_FIXED_SAVE_TRANSACTIONS\"\nREQUEST_CARD = \"REQUEST_CARD\"\nGET_CUSTOMER_CARDS = \"GET_CUSTOMER_CARDS\"\nACTIVATE_CARD = \"ACTIVATE_CARD\"\nDEACTIVATE_CARD = \"DEACTIVATE_CARD\"\nMANAGE_CARD_TRANSACTION_LIMIT = \"MANAGE_CARD_TRANSACTION_LIMIT\"\nMANAGE_CARD_CHANNEL = \"MANAGE_CARD_CHANNEL\"\nCHANGE_CARD_PIN = \"CHANGE_CARD_PIN\"\nBLOCK_CARD = \"BLOCK_CARD\"\nUNBLOCK_CARD = \"UNBLOCK_CARD\"\nGET_BILLERS_BY_TYPE = \"GET_BILLERS_BY_TYPE\"\nVERIFY_BILL_CUSTOMER = \"VERIFY_BILL_CUSTOMER\"\nADMIN_PURCHASE_BILL = \"ADMIN_PURCHASE_BILL\"\nPURCHASE_BILL = \"PURCHASE_BILL\"\nBILL_TSQ = \"BILL_TSQ\"\nADMIN_GET_PURCHASED_BILLS = \"ADMIN_GET_PURCHASED_BILLS\"\nGET_PURCHASED_BILLS = \"GET_PURCHASED_BILLS\"\nADMIN_RETRIEVE_SINGLE_VIRTUAL_ACCOUNT = \"ADMIN_RETRIEVE_SINGLE_VIRTUAL_ACCOUNT\"\nNO_OP = \"NO_OP\"\n</code></pre>"},{"location":"reference/utils/#pykuda2.utils.TransactionStatus","title":"<code>TransactionStatus</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> <p>An enum of possible transaction status.</p> Source code in <code>pykuda2/utils.py</code> <pre><code>class TransactionStatus(str, Enum):\n\"\"\"An enum of possible transaction status.\"\"\"\nPENDING = \"Pending\"\nPROCESSING = \"Processing\"\nSUCCESSFUL = \"Successful\"\nFAILED = \"Failed\"\n</code></pre>"},{"location":"reference/utils/#pykuda2.utils.TransactionType","title":"<code>TransactionType</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> <p>An enum of possible transaction types.</p> Source code in <code>pykuda2/utils.py</code> <pre><code>class TransactionType(str, Enum):\n\"\"\"An enum of possible transaction types.\"\"\"\nCREDIT = \"c\"\nDEBIT = \"d\"\n</code></pre>"},{"location":"reference/utils/#pykuda2.utils.TransferInstruction","title":"<code>TransferInstruction</code>  <code>dataclass</code>","text":"<p>A model for transfer instructions.</p> <p>Attributes:</p> Name Type Description <code>account_number</code> <code>str</code> <p>The beneficiary's account number.</p> <code>account_name</code> <code>str</code> <p>The beneficiary's account name.</p> <code>beneficiary_bank_code</code> <code>str</code> <p>The beneficiary's bank code.</p> <code>amount</code> <code>Union[int, float]</code> <p>The transaction amount. Amount is in naira and kobo.</p> <code>bank_code</code> <code>str</code> <p>The beneficiary's bank code.</p> <code>narration</code> <code>str</code> <p>Transaction description.</p> <code>bank_name</code> <code>str</code> <p>The beneficiary's bank name.</p> <code>long_code</code> <code>str</code> <p>The beneficiary's long code.</p> <code>reference</code> <code>str</code> <p>A unique identifier for the transfer.</p> Source code in <code>pykuda2/utils.py</code> <pre><code>@dataclass\nclass TransferInstruction:\n\"\"\"A model for transfer instructions.\n    Attributes:\n        account_number: The beneficiary's account number.\n        account_name: The beneficiary's account name.\n        beneficiary_bank_code: The beneficiary's bank code.\n        amount: The transaction amount. Amount is in naira and kobo.\n        bank_code: The beneficiary's bank code.\n        narration: Transaction description.\n        bank_name: The beneficiary's bank name.\n        long_code: The beneficiary's long code.\n        reference: A unique identifier for the transfer.\n    \"\"\"\naccount_number: str\naccount_name: str\nbeneficiary_bank_code: str\namount: Union[int, float]\nbank_code: str\nnarration: str\nbank_name: str\nlong_code: str\nreference: str\ndef to_dict(self) -&gt; dict:\nreturn {\n\"AccountNumber\": self.account_number,\n\"AccountName\": self.account_name,\n\"BeneficiaryBankCode\": self.beneficiary_bank_code,\n\"Amount\": self.amount,\n\"BankCode\": self.bank_code,\n\"Narration\": self.narration,\n\"BankName\": self.bank_name,\n\"LongCode\": self.long_code,\n\"Reference\": self.reference,\n}\n</code></pre>"},{"location":"reference/utils/#pykuda2.utils.generate_number","title":"<code>generate_number(length)</code>","text":"<p>Generates random numbers of the provided length.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>The length the generated number should be.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The random number.</p> Source code in <code>pykuda2/utils.py</code> <pre><code>def generate_number(length: int) -&gt; int:\n\"\"\"\n    Generates random numbers of the provided length.\n    Args:\n        length: The length the generated number should be.\n    Returns:\n        The random number.\n    \"\"\"\nreturn int(\"\".join(secrets.choice(string.digits) for _ in range(length)))\n</code></pre>"},{"location":"reference/wrappers/","title":"Introduction","text":"<p>These are classes that provides methods that interact with Kuda's API (wraps over/abstract the process). All the  synchronous wrappers (i.e. wrappers that make HTTP calls to Kuda servers synchronously) have instances of them bound to the Kuda class as attributes</p>"},{"location":"reference/wrappers/#synchronous-wrappers","title":"Synchronous Wrappers","text":"<ul> <li>Account</li> <li>BillingAndBetting</li> <li>Card</li> <li>GiftCard</li> <li>InstantSettlementService</li> <li>Savings</li> <li>Transaction</li> </ul>"},{"location":"reference/wrappers/#asynchronous-wrappers","title":"Asynchronous Wrappers","text":"<ul> <li>AsyncAccount</li> <li>AsyncBillingAndBetting</li> <li>AsyncCard</li> <li>AsyncGiftCard</li> <li>AsyncInstantSettlementService</li> <li>AsyncSavings</li> <li>AsyncTransaction</li> </ul>"},{"location":"reference/wrappers/async_wrappers/accounts/","title":"Accounts","text":""},{"location":"reference/wrappers/async_wrappers/accounts/#pykuda2.wrappers.async_wrappers.accounts.AsyncAccount","title":"<code>AsyncAccount</code>","text":"<p>         Bases: <code>BaseAsyncAPIWrapper</code></p> Source code in <code>pykuda2/wrappers/async_wrappers/accounts.py</code> <pre><code>class AsyncAccount(BaseAsyncAPIWrapper):\nasync def create_virtual_account(\nself,\nemail: str,\nphone_number: str,\nlast_name: str,\nfirst_name: str,\nmiddle_name: str,\nbusiness_name: str,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Creates a new virtual account for customers.\n        Args:\n            email: customer's email address.\n            phone_number: customer's phone number.\n            last_name: customer's last name.\n            first_name: customer's first name.\n            middle_name: customer's middle name.\n            business_name: customer's business name.\n            tracking_reference: a unique identifier for the account to be created.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"email\": email,\n\"phoneNumber\": phone_number,\n\"lastName\": last_name,\n\"firstName\": first_name,\n\"middleName\": middle_name,\n\"businessName\": business_name,\n\"trackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_CREATE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def update_virtual_account(\nself,\ntracking_reference: str,\nfirst_name: Optional[str] = None,\nlast_name: Optional[str] = None,\nemail: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Modifies a virtual account data.\n        Good to know: For context, you cannot alter the phone number of the customer.\n        You may only alter either the first name/last name or email address tied to\n        the account information.\n        Do not update the name and the email address together on a single request.\n        Args:\n            tracking_reference: The customer's unique identifier.\n            first_name: The new first name the customer's first name should be updated to if provided.\n            last_name: The new last name the customer's last name should be updated to if provided.\n            email: The new email address the customer's email address should be updated to if provided.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n            ValueError: If none of the optional parameters is provided.\n        \"\"\"\nif not any([first_name, last_name, email]):\nraise ValueError(\n\"At least one of the parameters `first_name`, `last_name` or `email` must be provided\"\n)\ndata = {\n\"trackingReference\": tracking_reference,\n\"firstName\": first_name,\n\"lastName\": last_name,\n\"email\": email,\n}\nif not first_name:\ndata.pop(\"firstName\")\nif not last_name:\ndata.pop(\"lastName\")\nif not email:\ndata.pop(\"email\")\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_UPDATE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_virtual_accounts(\nself, page_size: int, page_number: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves your existing virtual accounts.\n        Args:\n            page_size: This specifies the number of virtual accounts to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_VIRTUAL_ACCOUNTS,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves an existing virtual account.\n        Args:\n            tracking_reference: the unique identifier tied to the account to be retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_RETRIEVE_SINGLE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def disable_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Disables a user\u2019s virtual static account.\n        Kuda encourages Admins and account managers to review accounts and transactions\n        frequently. This will avoid situations where a user has an over bloated customer\n        database without real customers or helping to reduce the menace of fraudulent transactions.\n        Args:\n            tracking_reference: the unique identifier tied to the account to be disabled.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_DISABLE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def enable_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Enables a user\u2019s virtual static account.\n        Args:\n            tracking_reference: the unique identifier tied to the account to be enabled.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_ENABLE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_admin_account_balance(\nself, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves the account balance on your main account.\n        Args:\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_RETRIEVE_MAIN_ACCOUNT_BALANCE,\nrequest_reference=request_reference,\n)\nasync def get_virtual_account_balance(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves the account balance on your virtual account.\n        Args:\n            tracking_reference: a unique identifier for the virtual account.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.RETRIEVE_VIRTUAL_ACCOUNT_BALANCE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/accounts/#pykuda2.wrappers.async_wrappers.accounts.AsyncAccount.create_virtual_account","title":"<code>create_virtual_account(email, phone_number, last_name, first_name, middle_name, business_name, tracking_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Creates a new virtual account for customers.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>customer's email address.</p> required <code>phone_number</code> <code>str</code> <p>customer's phone number.</p> required <code>last_name</code> <code>str</code> <p>customer's last name.</p> required <code>first_name</code> <code>str</code> <p>customer's first name.</p> required <code>middle_name</code> <code>str</code> <p>customer's middle name.</p> required <code>business_name</code> <code>str</code> <p>customer's business name.</p> required <code>tracking_reference</code> <code>str</code> <p>a unique identifier for the account to be created.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/accounts.py</code> <pre><code>async def create_virtual_account(\nself,\nemail: str,\nphone_number: str,\nlast_name: str,\nfirst_name: str,\nmiddle_name: str,\nbusiness_name: str,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Creates a new virtual account for customers.\n    Args:\n        email: customer's email address.\n        phone_number: customer's phone number.\n        last_name: customer's last name.\n        first_name: customer's first name.\n        middle_name: customer's middle name.\n        business_name: customer's business name.\n        tracking_reference: a unique identifier for the account to be created.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"email\": email,\n\"phoneNumber\": phone_number,\n\"lastName\": last_name,\n\"firstName\": first_name,\n\"middleName\": middle_name,\n\"businessName\": business_name,\n\"trackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_CREATE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/accounts/#pykuda2.wrappers.async_wrappers.accounts.AsyncAccount.disable_virtual_account","title":"<code>disable_virtual_account(tracking_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Disables a user\u2019s virtual static account.</p> <p>Kuda encourages Admins and account managers to review accounts and transactions frequently. This will avoid situations where a user has an over bloated customer database without real customers or helping to reduce the menace of fraudulent transactions.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>the unique identifier tied to the account to be disabled.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/accounts.py</code> <pre><code>async def disable_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Disables a user\u2019s virtual static account.\n    Kuda encourages Admins and account managers to review accounts and transactions\n    frequently. This will avoid situations where a user has an over bloated customer\n    database without real customers or helping to reduce the menace of fraudulent transactions.\n    Args:\n        tracking_reference: the unique identifier tied to the account to be disabled.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_DISABLE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/accounts/#pykuda2.wrappers.async_wrappers.accounts.AsyncAccount.enable_virtual_account","title":"<code>enable_virtual_account(tracking_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Enables a user\u2019s virtual static account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>the unique identifier tied to the account to be enabled.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/accounts.py</code> <pre><code>async def enable_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Enables a user\u2019s virtual static account.\n    Args:\n        tracking_reference: the unique identifier tied to the account to be enabled.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_ENABLE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/accounts/#pykuda2.wrappers.async_wrappers.accounts.AsyncAccount.get_admin_account_balance","title":"<code>get_admin_account_balance(request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves the account balance on your main account.</p> <p>Parameters:</p> Name Type Description Default <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/accounts.py</code> <pre><code>async def get_admin_account_balance(\nself, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves the account balance on your main account.\n    Args:\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_RETRIEVE_MAIN_ACCOUNT_BALANCE,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/accounts/#pykuda2.wrappers.async_wrappers.accounts.AsyncAccount.get_virtual_account","title":"<code>get_virtual_account(tracking_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves an existing virtual account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>the unique identifier tied to the account to be retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/accounts.py</code> <pre><code>async def get_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves an existing virtual account.\n    Args:\n        tracking_reference: the unique identifier tied to the account to be retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_RETRIEVE_SINGLE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/accounts/#pykuda2.wrappers.async_wrappers.accounts.AsyncAccount.get_virtual_account_balance","title":"<code>get_virtual_account_balance(tracking_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves the account balance on your virtual account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>a unique identifier for the virtual account.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/accounts.py</code> <pre><code>async def get_virtual_account_balance(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves the account balance on your virtual account.\n    Args:\n        tracking_reference: a unique identifier for the virtual account.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.RETRIEVE_VIRTUAL_ACCOUNT_BALANCE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/accounts/#pykuda2.wrappers.async_wrappers.accounts.AsyncAccount.get_virtual_accounts","title":"<code>get_virtual_accounts(page_size, page_number, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves your existing virtual accounts.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>This specifies the number of virtual accounts to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/accounts.py</code> <pre><code>async def get_virtual_accounts(\nself, page_size: int, page_number: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves your existing virtual accounts.\n    Args:\n        page_size: This specifies the number of virtual accounts to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_VIRTUAL_ACCOUNTS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/accounts/#pykuda2.wrappers.async_wrappers.accounts.AsyncAccount.update_virtual_account","title":"<code>update_virtual_account(tracking_reference, first_name=None, last_name=None, email=None, request_reference=None)</code>  <code>async</code>","text":"<p>Modifies a virtual account data.</p> <p>Good to know: For context, you cannot alter the phone number of the customer. You may only alter either the first name/last name or email address tied to the account information. Do not update the name and the email address together on a single request.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The customer's unique identifier.</p> required <code>first_name</code> <code>Optional[str]</code> <p>The new first name the customer's first name should be updated to if provided.</p> <code>None</code> <code>last_name</code> <code>Optional[str]</code> <p>The new last name the customer's last name should be updated to if provided.</p> <code>None</code> <code>email</code> <code>Optional[str]</code> <p>The new email address the customer's email address should be updated to if provided.</p> <code>None</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> <code>ValueError</code> <p>If none of the optional parameters is provided.</p> Source code in <code>pykuda2/wrappers/async_wrappers/accounts.py</code> <pre><code>async def update_virtual_account(\nself,\ntracking_reference: str,\nfirst_name: Optional[str] = None,\nlast_name: Optional[str] = None,\nemail: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Modifies a virtual account data.\n    Good to know: For context, you cannot alter the phone number of the customer.\n    You may only alter either the first name/last name or email address tied to\n    the account information.\n    Do not update the name and the email address together on a single request.\n    Args:\n        tracking_reference: The customer's unique identifier.\n        first_name: The new first name the customer's first name should be updated to if provided.\n        last_name: The new last name the customer's last name should be updated to if provided.\n        email: The new email address the customer's email address should be updated to if provided.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n        ValueError: If none of the optional parameters is provided.\n    \"\"\"\nif not any([first_name, last_name, email]):\nraise ValueError(\n\"At least one of the parameters `first_name`, `last_name` or `email` must be provided\"\n)\ndata = {\n\"trackingReference\": tracking_reference,\n\"firstName\": first_name,\n\"lastName\": last_name,\n\"email\": email,\n}\nif not first_name:\ndata.pop(\"firstName\")\nif not last_name:\ndata.pop(\"lastName\")\nif not email:\ndata.pop(\"email\")\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_UPDATE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/billing_and_betting/","title":"Billing and betting","text":""},{"location":"reference/wrappers/async_wrappers/billing_and_betting/#pykuda2.wrappers.async_wrappers.billing_and_betting.AsyncBillingAndBetting","title":"<code>AsyncBillingAndBetting</code>","text":"<p>         Bases: <code>BaseAsyncAPIWrapper</code></p> Source code in <code>pykuda2/wrappers/async_wrappers/billing_and_betting.py</code> <pre><code>class AsyncBillingAndBetting(BaseAsyncAPIWrapper):\nasync def get_bill_type_options(\nself, bill_type: BillType, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves all the options of a bill type that are available from Kuda.\n        Args:\n            bill_type: The bill type we want to get the options available for e.g.\n                BillType.INTERNET_DATA, BillType.CABLE_TV\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"BillTypeName\": bill_type}\nreturn await self._api_call(\nservice_type=ServiceType.GET_BILLERS_BY_TYPE,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def verify_customer_before_purchase(\nself,\ntracking_reference: str,\nkuda_bill_item_identifier: str,\ncustomer_identification: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Verifies the identity of  the beneficiary.\n        Just like an account or bank transfer, You need to verify a customer's identity before\n        successfully initiating a bill purchase instance. This way you reduce the issue of theft\n        or erroneous bill payments which are hard to retrieve.\n        You don't need to verify the customer if the bill type is airtime\n        Args:\n            tracking_reference: Customer's wallet identifier.\n            kuda_bill_item_identifier: The Kuda bill unique identifier.\n            customer_identification: The customer's unique identifier.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"TrackingRef\": tracking_reference,\n\"KudaBillItemIdentifier\": kuda_bill_item_identifier,\n\"CustomerIdentification\": customer_identification,\n}\nreturn await self._api_call(\nservice_type=ServiceType.VERIFY_BILL_CUSTOMER,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def purchase_bill(\nself,\namount: Union[int, float],\nbill_item_identifier: str,\ncustomer_identifier: str,\nphone_number: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Purchase a bill from your main account.\n        Args:\n            amount: Bill amount. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            bill_item_identifier: The Kuda bill unique identifier\n            customer_identifier: The customer's unique identifier\n            phone_number: The customer's phone number It is not required\n                if you're purchasing airtime.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Amount\": amount,\n\"BillItemIdentifier\": bill_item_identifier,\n\"PhoneNumber\": phone_number,\n\"CustomerIdentifier\": customer_identifier,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_PURCHASE_BILL,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def purchase_bill_from_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\nbill_item_identifier: str,\nphone_number: str,\ncustomer_identifier: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Purchase a bill from your virtual account.\n        Args:\n            tracking_reference: The customer virtual account Identifier.\n            amount: Bill amount. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            bill_item_identifier: The Kuda bill unique identifier\n            customer_identifier: The customer's unique identifier\n            phone_number: The customer's phone number It is not required\n                if you're purchasing airtime.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Amount\": amount,\n\"BillItemIdentifier\": bill_item_identifier,\n\"PhoneNumber\": phone_number,\n\"CustomerIdentifier\": customer_identifier,\n\"TrackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.PURCHASE_BILL,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_bill_purchase_status(\nself,\nbill_request_ref: Optional[str],\nbill_response_reference: Optional[str],\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieve the status of a bill purchase.\n        Args:\n            bill_request_ref: The bill request reference.\n            bill_response_reference: The bill reference gotten from purchasing the bill.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\nif bill_response_reference and bill_request_ref:\nraise ValueError(\n\"Both `bill_response_reference` and `bill_request_ref` should\"\n\" not be provided. Please provide any but not both\"\n)\ndata = {\n\"BillResponseReference\": bill_response_reference,\n\"BillRequestRef\": bill_request_ref,\n}\nreturn await self._api_call(\nservice_type=ServiceType.BILL_TSQ,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_purchased_bills(\nself, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieve bills purchased from the main account.\n        Args:\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_GET_PURCHASED_BILLS,\nrequest_reference=request_reference,\n)\nasync def get_purchased_bill_from_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieve bills purchased from a virtual account.\n        Args:\n            tracking_reference: The unique identifier of the virtual account.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"TrackingReference\": tracking_reference}\nreturn await self._api_call(\nservice_type=ServiceType.GET_PURCHASED_BILLS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/billing_and_betting/#pykuda2.wrappers.async_wrappers.billing_and_betting.AsyncBillingAndBetting.get_bill_purchase_status","title":"<code>get_bill_purchase_status(bill_request_ref, bill_response_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieve the status of a bill purchase.</p> <p>Parameters:</p> Name Type Description Default <code>bill_request_ref</code> <code>Optional[str]</code> <p>The bill request reference.</p> required <code>bill_response_reference</code> <code>Optional[str]</code> <p>The bill reference gotten from purchasing the bill.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/billing_and_betting.py</code> <pre><code>async def get_bill_purchase_status(\nself,\nbill_request_ref: Optional[str],\nbill_response_reference: Optional[str],\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieve the status of a bill purchase.\n    Args:\n        bill_request_ref: The bill request reference.\n        bill_response_reference: The bill reference gotten from purchasing the bill.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\nif bill_response_reference and bill_request_ref:\nraise ValueError(\n\"Both `bill_response_reference` and `bill_request_ref` should\"\n\" not be provided. Please provide any but not both\"\n)\ndata = {\n\"BillResponseReference\": bill_response_reference,\n\"BillRequestRef\": bill_request_ref,\n}\nreturn await self._api_call(\nservice_type=ServiceType.BILL_TSQ,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/billing_and_betting/#pykuda2.wrappers.async_wrappers.billing_and_betting.AsyncBillingAndBetting.get_bill_type_options","title":"<code>get_bill_type_options(bill_type, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves all the options of a bill type that are available from Kuda.</p> <p>Parameters:</p> Name Type Description Default <code>bill_type</code> <code>BillType</code> <p>The bill type we want to get the options available for e.g. BillType.INTERNET_DATA, BillType.CABLE_TV</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/billing_and_betting.py</code> <pre><code>async def get_bill_type_options(\nself, bill_type: BillType, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves all the options of a bill type that are available from Kuda.\n    Args:\n        bill_type: The bill type we want to get the options available for e.g.\n            BillType.INTERNET_DATA, BillType.CABLE_TV\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"BillTypeName\": bill_type}\nreturn await self._api_call(\nservice_type=ServiceType.GET_BILLERS_BY_TYPE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/billing_and_betting/#pykuda2.wrappers.async_wrappers.billing_and_betting.AsyncBillingAndBetting.get_purchased_bill_from_virtual_account","title":"<code>get_purchased_bill_from_virtual_account(tracking_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieve bills purchased from a virtual account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The unique identifier of the virtual account.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/billing_and_betting.py</code> <pre><code>async def get_purchased_bill_from_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieve bills purchased from a virtual account.\n    Args:\n        tracking_reference: The unique identifier of the virtual account.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"TrackingReference\": tracking_reference}\nreturn await self._api_call(\nservice_type=ServiceType.GET_PURCHASED_BILLS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/billing_and_betting/#pykuda2.wrappers.async_wrappers.billing_and_betting.AsyncBillingAndBetting.get_purchased_bills","title":"<code>get_purchased_bills(request_reference=None)</code>  <code>async</code>","text":"<p>Retrieve bills purchased from the main account.</p> <p>Parameters:</p> Name Type Description Default <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/billing_and_betting.py</code> <pre><code>async def get_purchased_bills(\nself, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieve bills purchased from the main account.\n    Args:\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_GET_PURCHASED_BILLS,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/billing_and_betting/#pykuda2.wrappers.async_wrappers.billing_and_betting.AsyncBillingAndBetting.purchase_bill","title":"<code>purchase_bill(amount, bill_item_identifier, customer_identifier, phone_number=None, request_reference=None)</code>  <code>async</code>","text":"<p>Purchase a bill from your main account.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Union[int, float]</code> <p>Bill amount. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>bill_item_identifier</code> <code>str</code> <p>The Kuda bill unique identifier</p> required <code>customer_identifier</code> <code>str</code> <p>The customer's unique identifier</p> required <code>phone_number</code> <code>Optional[str]</code> <p>The customer's phone number It is not required if you're purchasing airtime.</p> <code>None</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/billing_and_betting.py</code> <pre><code>async def purchase_bill(\nself,\namount: Union[int, float],\nbill_item_identifier: str,\ncustomer_identifier: str,\nphone_number: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Purchase a bill from your main account.\n    Args:\n        amount: Bill amount. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        bill_item_identifier: The Kuda bill unique identifier\n        customer_identifier: The customer's unique identifier\n        phone_number: The customer's phone number It is not required\n            if you're purchasing airtime.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Amount\": amount,\n\"BillItemIdentifier\": bill_item_identifier,\n\"PhoneNumber\": phone_number,\n\"CustomerIdentifier\": customer_identifier,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_PURCHASE_BILL,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/billing_and_betting/#pykuda2.wrappers.async_wrappers.billing_and_betting.AsyncBillingAndBetting.purchase_bill_from_virtual_account","title":"<code>purchase_bill_from_virtual_account(tracking_reference, amount, bill_item_identifier, phone_number, customer_identifier, request_reference=None)</code>  <code>async</code>","text":"<p>Purchase a bill from your virtual account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The customer virtual account Identifier.</p> required <code>amount</code> <code>Union[int, float]</code> <p>Bill amount. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>bill_item_identifier</code> <code>str</code> <p>The Kuda bill unique identifier</p> required <code>customer_identifier</code> <code>str</code> <p>The customer's unique identifier</p> required <code>phone_number</code> <code>str</code> <p>The customer's phone number It is not required if you're purchasing airtime.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/billing_and_betting.py</code> <pre><code>async def purchase_bill_from_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\nbill_item_identifier: str,\nphone_number: str,\ncustomer_identifier: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Purchase a bill from your virtual account.\n    Args:\n        tracking_reference: The customer virtual account Identifier.\n        amount: Bill amount. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        bill_item_identifier: The Kuda bill unique identifier\n        customer_identifier: The customer's unique identifier\n        phone_number: The customer's phone number It is not required\n            if you're purchasing airtime.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Amount\": amount,\n\"BillItemIdentifier\": bill_item_identifier,\n\"PhoneNumber\": phone_number,\n\"CustomerIdentifier\": customer_identifier,\n\"TrackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.PURCHASE_BILL,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/billing_and_betting/#pykuda2.wrappers.async_wrappers.billing_and_betting.AsyncBillingAndBetting.verify_customer_before_purchase","title":"<code>verify_customer_before_purchase(tracking_reference, kuda_bill_item_identifier, customer_identification, request_reference=None)</code>  <code>async</code>","text":"<p>Verifies the identity of  the beneficiary.</p> <p>Just like an account or bank transfer, You need to verify a customer's identity before successfully initiating a bill purchase instance. This way you reduce the issue of theft or erroneous bill payments which are hard to retrieve. You don't need to verify the customer if the bill type is airtime</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Customer's wallet identifier.</p> required <code>kuda_bill_item_identifier</code> <code>str</code> <p>The Kuda bill unique identifier.</p> required <code>customer_identification</code> <code>str</code> <p>The customer's unique identifier.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/billing_and_betting.py</code> <pre><code>async def verify_customer_before_purchase(\nself,\ntracking_reference: str,\nkuda_bill_item_identifier: str,\ncustomer_identification: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Verifies the identity of  the beneficiary.\n    Just like an account or bank transfer, You need to verify a customer's identity before\n    successfully initiating a bill purchase instance. This way you reduce the issue of theft\n    or erroneous bill payments which are hard to retrieve.\n    You don't need to verify the customer if the bill type is airtime\n    Args:\n        tracking_reference: Customer's wallet identifier.\n        kuda_bill_item_identifier: The Kuda bill unique identifier.\n        customer_identification: The customer's unique identifier.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"TrackingRef\": tracking_reference,\n\"KudaBillItemIdentifier\": kuda_bill_item_identifier,\n\"CustomerIdentification\": customer_identification,\n}\nreturn await self._api_call(\nservice_type=ServiceType.VERIFY_BILL_CUSTOMER,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/card/","title":"Card","text":""},{"location":"reference/wrappers/async_wrappers/card/#pykuda2.wrappers.async_wrappers.card.AsyncCard","title":"<code>AsyncCard</code>","text":"<p>         Bases: <code>BaseAsyncAPIWrapper</code></p> Source code in <code>pykuda2/wrappers/async_wrappers/card.py</code> <pre><code>class AsyncCard(BaseAsyncAPIWrapper):\nasync def request_card(\nself,\ntracking_reference: str,\nname_on_card: str,\ncountry: str,\ngender: Gender,\nadditional_phone_number: str,\ndelivery_city: str,\ndelivery_lga: str,\ndelivery_landmark: str,\ndate_of_birth: str,\ndelivery_state: str,\ndelivery_street_no_and_name: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Request for a new card for a customer and get it delivered to their location.\n        Args:\n            tracking_reference: The unique identifier of the virtual account.\n            name_on_card: The virtual account name.\n            date_of_birth: The customer's date of birth. Format(YYYY-MM-DD).\n            gender: Customer's gender e.g. Gender.MALE, Gender.FEMALE.\n            delivery_state: The state of residence for card delivery.\n            delivery_street_no_and_name: The street no and name for card delivery.\n            delivery_city: Name of city for card delivery.\n            delivery_lga: Local government area for card delivery\n            delivery_landmark: Landmark for card delivery.\n            country: Country of residence for card delivery.\n            additional_phone_number: additional phone number.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"NameOnCard\": name_on_card,\n\"dateofBirth\": date_of_birth,\n\"Gender\": gender,\n\"DeliveryState\": delivery_state,\n\"DeliveryStreetNoAndName\": delivery_street_no_and_name,\n\"DeliveryCity\": delivery_city,\n\"DeliveryLGA\": delivery_lga,\n\"DeliveryLandmark\": delivery_landmark,\n\"Country\": country,\n\"additionalPhoneNumber\": additional_phone_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.REQUEST_CARD,\ndata=data,\n# endpoint_path=\"/RequestCard\",\nrequest_reference=request_reference,\n)\nasync def get_cards(\nself,\ntracking_reference: str,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a list of cards requested.\n        Args:\n            tracking_reference: The unique identifier of the account.\n            simulate_request: Flag to simulate request.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"SimulateRequest\": simulate_request,\n}\nreturn await self._api_call(\nservice_type=ServiceType.GET_CUSTOMER_CARDS,\ndata=data,\n# endpoint_path=\"/GetCustomerCards\",\nrequest_reference=request_reference,\n)\nasync def activate_card(\nself,\npan: int,\ncvv: int,\nid: int,\ntracking_reference: str,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers activate their cards once they receive it.\n        Args:\n            pan: Card primary account number issued after processing.\n            cvv: Card CVV.\n            tracking_reference: The unique identifier of the account.\n            id: Card unique identifier.\n            simulate_request: Flag to simulate request.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Pan\": pan,\n\"CVV\": cvv,\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"SimulateRequest\": simulate_request,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ACTIVATE_CARD,\ndata=data,\n# endpoint_path=\"/ActivateCard\",\nrequest_reference=request_reference,\n)\nasync def deactivate_card(\nself,\nid: int,\ntracking_reference: str,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers deactivate their cards.\n        Args:\n            tracking_reference: The unique identifier of the account.\n            id: Card unique identifier.\n            simulate_request: Flag to simulate request.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"SimulateRequest\": simulate_request,\n}\nreturn await self._api_call(\nservice_type=ServiceType.DEACTIVATE_CARD,\ndata=data,\n# endpoint_path=\"/DeactivateCard\",\nrequest_reference=request_reference,\n)\nasync def set_card_limit(\nself,\nid: int,\ntracking_reference: str,\nchannel: CardChannel,\nlimit: int,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Set spend limit on a card.\n        Card limits are a good way to manage individual spend on their accounts.\n        There are use cases for this, especially in the edtech space where an individual\n        will like to manage spending limits or even in the contracting space where clients\n        want to manage spend limits on purchases.\n            - A good way to start this is to manage where and how these limits can be set\n                and across the channels the card can be accessed.\n        Args:\n            id: Card unique identifier.\n            tracking_reference: The virtual account number.\n            channel: Card channels e.g. CardChannel.ATM, CardChannel.POS.\n            limit: Transaction amount limit in kobo.\n            simulate_request: Flag to simulate request.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"Channel\": channel,\n\"Limit\": limit,\n\"SimulateRequest\": simulate_request,\n}\nreturn await self._api_call(\nservice_type=ServiceType.MANAGE_CARD_TRANSACTION_LIMIT,\ndata=data,\n# endpoint_path=\"/ManageCardTransactionLimit\",\nrequest_reference=request_reference,\n)\nasync def manage_card_channel(\nself,\nid: int,\ntracking_reference: str,\nchannel: CardChannel,\nlimit: int,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers manage where their cards can be used.\n        Args:\n            id: Card unique identifier.\n            tracking_reference: The virtual account number.\n            channel: Card channels e.g. CardChannel.ATM, CardChannel.POS.\n            limit: Transaction amount limit in kobo.\n            simulate_request: Flag to simulate request.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"Channel\": channel,\n\"Limit\": limit,\n\"SimulateRequest\": simulate_request,\n}\nreturn await self._api_call(\nservice_type=ServiceType.MANAGE_CARD_CHANNEL,\ndata=data,\n# endpoint_path=\"/ManageCardChannel\",\nrequest_reference=request_reference,\n)\nasync def change_card_pin(\nself,\nid: int,\ntracking_reference: str,\nnew_pin: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers change their 4 digits PIN to any combination they desire.\n        Args:\n            id: Card unique identifier.\n            tracking_reference: The virtual account number.\n            new_pin: Customer's new PIN.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\"\"\"\ndata = {\"Id\": id, \"TrackingReference\": tracking_reference, \"NewPIN\": new_pin}\nreturn await self._api_call(\nservice_type=ServiceType.CHANGE_CARD_PIN,\ndata=data,\n# endpoint_path=\"/ChangeCardPIN\",\nrequest_reference=request_reference,\n)\nasync def block_card(\nself, tracking_reference: str, id: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Block a customer's card.\n        It allows them to longer be able to make card transactions with it.\n        In an emergency, a user may require to block a card in the event that the\n        card is stolen or lost. Use this method to quickly block the card.\n        Args:\n            id: Card unique identifier.\n            tracking_reference: The virtual account number.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.BLOCK_CARD,\ndata=data,\n# endpoint_path=\"/BlockCard\",\nrequest_reference=request_reference,\n)\nasync def unblock_card(\nself, tracking_reference: str, id: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Unblocks a customers card.\n        Args:\n            id: Card unique identifier.\n            tracking_reference: The virtual account number.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.UNBLOCK_CARD,\ndata=data,\n# endpoint_path=\"/UnblockCard\",\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/card/#pykuda2.wrappers.async_wrappers.card.AsyncCard.activate_card","title":"<code>activate_card(pan, cvv, id, tracking_reference, simulate_request=False, request_reference=None)</code>  <code>async</code>","text":"<p>Allows customers activate their cards once they receive it.</p> <p>Parameters:</p> Name Type Description Default <code>pan</code> <code>int</code> <p>Card primary account number issued after processing.</p> required <code>cvv</code> <code>int</code> <p>Card CVV.</p> required <code>tracking_reference</code> <code>str</code> <p>The unique identifier of the account.</p> required <code>id</code> <code>int</code> <p>Card unique identifier.</p> required <code>simulate_request</code> <code>bool</code> <p>Flag to simulate request.</p> <code>False</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/card.py</code> <pre><code>async def activate_card(\nself,\npan: int,\ncvv: int,\nid: int,\ntracking_reference: str,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers activate their cards once they receive it.\n    Args:\n        pan: Card primary account number issued after processing.\n        cvv: Card CVV.\n        tracking_reference: The unique identifier of the account.\n        id: Card unique identifier.\n        simulate_request: Flag to simulate request.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Pan\": pan,\n\"CVV\": cvv,\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"SimulateRequest\": simulate_request,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ACTIVATE_CARD,\ndata=data,\n# endpoint_path=\"/ActivateCard\",\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/card/#pykuda2.wrappers.async_wrappers.card.AsyncCard.block_card","title":"<code>block_card(tracking_reference, id, request_reference=None)</code>  <code>async</code>","text":"<p>Block a customer's card.</p> <p>It allows them to longer be able to make card transactions with it. In an emergency, a user may require to block a card in the event that the card is stolen or lost. Use this method to quickly block the card.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Card unique identifier.</p> required <code>tracking_reference</code> <code>str</code> <p>The virtual account number.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/card.py</code> <pre><code>async def block_card(\nself, tracking_reference: str, id: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Block a customer's card.\n    It allows them to longer be able to make card transactions with it.\n    In an emergency, a user may require to block a card in the event that the\n    card is stolen or lost. Use this method to quickly block the card.\n    Args:\n        id: Card unique identifier.\n        tracking_reference: The virtual account number.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.BLOCK_CARD,\ndata=data,\n# endpoint_path=\"/BlockCard\",\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/card/#pykuda2.wrappers.async_wrappers.card.AsyncCard.change_card_pin","title":"<code>change_card_pin(id, tracking_reference, new_pin, request_reference=None)</code>  <code>async</code>","text":"<p>Allows customers change their 4 digits PIN to any combination they desire.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Card unique identifier.</p> required <code>tracking_reference</code> <code>str</code> <p>The virtual account number.</p> required <code>new_pin</code> <code>int</code> <p>Customer's new PIN.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/card.py</code> <pre><code>async def change_card_pin(\nself,\nid: int,\ntracking_reference: str,\nnew_pin: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers change their 4 digits PIN to any combination they desire.\n    Args:\n        id: Card unique identifier.\n        tracking_reference: The virtual account number.\n        new_pin: Customer's new PIN.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\"\"\"\ndata = {\"Id\": id, \"TrackingReference\": tracking_reference, \"NewPIN\": new_pin}\nreturn await self._api_call(\nservice_type=ServiceType.CHANGE_CARD_PIN,\ndata=data,\n# endpoint_path=\"/ChangeCardPIN\",\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/card/#pykuda2.wrappers.async_wrappers.card.AsyncCard.deactivate_card","title":"<code>deactivate_card(id, tracking_reference, simulate_request=False, request_reference=None)</code>  <code>async</code>","text":"<p>Allows customers deactivate their cards.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The unique identifier of the account.</p> required <code>id</code> <code>int</code> <p>Card unique identifier.</p> required <code>simulate_request</code> <code>bool</code> <p>Flag to simulate request.</p> <code>False</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/card.py</code> <pre><code>async def deactivate_card(\nself,\nid: int,\ntracking_reference: str,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers deactivate their cards.\n    Args:\n        tracking_reference: The unique identifier of the account.\n        id: Card unique identifier.\n        simulate_request: Flag to simulate request.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"SimulateRequest\": simulate_request,\n}\nreturn await self._api_call(\nservice_type=ServiceType.DEACTIVATE_CARD,\ndata=data,\n# endpoint_path=\"/DeactivateCard\",\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/card/#pykuda2.wrappers.async_wrappers.card.AsyncCard.get_cards","title":"<code>get_cards(tracking_reference, simulate_request=False, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves a list of cards requested.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The unique identifier of the account.</p> required <code>simulate_request</code> <code>bool</code> <p>Flag to simulate request.</p> <code>False</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/card.py</code> <pre><code>async def get_cards(\nself,\ntracking_reference: str,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a list of cards requested.\n    Args:\n        tracking_reference: The unique identifier of the account.\n        simulate_request: Flag to simulate request.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"SimulateRequest\": simulate_request,\n}\nreturn await self._api_call(\nservice_type=ServiceType.GET_CUSTOMER_CARDS,\ndata=data,\n# endpoint_path=\"/GetCustomerCards\",\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/card/#pykuda2.wrappers.async_wrappers.card.AsyncCard.manage_card_channel","title":"<code>manage_card_channel(id, tracking_reference, channel, limit, simulate_request=False, request_reference=None)</code>  <code>async</code>","text":"<p>Allows customers manage where their cards can be used.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Card unique identifier.</p> required <code>tracking_reference</code> <code>str</code> <p>The virtual account number.</p> required <code>channel</code> <code>CardChannel</code> <p>Card channels e.g. CardChannel.ATM, CardChannel.POS.</p> required <code>limit</code> <code>int</code> <p>Transaction amount limit in kobo.</p> required <code>simulate_request</code> <code>bool</code> <p>Flag to simulate request.</p> <code>False</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/card.py</code> <pre><code>async def manage_card_channel(\nself,\nid: int,\ntracking_reference: str,\nchannel: CardChannel,\nlimit: int,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers manage where their cards can be used.\n    Args:\n        id: Card unique identifier.\n        tracking_reference: The virtual account number.\n        channel: Card channels e.g. CardChannel.ATM, CardChannel.POS.\n        limit: Transaction amount limit in kobo.\n        simulate_request: Flag to simulate request.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"Channel\": channel,\n\"Limit\": limit,\n\"SimulateRequest\": simulate_request,\n}\nreturn await self._api_call(\nservice_type=ServiceType.MANAGE_CARD_CHANNEL,\ndata=data,\n# endpoint_path=\"/ManageCardChannel\",\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/card/#pykuda2.wrappers.async_wrappers.card.AsyncCard.request_card","title":"<code>request_card(tracking_reference, name_on_card, country, gender, additional_phone_number, delivery_city, delivery_lga, delivery_landmark, date_of_birth, delivery_state, delivery_street_no_and_name, request_reference=None)</code>  <code>async</code>","text":"<p>Request for a new card for a customer and get it delivered to their location.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The unique identifier of the virtual account.</p> required <code>name_on_card</code> <code>str</code> <p>The virtual account name.</p> required <code>date_of_birth</code> <code>str</code> <p>The customer's date of birth. Format(YYYY-MM-DD).</p> required <code>gender</code> <code>Gender</code> <p>Customer's gender e.g. Gender.MALE, Gender.FEMALE.</p> required <code>delivery_state</code> <code>str</code> <p>The state of residence for card delivery.</p> required <code>delivery_street_no_and_name</code> <code>str</code> <p>The street no and name for card delivery.</p> required <code>delivery_city</code> <code>str</code> <p>Name of city for card delivery.</p> required <code>delivery_lga</code> <code>str</code> <p>Local government area for card delivery</p> required <code>delivery_landmark</code> <code>str</code> <p>Landmark for card delivery.</p> required <code>country</code> <code>str</code> <p>Country of residence for card delivery.</p> required <code>additional_phone_number</code> <code>str</code> <p>additional phone number.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/card.py</code> <pre><code>async def request_card(\nself,\ntracking_reference: str,\nname_on_card: str,\ncountry: str,\ngender: Gender,\nadditional_phone_number: str,\ndelivery_city: str,\ndelivery_lga: str,\ndelivery_landmark: str,\ndate_of_birth: str,\ndelivery_state: str,\ndelivery_street_no_and_name: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Request for a new card for a customer and get it delivered to their location.\n    Args:\n        tracking_reference: The unique identifier of the virtual account.\n        name_on_card: The virtual account name.\n        date_of_birth: The customer's date of birth. Format(YYYY-MM-DD).\n        gender: Customer's gender e.g. Gender.MALE, Gender.FEMALE.\n        delivery_state: The state of residence for card delivery.\n        delivery_street_no_and_name: The street no and name for card delivery.\n        delivery_city: Name of city for card delivery.\n        delivery_lga: Local government area for card delivery\n        delivery_landmark: Landmark for card delivery.\n        country: Country of residence for card delivery.\n        additional_phone_number: additional phone number.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"NameOnCard\": name_on_card,\n\"dateofBirth\": date_of_birth,\n\"Gender\": gender,\n\"DeliveryState\": delivery_state,\n\"DeliveryStreetNoAndName\": delivery_street_no_and_name,\n\"DeliveryCity\": delivery_city,\n\"DeliveryLGA\": delivery_lga,\n\"DeliveryLandmark\": delivery_landmark,\n\"Country\": country,\n\"additionalPhoneNumber\": additional_phone_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.REQUEST_CARD,\ndata=data,\n# endpoint_path=\"/RequestCard\",\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/card/#pykuda2.wrappers.async_wrappers.card.AsyncCard.set_card_limit","title":"<code>set_card_limit(id, tracking_reference, channel, limit, simulate_request=False, request_reference=None)</code>  <code>async</code>","text":"<p>Set spend limit on a card.</p> <p>Card limits are a good way to manage individual spend on their accounts. There are use cases for this, especially in the edtech space where an individual will like to manage spending limits or even in the contracting space where clients want to manage spend limits on purchases.     - A good way to start this is to manage where and how these limits can be set         and across the channels the card can be accessed.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Card unique identifier.</p> required <code>tracking_reference</code> <code>str</code> <p>The virtual account number.</p> required <code>channel</code> <code>CardChannel</code> <p>Card channels e.g. CardChannel.ATM, CardChannel.POS.</p> required <code>limit</code> <code>int</code> <p>Transaction amount limit in kobo.</p> required <code>simulate_request</code> <code>bool</code> <p>Flag to simulate request.</p> <code>False</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/card.py</code> <pre><code>async def set_card_limit(\nself,\nid: int,\ntracking_reference: str,\nchannel: CardChannel,\nlimit: int,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Set spend limit on a card.\n    Card limits are a good way to manage individual spend on their accounts.\n    There are use cases for this, especially in the edtech space where an individual\n    will like to manage spending limits or even in the contracting space where clients\n    want to manage spend limits on purchases.\n        - A good way to start this is to manage where and how these limits can be set\n            and across the channels the card can be accessed.\n    Args:\n        id: Card unique identifier.\n        tracking_reference: The virtual account number.\n        channel: Card channels e.g. CardChannel.ATM, CardChannel.POS.\n        limit: Transaction amount limit in kobo.\n        simulate_request: Flag to simulate request.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"Channel\": channel,\n\"Limit\": limit,\n\"SimulateRequest\": simulate_request,\n}\nreturn await self._api_call(\nservice_type=ServiceType.MANAGE_CARD_TRANSACTION_LIMIT,\ndata=data,\n# endpoint_path=\"/ManageCardTransactionLimit\",\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/card/#pykuda2.wrappers.async_wrappers.card.AsyncCard.unblock_card","title":"<code>unblock_card(tracking_reference, id, request_reference=None)</code>  <code>async</code>","text":"<p>Unblocks a customers card.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Card unique identifier.</p> required <code>tracking_reference</code> <code>str</code> <p>The virtual account number.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/card.py</code> <pre><code>async def unblock_card(\nself, tracking_reference: str, id: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Unblocks a customers card.\n    Args:\n        id: Card unique identifier.\n        tracking_reference: The virtual account number.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.UNBLOCK_CARD,\ndata=data,\n# endpoint_path=\"/UnblockCard\",\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/gift_card/","title":"Gift card","text":""},{"location":"reference/wrappers/async_wrappers/gift_card/#pykuda2.wrappers.async_wrappers.gift_card.AsyncGiftCard","title":"<code>AsyncGiftCard</code>","text":"<p>         Bases: <code>BaseAsyncAPIWrapper</code></p> Source code in <code>pykuda2/wrappers/async_wrappers/gift_card.py</code> <pre><code>class AsyncGiftCard(BaseAsyncAPIWrapper):\nasync def get_gift_cards(self, request_reference: Optional[str] = None) -&gt; APIResponse:\n\"\"\"Retrieves a curated list of gift cards supported by Kuda.\n        Args:\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\nreturn await self._api_call(\nservice_type=ServiceType.GET_GIFT_CARD, request_reference=request_reference\n)\nasync def purchase_gift_card(\nself,\namount: Union[int, float],\ncustomer_name: str,\ncustomer_mobile: str,\ncustomer_email: str,\nbiller_identifier: str,\nnote: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Buy gift cards from the admin account\n        Args:\n            amount: The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            customer_name: Name of the customer receiving the gift card.\n            customer_mobile: Mobile number of customer.\n            customer_email: The email address of customer.\n            biller_identifier: The Biller ID or identifier. You can find it in the `APIResponse` of\n                `self.gift_cards`.\n            note: An optional gift card note.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"amount\": amount,\n\"requestingCustomerName\": customer_name,\n\"requestingCustomerMobile\": customer_mobile,\n\"requestingCustomerEmail\": customer_email,\n\"billerIdentifier\": biller_identifier,\n\"note\": note,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_BUY_GIFT_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def purchase_gift_card_from_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\ncustomer_name: str,\ncustomer_mobile: str,\ncustomer_email: str,\nbiller_identifier: str,\nnote: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Buy gift cards from the virtual account.\n        Args:\n            tracking_reference: The unique identifier of the virtual account.\n            amount: The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            customer_name: Name of the customer receiving the gift card.\n            customer_mobile: Mobile number of customer.\n            customer_email: The email address of customer.\n            biller_identifier: The Biller ID or identifier. You can find it in the `APIResponse` of\n                `self.gift_cards`.\n            note: An optional gift card note.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"requestingCustomerName\": customer_name,\n\"requestingCustomerMobile\": customer_mobile,\n\"requestingCustomerEmail\": customer_email,\n\"billerIdentifier\": biller_identifier,\n\"note\": note,\n}\nreturn await self._api_call(\nservice_type=ServiceType.BUY_GIFT_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_gift_card_status(\nself,\ntracking_reference: str,\namount: Union[int, float],\ncustomer_name: str,\ncustomer_mobile: str,\ncustomer_email: str,\nbiller_identifier: str,\nnote: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves the status of all gift cards purchased.\n        Args:\n            tracking_reference: The unique identifier of the virtual account.\n            amount: The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            customer_name: Name of the customer receiving the gift card.\n            customer_mobile: Mobile number of customer.\n            customer_email: The email address of customer.\n            biller_identifier: The Biller ID or identifier. You can find it in the `APIResponse` of\n                `self.gift_cards`.\n            note: An optional gift card note.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"requestingCustomerName\": customer_name,\n\"requestingCustomerMobile\": customer_mobile,\n\"requestingCustomerEmail\": customer_email,\n\"billerIdentifier\": biller_identifier,\n\"note\": note,\n}\nreturn await self._api_call(\nservice_type=ServiceType.GIFT_CARD_TSQ,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/gift_card/#pykuda2.wrappers.async_wrappers.gift_card.AsyncGiftCard.get_gift_card_status","title":"<code>get_gift_card_status(tracking_reference, amount, customer_name, customer_mobile, customer_email, biller_identifier, note=None, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves the status of all gift cards purchased.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The unique identifier of the virtual account.</p> required <code>amount</code> <code>Union[int, float]</code> <p>The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>customer_name</code> <code>str</code> <p>Name of the customer receiving the gift card.</p> required <code>customer_mobile</code> <code>str</code> <p>Mobile number of customer.</p> required <code>customer_email</code> <code>str</code> <p>The email address of customer.</p> required <code>biller_identifier</code> <code>str</code> <p>The Biller ID or identifier. You can find it in the <code>APIResponse</code> of <code>self.gift_cards</code>.</p> required <code>note</code> <code>Optional[str]</code> <p>An optional gift card note.</p> <code>None</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/gift_card.py</code> <pre><code>async def get_gift_card_status(\nself,\ntracking_reference: str,\namount: Union[int, float],\ncustomer_name: str,\ncustomer_mobile: str,\ncustomer_email: str,\nbiller_identifier: str,\nnote: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves the status of all gift cards purchased.\n    Args:\n        tracking_reference: The unique identifier of the virtual account.\n        amount: The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        customer_name: Name of the customer receiving the gift card.\n        customer_mobile: Mobile number of customer.\n        customer_email: The email address of customer.\n        biller_identifier: The Biller ID or identifier. You can find it in the `APIResponse` of\n            `self.gift_cards`.\n        note: An optional gift card note.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"requestingCustomerName\": customer_name,\n\"requestingCustomerMobile\": customer_mobile,\n\"requestingCustomerEmail\": customer_email,\n\"billerIdentifier\": biller_identifier,\n\"note\": note,\n}\nreturn await self._api_call(\nservice_type=ServiceType.GIFT_CARD_TSQ,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/gift_card/#pykuda2.wrappers.async_wrappers.gift_card.AsyncGiftCard.get_gift_cards","title":"<code>get_gift_cards(request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves a curated list of gift cards supported by Kuda.</p> <p>Parameters:</p> Name Type Description Default <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/gift_card.py</code> <pre><code>async def get_gift_cards(self, request_reference: Optional[str] = None) -&gt; APIResponse:\n\"\"\"Retrieves a curated list of gift cards supported by Kuda.\n    Args:\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\nreturn await self._api_call(\nservice_type=ServiceType.GET_GIFT_CARD, request_reference=request_reference\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/gift_card/#pykuda2.wrappers.async_wrappers.gift_card.AsyncGiftCard.purchase_gift_card","title":"<code>purchase_gift_card(amount, customer_name, customer_mobile, customer_email, biller_identifier, note=None, request_reference=None)</code>  <code>async</code>","text":"<p>Buy gift cards from the admin account</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Union[int, float]</code> <p>The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>customer_name</code> <code>str</code> <p>Name of the customer receiving the gift card.</p> required <code>customer_mobile</code> <code>str</code> <p>Mobile number of customer.</p> required <code>customer_email</code> <code>str</code> <p>The email address of customer.</p> required <code>biller_identifier</code> <code>str</code> <p>The Biller ID or identifier. You can find it in the <code>APIResponse</code> of <code>self.gift_cards</code>.</p> required <code>note</code> <code>Optional[str]</code> <p>An optional gift card note.</p> <code>None</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/gift_card.py</code> <pre><code>async def purchase_gift_card(\nself,\namount: Union[int, float],\ncustomer_name: str,\ncustomer_mobile: str,\ncustomer_email: str,\nbiller_identifier: str,\nnote: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Buy gift cards from the admin account\n    Args:\n        amount: The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        customer_name: Name of the customer receiving the gift card.\n        customer_mobile: Mobile number of customer.\n        customer_email: The email address of customer.\n        biller_identifier: The Biller ID or identifier. You can find it in the `APIResponse` of\n            `self.gift_cards`.\n        note: An optional gift card note.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"amount\": amount,\n\"requestingCustomerName\": customer_name,\n\"requestingCustomerMobile\": customer_mobile,\n\"requestingCustomerEmail\": customer_email,\n\"billerIdentifier\": biller_identifier,\n\"note\": note,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_BUY_GIFT_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/gift_card/#pykuda2.wrappers.async_wrappers.gift_card.AsyncGiftCard.purchase_gift_card_from_virtual_account","title":"<code>purchase_gift_card_from_virtual_account(tracking_reference, amount, customer_name, customer_mobile, customer_email, biller_identifier, note=None, request_reference=None)</code>  <code>async</code>","text":"<p>Buy gift cards from the virtual account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The unique identifier of the virtual account.</p> required <code>amount</code> <code>Union[int, float]</code> <p>The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>customer_name</code> <code>str</code> <p>Name of the customer receiving the gift card.</p> required <code>customer_mobile</code> <code>str</code> <p>Mobile number of customer.</p> required <code>customer_email</code> <code>str</code> <p>The email address of customer.</p> required <code>biller_identifier</code> <code>str</code> <p>The Biller ID or identifier. You can find it in the <code>APIResponse</code> of <code>self.gift_cards</code>.</p> required <code>note</code> <code>Optional[str]</code> <p>An optional gift card note.</p> <code>None</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/gift_card.py</code> <pre><code>async def purchase_gift_card_from_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\ncustomer_name: str,\ncustomer_mobile: str,\ncustomer_email: str,\nbiller_identifier: str,\nnote: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Buy gift cards from the virtual account.\n    Args:\n        tracking_reference: The unique identifier of the virtual account.\n        amount: The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        customer_name: Name of the customer receiving the gift card.\n        customer_mobile: Mobile number of customer.\n        customer_email: The email address of customer.\n        biller_identifier: The Biller ID or identifier. You can find it in the `APIResponse` of\n            `self.gift_cards`.\n        note: An optional gift card note.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"requestingCustomerName\": customer_name,\n\"requestingCustomerMobile\": customer_mobile,\n\"requestingCustomerEmail\": customer_email,\n\"billerIdentifier\": biller_identifier,\n\"note\": note,\n}\nreturn await self._api_call(\nservice_type=ServiceType.BUY_GIFT_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/instant_settlement_service/","title":"Instant settlement service","text":""},{"location":"reference/wrappers/async_wrappers/instant_settlement_service/#pykuda2.wrappers.async_wrappers.instant_settlement_service.AsyncInstantSettlementService","title":"<code>AsyncInstantSettlementService</code>","text":"<p>         Bases: <code>BaseAsyncAPIWrapper</code></p> Source code in <code>pykuda2/wrappers/async_wrappers/instant_settlement_service.py</code> <pre><code>class AsyncInstantSettlementService(BaseAsyncAPIWrapper):\ndef __init__(self, secret_key: str, client_password: str, mode=Mode.DEVELOPMENT):\nsuper().__init__(email=\"\", api_key=\"\", mode=mode)\nself.secret_key = secret_key\nself.client_password = client_password\n@property\ndef _base_url(self) -&gt; str:\n\"\"\"Returns the base url.\n        The url returned depends on the mode in which the class was instantiated.\"\"\"\nreturn {\nMode.DEVELOPMENT: \"https://partners-uat.kudabank.com\",\nMode.PRODUCTION: \"https://partners.kuda.com\",\n}[self._mode]\n@property\nasync def _token(self) -&gt; str:\nif self._token:\nreturn self._token\nelse:\nresponse = await self._api_call(\nservice_type=ServiceType.NO_OP,\ndata={\n\"secretKey\": self.secret_key,\n\"clientPassword\": self.client_password,\n},\nendpoint_path=\"/api/Auth/authenticate\",\nexclude_auth_header=True,\n)\nif response.data:\nself._token = response.data[\"auth_token\"]\nreturn self._token\nraise TokenException(\nf\"Unable to get access token for InstantSettlementService. {response.message}. Please ensure valid credentials were provided\"\n)\nasync def create_terminal(\nself,\nterminal_id: str,\nmerchant_id: str,\nkuda_account_number: int,\nserial_number: str,\nis_receiving_payment: bool,\nis_active: bool,\n) -&gt; APIResponse:\n\"\"\"Gives the partner the ability to add certain parameters to a POS device.\n        It allows the partner to anchor routing communications between the processor and the Kuda settlement system.\n        Args:\n            terminal_id: The terminal identifier.\n            merchant_id: The merchant identifier.\n            kuda_account_number: The client's Kuda account number.\n            serial_number: The serial number.\n            is_receiving_payment: Set to `True` for receiving payment or `False` for otherwise.\n            is_active: Set to `True` for an active terminal or `False` for otherwise.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\npayload = {\n\"terminalId\": terminal_id,\n\"merchantId\": merchant_id,\n\"kudaAccountNumber\": kuda_account_number,\n\"serialNumber\": serial_number,\n\"isReceivingPayment\": is_receiving_payment,\n\"isActive\": is_active,\n}\nreturn await self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/api/terminal/createterminal\",\n)\nasync def update_terminal(\nself,\nkuda_merchant_id: str,\nterminal_id: str,\nkuda_account_number: int,\nkuda_account_name: str,\nserial_number: str,\nis_active: bool,\nis_receiving_payment: bool,\nfee_percentage: float,\ndate_created: str,\n) -&gt; APIResponse:\n\"\"\"Allows a partner to swap the location and user of a POS device.\n        Args:\n            kuda_merchant_id: The client's Kuda merchant identifier\n            terminal_id: The  terminal unique identifier\n            kuda_account_number: The client's Kuda account number\n            kuda_account_name: The client's account name\n            serial_number: The terminal's serial number\n            is_active: Set to `True` for an active terminal or otherwise.\n            is_receiving_payment: Set to `True` if the terminal is receiving payment else otherwise.\n            fee_percentage: Fee percentage\n            date_created: The date the terminal was created\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\npayload = {\n\"id\": id,\n\"kudaMerchantId\": kuda_merchant_id,\n\"terminalId\": terminal_id,\n\"kudaAccountNumber\": kuda_account_number,\n\"kudaAccountName\": kuda_account_name,\n\"serialNumber\": serial_number,\n\"isActive\": is_active,\n\"isReceivingPayment\": is_receiving_payment,\n\"feePercentage\": fee_percentage,\n\"dateCreated\": date_created,\n}\nreturn await self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/EditTerminal\",\n)\nasync def all(self, page_size: int, page_number: int) -&gt; APIResponse:\n\"\"\"Allows a user to get all merchants and the terminals assigned to them.\n        Args:\n            page_size: This specifies the maximum number of terminals to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\npayload = {\"pageSize\": page_size, \"pageNumber\": page_number}\nreturn await self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/RetrieveMerchantTerminals\",\n)\nasync def get_settlement_status(self, transaction_id: str) -&gt; APIResponse:\n\"\"\"Retrieves insight on the status of a particular/all settlements for a terminal.\n        Args:\n            transaction_id: The transaction reference number or unique identifier.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\npayload = {\"transactionId\": transaction_id}\nreturn await self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/settlementstatus\",\n)\nasync def log_transaction(self, amount: Union[int, float], transaction_id: str, terminal_id: str) -&gt; APIResponse:\n\"\"\"Logs a complete transaction.\n        For complete transaction fulfilment, a user will call this method with the transaction amount\n        that needs to be fulfilled. This way, the terminal management system is updated with the transaction\n        status in real-time and completes settlement to the specified user's account.\n        Logging a transaction sends a notification to Kuda which triggers instant settlement.\n        Args:\n            amount: The transaction amount. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            transaction_id: The transaction reference number or unique identifier.\n            terminal_id: The terminal unique identifier.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\npayload = {\n\"amount\": amount,\n\"transactionId\": transaction_id,\n\"terminalId\": terminal_id,\n}\nreturn await self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/logtransaction\",\n)\nasync def transactions(\nself, terminal_id: str, from_: str, to: str, page_size: int, page_number: int\n) -&gt; APIResponse:\n\"\"\"Retrieves transactions.\n        This method allows a user to do back office operations while searching for transactions disputes.\n        Args:\n            terminal_id: The terminal unique identifier\n            from_: The start date\n            to: The end date\n            page_size: This specifies the maximum number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\npayload = {\n\"terminalId\": terminal_id,\n\"dateFrom\": from_,\n\"dateTo\": to,\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/searchtransaction\",\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/instant_settlement_service/#pykuda2.wrappers.async_wrappers.instant_settlement_service.AsyncInstantSettlementService.all","title":"<code>all(page_size, page_number)</code>  <code>async</code>","text":"<p>Allows a user to get all merchants and the terminals assigned to them.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>This specifies the maximum number of terminals to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/instant_settlement_service.py</code> <pre><code>async def all(self, page_size: int, page_number: int) -&gt; APIResponse:\n\"\"\"Allows a user to get all merchants and the terminals assigned to them.\n    Args:\n        page_size: This specifies the maximum number of terminals to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\npayload = {\"pageSize\": page_size, \"pageNumber\": page_number}\nreturn await self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/RetrieveMerchantTerminals\",\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/instant_settlement_service/#pykuda2.wrappers.async_wrappers.instant_settlement_service.AsyncInstantSettlementService.create_terminal","title":"<code>create_terminal(terminal_id, merchant_id, kuda_account_number, serial_number, is_receiving_payment, is_active)</code>  <code>async</code>","text":"<p>Gives the partner the ability to add certain parameters to a POS device.</p> <p>It allows the partner to anchor routing communications between the processor and the Kuda settlement system.</p> <p>Parameters:</p> Name Type Description Default <code>terminal_id</code> <code>str</code> <p>The terminal identifier.</p> required <code>merchant_id</code> <code>str</code> <p>The merchant identifier.</p> required <code>kuda_account_number</code> <code>int</code> <p>The client's Kuda account number.</p> required <code>serial_number</code> <code>str</code> <p>The serial number.</p> required <code>is_receiving_payment</code> <code>bool</code> <p>Set to <code>True</code> for receiving payment or <code>False</code> for otherwise.</p> required <code>is_active</code> <code>bool</code> <p>Set to <code>True</code> for an active terminal or <code>False</code> for otherwise.</p> required <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/instant_settlement_service.py</code> <pre><code>async def create_terminal(\nself,\nterminal_id: str,\nmerchant_id: str,\nkuda_account_number: int,\nserial_number: str,\nis_receiving_payment: bool,\nis_active: bool,\n) -&gt; APIResponse:\n\"\"\"Gives the partner the ability to add certain parameters to a POS device.\n    It allows the partner to anchor routing communications between the processor and the Kuda settlement system.\n    Args:\n        terminal_id: The terminal identifier.\n        merchant_id: The merchant identifier.\n        kuda_account_number: The client's Kuda account number.\n        serial_number: The serial number.\n        is_receiving_payment: Set to `True` for receiving payment or `False` for otherwise.\n        is_active: Set to `True` for an active terminal or `False` for otherwise.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\npayload = {\n\"terminalId\": terminal_id,\n\"merchantId\": merchant_id,\n\"kudaAccountNumber\": kuda_account_number,\n\"serialNumber\": serial_number,\n\"isReceivingPayment\": is_receiving_payment,\n\"isActive\": is_active,\n}\nreturn await self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/api/terminal/createterminal\",\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/instant_settlement_service/#pykuda2.wrappers.async_wrappers.instant_settlement_service.AsyncInstantSettlementService.get_settlement_status","title":"<code>get_settlement_status(transaction_id)</code>  <code>async</code>","text":"<p>Retrieves insight on the status of a particular/all settlements for a terminal.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>The transaction reference number or unique identifier.</p> required <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/instant_settlement_service.py</code> <pre><code>async def get_settlement_status(self, transaction_id: str) -&gt; APIResponse:\n\"\"\"Retrieves insight on the status of a particular/all settlements for a terminal.\n    Args:\n        transaction_id: The transaction reference number or unique identifier.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\npayload = {\"transactionId\": transaction_id}\nreturn await self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/settlementstatus\",\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/instant_settlement_service/#pykuda2.wrappers.async_wrappers.instant_settlement_service.AsyncInstantSettlementService.log_transaction","title":"<code>log_transaction(amount, transaction_id, terminal_id)</code>  <code>async</code>","text":"<p>Logs a complete transaction.</p> <p>For complete transaction fulfilment, a user will call this method with the transaction amount that needs to be fulfilled. This way, the terminal management system is updated with the transaction status in real-time and completes settlement to the specified user's account.</p> <p>Logging a transaction sends a notification to Kuda which triggers instant settlement.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Union[int, float]</code> <p>The transaction amount. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>transaction_id</code> <code>str</code> <p>The transaction reference number or unique identifier.</p> required <code>terminal_id</code> <code>str</code> <p>The terminal unique identifier.</p> required <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/instant_settlement_service.py</code> <pre><code>async def log_transaction(self, amount: Union[int, float], transaction_id: str, terminal_id: str) -&gt; APIResponse:\n\"\"\"Logs a complete transaction.\n    For complete transaction fulfilment, a user will call this method with the transaction amount\n    that needs to be fulfilled. This way, the terminal management system is updated with the transaction\n    status in real-time and completes settlement to the specified user's account.\n    Logging a transaction sends a notification to Kuda which triggers instant settlement.\n    Args:\n        amount: The transaction amount. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        transaction_id: The transaction reference number or unique identifier.\n        terminal_id: The terminal unique identifier.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\npayload = {\n\"amount\": amount,\n\"transactionId\": transaction_id,\n\"terminalId\": terminal_id,\n}\nreturn await self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/logtransaction\",\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/instant_settlement_service/#pykuda2.wrappers.async_wrappers.instant_settlement_service.AsyncInstantSettlementService.transactions","title":"<code>transactions(terminal_id, from_, to, page_size, page_number)</code>  <code>async</code>","text":"<p>Retrieves transactions.</p> <p>This method allows a user to do back office operations while searching for transactions disputes.</p> <p>Parameters:</p> Name Type Description Default <code>terminal_id</code> <code>str</code> <p>The terminal unique identifier</p> required <code>from_</code> <code>str</code> <p>The start date</p> required <code>to</code> <code>str</code> <p>The end date</p> required <code>page_size</code> <code>int</code> <p>This specifies the maximum number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/instant_settlement_service.py</code> <pre><code>async def transactions(\nself, terminal_id: str, from_: str, to: str, page_size: int, page_number: int\n) -&gt; APIResponse:\n\"\"\"Retrieves transactions.\n    This method allows a user to do back office operations while searching for transactions disputes.\n    Args:\n        terminal_id: The terminal unique identifier\n        from_: The start date\n        to: The end date\n        page_size: This specifies the maximum number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\npayload = {\n\"terminalId\": terminal_id,\n\"dateFrom\": from_,\n\"dateTo\": to,\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/searchtransaction\",\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/instant_settlement_service/#pykuda2.wrappers.async_wrappers.instant_settlement_service.AsyncInstantSettlementService.update_terminal","title":"<code>update_terminal(kuda_merchant_id, terminal_id, kuda_account_number, kuda_account_name, serial_number, is_active, is_receiving_payment, fee_percentage, date_created)</code>  <code>async</code>","text":"<p>Allows a partner to swap the location and user of a POS device.</p> <p>Parameters:</p> Name Type Description Default <code>kuda_merchant_id</code> <code>str</code> <p>The client's Kuda merchant identifier</p> required <code>terminal_id</code> <code>str</code> <p>The  terminal unique identifier</p> required <code>kuda_account_number</code> <code>int</code> <p>The client's Kuda account number</p> required <code>kuda_account_name</code> <code>str</code> <p>The client's account name</p> required <code>serial_number</code> <code>str</code> <p>The terminal's serial number</p> required <code>is_active</code> <code>bool</code> <p>Set to <code>True</code> for an active terminal or otherwise.</p> required <code>is_receiving_payment</code> <code>bool</code> <p>Set to <code>True</code> if the terminal is receiving payment else otherwise.</p> required <code>fee_percentage</code> <code>float</code> <p>Fee percentage</p> required <code>date_created</code> <code>str</code> <p>The date the terminal was created</p> required <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/instant_settlement_service.py</code> <pre><code>async def update_terminal(\nself,\nkuda_merchant_id: str,\nterminal_id: str,\nkuda_account_number: int,\nkuda_account_name: str,\nserial_number: str,\nis_active: bool,\nis_receiving_payment: bool,\nfee_percentage: float,\ndate_created: str,\n) -&gt; APIResponse:\n\"\"\"Allows a partner to swap the location and user of a POS device.\n    Args:\n        kuda_merchant_id: The client's Kuda merchant identifier\n        terminal_id: The  terminal unique identifier\n        kuda_account_number: The client's Kuda account number\n        kuda_account_name: The client's account name\n        serial_number: The terminal's serial number\n        is_active: Set to `True` for an active terminal or otherwise.\n        is_receiving_payment: Set to `True` if the terminal is receiving payment else otherwise.\n        fee_percentage: Fee percentage\n        date_created: The date the terminal was created\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\npayload = {\n\"id\": id,\n\"kudaMerchantId\": kuda_merchant_id,\n\"terminalId\": terminal_id,\n\"kudaAccountNumber\": kuda_account_number,\n\"kudaAccountName\": kuda_account_name,\n\"serialNumber\": serial_number,\n\"isActive\": is_active,\n\"isReceivingPayment\": is_receiving_payment,\n\"feePercentage\": fee_percentage,\n\"dateCreated\": date_created,\n}\nreturn await self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/EditTerminal\",\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/","title":"Savings","text":""},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings","title":"<code>AsyncSavings</code>","text":"<p>         Bases: <code>BaseAsyncAPIWrapper</code></p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>class AsyncSavings(BaseAsyncAPIWrapper):\nasync def create_plain_savings_account(\nself,\nname: str,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Create a Plain Savings Account.\n        To create a Plain savings, in your request, you need to state the Virtual Account\n        associated with this savings account as well as create a unique identifier for\n        the savings account to be created.\n        Args:\n            name: The savings plan name.\n            tracking_reference: The virtual account transaction reference number.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"Name\": name, \"TrackingReference\": tracking_reference}\nreturn await self._api_call(\nservice_type=ServiceType.CREATE_PLAIN_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_plain_savings_account(\nself,\ntracking_reference: str,\nprimary_account_number: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a customers plain savings account\n        Args:\n            tracking_reference: Account transaction reference number of the savings you want to retrieve.\n                This parameter is for specific plain savings.\n            primary_account_number: Account number of the specific customer.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"PrimaryAccountNumber\": primary_account_number,\n}\nreturn await self._api_call(service_type=ServiceType.GET_PLAIN_SAVE, data=data)\nasync def get_plain_savings_accounts(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves all customers plain savings accounts\n        Args:\n            tracking_reference: Account transaction reference number of the savings you want to retrieve.\n                This parameter is for specific plain savings.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"TrackingReference\": tracking_reference}\nreturn await self._api_call(\nservice_type=ServiceType.GET_ALL_CUSTOMER_PLAIN_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def credit_or_debit_plain_savings_account(\nself,\namount: Union[int, float],\nnarration: str,\ntransaction_type: TransactionType,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Adds or removes money from a plain savings account.\n        Args:\n            amount: The amount to be added or removed. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            narration: The transaction description.\n            transaction_type: The transaction type e.g. TransactionType.CREDIT.\n            tracking_reference: Unique identifier for savings.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Amount\": amount,\n\"Narration\": narration,\n\"TransactionType\": transaction_type,\n\"TrackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.PLAIN_SAVE_DEBIT_CREDIT,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_plain_savings_account_transactions(\nself,\npage_size: int,\npage_number: int,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves all plain savings account transaction data.\n        Args:\n            tracking_reference: Unique identifier for account.\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n\"TrackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.RETRIEVE_PLAIN_SAVE_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def create_open_flexible_savings_account(\nself,\nsavings_tracking_reference: str,\nname: str,\nvirtual_account_tracking_reference: str,\namount: Union[int, float],\nduration: str,\nfrequency: str,\nstart_now: bool,\nstart_date: Optional[str],\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Create an open savings plan.\n        Args:\n            savings_tracking_reference: The unique identifier for savings.\n            name: Name of the savings plan.\n            virtual_account_tracking_reference: Unique identifier for the associated virtual account.\n            amount: Amount to be saved. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            duration: Length of savings.\n            frequency: How often the savings should happen.\n            start_now: Flag to start the savings immediately.\n            start_date: Starting date of the savings. Required if `start_now` is `False`.\n                Format (YYYY-MM-DD).\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"SavingsTrackingReference\": savings_tracking_reference,\n\"Name\": name,\n\"VirtualAccountTrackingReference\": virtual_account_tracking_reference,\n\"Amount\": amount,\n\"Duration\": duration,\n\"Frequency\": frequency,\n\"StartNow\": start_now,\n\"StartData\": start_date,\n}\nreturn await self._api_call(\nservice_type=ServiceType.CREATE_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def pre_create_open_flexible_savings_account(\nself,\nsavings_tracking_reference: str,\nname: str,\nvirtual_account_tracking_reference: str,\namount: Union[int, float],\nduration: str,\nfrequency: str,\nstart_now: bool,\nstart_date: str,\nis_interest_earning: bool,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Pre create an Open Flexible Savings account.\n        Args:\n            savings_tracking_reference: The unique identifier for savings.\n            name: Name of the savings plan.\n            virtual_account_tracking_reference: Unique identifier for the associated virtual account.\n            amount: Amount to be saved. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            duration: Length of savings.\n            frequency: How often the savings should happen.\n            start_now: Flag to start the savings immediately.\n            start_date: Starting date of the savings. Required if `start_now` is `False`.\n                Format (YYYY-MM-DD).\n            is_interest_earning: Will the savings earn interest or not.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"SavingsTrackingReference\": savings_tracking_reference,\n\"Name\": name,\n\"VirtualAccountTrackingReference\": virtual_account_tracking_reference,\n\"Amount\": amount,\n\"Duration\": duration,\n\"Frequency\": frequency,\n\"StartNow\": start_now,\n\"StartData\": start_date,\n\"IsInterestEarning\": is_interest_earning,\n}\nreturn await self._api_call(\nservice_type=ServiceType.PRE_CREATE_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_open_flexible_savings_account(\nself,\ntracking_reference: str,\nprimary_account_number: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieve an open flexible savings account.\n        Args:\n            tracking_reference: Account transaction reference number of the savings you want to retrieve.\n            primary_account_number: Account number of the specific customer.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"PrimaryAccountNumber\": primary_account_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.GET_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_open_flexible_savings_accounts(\nself,\ntracking_reference: str,\nprimary_account_number: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves all flexible savings account.\n        Args:\n            tracking_reference: Account transaction reference number of the savings you want to retrieve.\n            primary_account_number: Account number of the specific customer.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"PrimaryAccountNumber\": primary_account_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.GET_ALL_CUSTOMER_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def withdrawal_from_flexible_savings_account(\nself,\namount: Union[int, float],\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n        Args:\n            amount: Amount to be removed. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            tracking_reference: Unique identifier for savings.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"Amount\": amount, \"TrackingReference\": tracking_reference}\nreturn await self._api_call(\nservice_type=ServiceType.COMPLETE_OPEN_FLEXIBLE_SAVE_WITHDRAWAL,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_flexible_savings_account_transactions(\nself,\ntracking_reference: str,\npage_size: int,\npage_number: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n        Args:\n            tracking_reference: Account tracking reference number.\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n\"TrackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.RETRIEVE_OPEN_FLEXIBLE_SAVE_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def create_fixed_savings_account(\nself,\nsavings_tracking_reference: str,\nname: str,\nvirtual_account_tracking_reference: str,\namount: Union[int, float],\nduration: str,\nfrequency: str,\nstart_now: bool,\nstart_date: str,\nis_interest_earning: bool,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Creates a fixed account.\n        Args:\n            savings_tracking_reference: The unique identifier for savings.\n            name: Name of the savings plan.\n            virtual_account_tracking_reference: Unique identifier for the associated virtual account.\n            amount: Amount to be saved. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            duration: Length of savings.\n            frequency: How often the savings should happen.\n            start_now: Flag to start the savings immediately.\n            start_date: Starting date of the savings. Required if `start_now` is `False`.\n                Format (YYYY-MM-DD).\n            is_interest_earning: Will the savings earn interest or not.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"SavingsTrackingReference\": savings_tracking_reference,\n\"Name\": name,\n\"VirtualAccountTrackingReference\": virtual_account_tracking_reference,\n\"Amount\": amount,\n\"Duration\": duration,\n\"Frequency\": frequency,\n\"StartNow\": start_now,\n\"StartData\": start_date,\n\"IsInterestEarning\": is_interest_earning,\n}\nreturn await self._api_call(\nservice_type=ServiceType.CREATE_FIXED_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_fixed_savings_account(\nself,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a fixed savings account.\n        Args:\n            tracking_reference: Account transaction reference number of the savings you want to retrieve.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"SavingsId\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.GET_FIXED_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_fixed_savings_accounts(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves all fixed savings you want to retrieve.\n        Args:\n            tracking_reference: Account transaction reference number of the savings you want to retrieve.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"TrackingReference\": tracking_reference}\nreturn await self._api_call(\nservice_type=ServiceType.GET_ALL_CUSTOMER_FIXED_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def close_fixed_savings_account(\nself,\namount: Union[int, float],\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n        Args:\n            amount: amount to be removed. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            tracking_reference: unique identifier for the savings.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"Amount\": amount, \"SavingsId\": tracking_reference}\nreturn await self._api_call(\nservice_type=ServiceType.COMPLETE_FIXED_SAVE_WITHDRAWAL,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_fixed_savings_account_transactions(\nself,\ntracking_reference: str,\npage_number: int,\npage_size: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves all fixed savings account transaction\n        Args:\n            tracking_reference: Account tracking reference number.\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"PageNumber\": page_number,\n\"PageSize\": page_size,\n\"SavingsId\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.RETRIEVE_FIXED_SAVE_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.close_fixed_savings_account","title":"<code>close_fixed_savings_account(amount, tracking_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Union[int, float]</code> <p>amount to be removed. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>tracking_reference</code> <code>str</code> <p>unique identifier for the savings.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def close_fixed_savings_account(\nself,\namount: Union[int, float],\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n    Args:\n        amount: amount to be removed. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        tracking_reference: unique identifier for the savings.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"Amount\": amount, \"SavingsId\": tracking_reference}\nreturn await self._api_call(\nservice_type=ServiceType.COMPLETE_FIXED_SAVE_WITHDRAWAL,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.create_fixed_savings_account","title":"<code>create_fixed_savings_account(savings_tracking_reference, name, virtual_account_tracking_reference, amount, duration, frequency, start_now, start_date, is_interest_earning, request_reference=None)</code>  <code>async</code>","text":"<p>Creates a fixed account.</p> <p>Parameters:</p> Name Type Description Default <code>savings_tracking_reference</code> <code>str</code> <p>The unique identifier for savings.</p> required <code>name</code> <code>str</code> <p>Name of the savings plan.</p> required <code>virtual_account_tracking_reference</code> <code>str</code> <p>Unique identifier for the associated virtual account.</p> required <code>amount</code> <code>Union[int, float]</code> <p>Amount to be saved. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>duration</code> <code>str</code> <p>Length of savings.</p> required <code>frequency</code> <code>str</code> <p>How often the savings should happen.</p> required <code>start_now</code> <code>bool</code> <p>Flag to start the savings immediately.</p> required <code>start_date</code> <code>str</code> <p>Starting date of the savings. Required if <code>start_now</code> is <code>False</code>. Format (YYYY-MM-DD).</p> required <code>is_interest_earning</code> <code>bool</code> <p>Will the savings earn interest or not.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def create_fixed_savings_account(\nself,\nsavings_tracking_reference: str,\nname: str,\nvirtual_account_tracking_reference: str,\namount: Union[int, float],\nduration: str,\nfrequency: str,\nstart_now: bool,\nstart_date: str,\nis_interest_earning: bool,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Creates a fixed account.\n    Args:\n        savings_tracking_reference: The unique identifier for savings.\n        name: Name of the savings plan.\n        virtual_account_tracking_reference: Unique identifier for the associated virtual account.\n        amount: Amount to be saved. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        duration: Length of savings.\n        frequency: How often the savings should happen.\n        start_now: Flag to start the savings immediately.\n        start_date: Starting date of the savings. Required if `start_now` is `False`.\n            Format (YYYY-MM-DD).\n        is_interest_earning: Will the savings earn interest or not.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"SavingsTrackingReference\": savings_tracking_reference,\n\"Name\": name,\n\"VirtualAccountTrackingReference\": virtual_account_tracking_reference,\n\"Amount\": amount,\n\"Duration\": duration,\n\"Frequency\": frequency,\n\"StartNow\": start_now,\n\"StartData\": start_date,\n\"IsInterestEarning\": is_interest_earning,\n}\nreturn await self._api_call(\nservice_type=ServiceType.CREATE_FIXED_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.create_open_flexible_savings_account","title":"<code>create_open_flexible_savings_account(savings_tracking_reference, name, virtual_account_tracking_reference, amount, duration, frequency, start_now, start_date, request_reference=None)</code>  <code>async</code>","text":"<p>Create an open savings plan.</p> <p>Parameters:</p> Name Type Description Default <code>savings_tracking_reference</code> <code>str</code> <p>The unique identifier for savings.</p> required <code>name</code> <code>str</code> <p>Name of the savings plan.</p> required <code>virtual_account_tracking_reference</code> <code>str</code> <p>Unique identifier for the associated virtual account.</p> required <code>amount</code> <code>Union[int, float]</code> <p>Amount to be saved. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>duration</code> <code>str</code> <p>Length of savings.</p> required <code>frequency</code> <code>str</code> <p>How often the savings should happen.</p> required <code>start_now</code> <code>bool</code> <p>Flag to start the savings immediately.</p> required <code>start_date</code> <code>Optional[str]</code> <p>Starting date of the savings. Required if <code>start_now</code> is <code>False</code>. Format (YYYY-MM-DD).</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def create_open_flexible_savings_account(\nself,\nsavings_tracking_reference: str,\nname: str,\nvirtual_account_tracking_reference: str,\namount: Union[int, float],\nduration: str,\nfrequency: str,\nstart_now: bool,\nstart_date: Optional[str],\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Create an open savings plan.\n    Args:\n        savings_tracking_reference: The unique identifier for savings.\n        name: Name of the savings plan.\n        virtual_account_tracking_reference: Unique identifier for the associated virtual account.\n        amount: Amount to be saved. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        duration: Length of savings.\n        frequency: How often the savings should happen.\n        start_now: Flag to start the savings immediately.\n        start_date: Starting date of the savings. Required if `start_now` is `False`.\n            Format (YYYY-MM-DD).\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"SavingsTrackingReference\": savings_tracking_reference,\n\"Name\": name,\n\"VirtualAccountTrackingReference\": virtual_account_tracking_reference,\n\"Amount\": amount,\n\"Duration\": duration,\n\"Frequency\": frequency,\n\"StartNow\": start_now,\n\"StartData\": start_date,\n}\nreturn await self._api_call(\nservice_type=ServiceType.CREATE_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.create_plain_savings_account","title":"<code>create_plain_savings_account(name, tracking_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Create a Plain Savings Account.</p> <p>To create a Plain savings, in your request, you need to state the Virtual Account associated with this savings account as well as create a unique identifier for the savings account to be created.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The savings plan name.</p> required <code>tracking_reference</code> <code>str</code> <p>The virtual account transaction reference number.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def create_plain_savings_account(\nself,\nname: str,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Create a Plain Savings Account.\n    To create a Plain savings, in your request, you need to state the Virtual Account\n    associated with this savings account as well as create a unique identifier for\n    the savings account to be created.\n    Args:\n        name: The savings plan name.\n        tracking_reference: The virtual account transaction reference number.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"Name\": name, \"TrackingReference\": tracking_reference}\nreturn await self._api_call(\nservice_type=ServiceType.CREATE_PLAIN_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.credit_or_debit_plain_savings_account","title":"<code>credit_or_debit_plain_savings_account(amount, narration, transaction_type, tracking_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Adds or removes money from a plain savings account.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Union[int, float]</code> <p>The amount to be added or removed. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>narration</code> <code>str</code> <p>The transaction description.</p> required <code>transaction_type</code> <code>TransactionType</code> <p>The transaction type e.g. TransactionType.CREDIT.</p> required <code>tracking_reference</code> <code>str</code> <p>Unique identifier for savings.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def credit_or_debit_plain_savings_account(\nself,\namount: Union[int, float],\nnarration: str,\ntransaction_type: TransactionType,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Adds or removes money from a plain savings account.\n    Args:\n        amount: The amount to be added or removed. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        narration: The transaction description.\n        transaction_type: The transaction type e.g. TransactionType.CREDIT.\n        tracking_reference: Unique identifier for savings.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Amount\": amount,\n\"Narration\": narration,\n\"TransactionType\": transaction_type,\n\"TrackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.PLAIN_SAVE_DEBIT_CREDIT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.get_fixed_savings_account","title":"<code>get_fixed_savings_account(tracking_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves a fixed savings account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account transaction reference number of the savings you want to retrieve.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def get_fixed_savings_account(\nself,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a fixed savings account.\n    Args:\n        tracking_reference: Account transaction reference number of the savings you want to retrieve.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"SavingsId\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.GET_FIXED_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.get_fixed_savings_account_transactions","title":"<code>get_fixed_savings_account_transactions(tracking_reference, page_number, page_size, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves all fixed savings account transaction</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account tracking reference number.</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def get_fixed_savings_account_transactions(\nself,\ntracking_reference: str,\npage_number: int,\npage_size: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves all fixed savings account transaction\n    Args:\n        tracking_reference: Account tracking reference number.\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"PageNumber\": page_number,\n\"PageSize\": page_size,\n\"SavingsId\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.RETRIEVE_FIXED_SAVE_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.get_fixed_savings_accounts","title":"<code>get_fixed_savings_accounts(tracking_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves all fixed savings you want to retrieve.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account transaction reference number of the savings you want to retrieve.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def get_fixed_savings_accounts(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves all fixed savings you want to retrieve.\n    Args:\n        tracking_reference: Account transaction reference number of the savings you want to retrieve.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"TrackingReference\": tracking_reference}\nreturn await self._api_call(\nservice_type=ServiceType.GET_ALL_CUSTOMER_FIXED_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.get_flexible_savings_account_transactions","title":"<code>get_flexible_savings_account_transactions(tracking_reference, page_size, page_number, request_reference=None)</code>  <code>async</code>","text":"<p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account tracking reference number.</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def get_flexible_savings_account_transactions(\nself,\ntracking_reference: str,\npage_size: int,\npage_number: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n    Args:\n        tracking_reference: Account tracking reference number.\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n\"TrackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.RETRIEVE_OPEN_FLEXIBLE_SAVE_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.get_open_flexible_savings_account","title":"<code>get_open_flexible_savings_account(tracking_reference, primary_account_number, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieve an open flexible savings account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account transaction reference number of the savings you want to retrieve.</p> required <code>primary_account_number</code> <code>str</code> <p>Account number of the specific customer.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def get_open_flexible_savings_account(\nself,\ntracking_reference: str,\nprimary_account_number: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieve an open flexible savings account.\n    Args:\n        tracking_reference: Account transaction reference number of the savings you want to retrieve.\n        primary_account_number: Account number of the specific customer.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"PrimaryAccountNumber\": primary_account_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.GET_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.get_open_flexible_savings_accounts","title":"<code>get_open_flexible_savings_accounts(tracking_reference, primary_account_number, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves all flexible savings account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account transaction reference number of the savings you want to retrieve.</p> required <code>primary_account_number</code> <code>str</code> <p>Account number of the specific customer.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def get_open_flexible_savings_accounts(\nself,\ntracking_reference: str,\nprimary_account_number: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves all flexible savings account.\n    Args:\n        tracking_reference: Account transaction reference number of the savings you want to retrieve.\n        primary_account_number: Account number of the specific customer.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"PrimaryAccountNumber\": primary_account_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.GET_ALL_CUSTOMER_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.get_plain_savings_account","title":"<code>get_plain_savings_account(tracking_reference, primary_account_number, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves a customers plain savings account</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account transaction reference number of the savings you want to retrieve. This parameter is for specific plain savings.</p> required <code>primary_account_number</code> <code>str</code> <p>Account number of the specific customer.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def get_plain_savings_account(\nself,\ntracking_reference: str,\nprimary_account_number: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a customers plain savings account\n    Args:\n        tracking_reference: Account transaction reference number of the savings you want to retrieve.\n            This parameter is for specific plain savings.\n        primary_account_number: Account number of the specific customer.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"PrimaryAccountNumber\": primary_account_number,\n}\nreturn await self._api_call(service_type=ServiceType.GET_PLAIN_SAVE, data=data)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.get_plain_savings_account_transactions","title":"<code>get_plain_savings_account_transactions(page_size, page_number, tracking_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves all plain savings account transaction data.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Unique identifier for account.</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def get_plain_savings_account_transactions(\nself,\npage_size: int,\npage_number: int,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves all plain savings account transaction data.\n    Args:\n        tracking_reference: Unique identifier for account.\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n\"TrackingReference\": tracking_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.RETRIEVE_PLAIN_SAVE_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.get_plain_savings_accounts","title":"<code>get_plain_savings_accounts(tracking_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves all customers plain savings accounts</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account transaction reference number of the savings you want to retrieve. This parameter is for specific plain savings.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def get_plain_savings_accounts(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves all customers plain savings accounts\n    Args:\n        tracking_reference: Account transaction reference number of the savings you want to retrieve.\n            This parameter is for specific plain savings.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"TrackingReference\": tracking_reference}\nreturn await self._api_call(\nservice_type=ServiceType.GET_ALL_CUSTOMER_PLAIN_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.pre_create_open_flexible_savings_account","title":"<code>pre_create_open_flexible_savings_account(savings_tracking_reference, name, virtual_account_tracking_reference, amount, duration, frequency, start_now, start_date, is_interest_earning, request_reference=None)</code>  <code>async</code>","text":"<p>Pre create an Open Flexible Savings account.</p> <p>Parameters:</p> Name Type Description Default <code>savings_tracking_reference</code> <code>str</code> <p>The unique identifier for savings.</p> required <code>name</code> <code>str</code> <p>Name of the savings plan.</p> required <code>virtual_account_tracking_reference</code> <code>str</code> <p>Unique identifier for the associated virtual account.</p> required <code>amount</code> <code>Union[int, float]</code> <p>Amount to be saved. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>duration</code> <code>str</code> <p>Length of savings.</p> required <code>frequency</code> <code>str</code> <p>How often the savings should happen.</p> required <code>start_now</code> <code>bool</code> <p>Flag to start the savings immediately.</p> required <code>start_date</code> <code>str</code> <p>Starting date of the savings. Required if <code>start_now</code> is <code>False</code>. Format (YYYY-MM-DD).</p> required <code>is_interest_earning</code> <code>bool</code> <p>Will the savings earn interest or not.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def pre_create_open_flexible_savings_account(\nself,\nsavings_tracking_reference: str,\nname: str,\nvirtual_account_tracking_reference: str,\namount: Union[int, float],\nduration: str,\nfrequency: str,\nstart_now: bool,\nstart_date: str,\nis_interest_earning: bool,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Pre create an Open Flexible Savings account.\n    Args:\n        savings_tracking_reference: The unique identifier for savings.\n        name: Name of the savings plan.\n        virtual_account_tracking_reference: Unique identifier for the associated virtual account.\n        amount: Amount to be saved. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        duration: Length of savings.\n        frequency: How often the savings should happen.\n        start_now: Flag to start the savings immediately.\n        start_date: Starting date of the savings. Required if `start_now` is `False`.\n            Format (YYYY-MM-DD).\n        is_interest_earning: Will the savings earn interest or not.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"SavingsTrackingReference\": savings_tracking_reference,\n\"Name\": name,\n\"VirtualAccountTrackingReference\": virtual_account_tracking_reference,\n\"Amount\": amount,\n\"Duration\": duration,\n\"Frequency\": frequency,\n\"StartNow\": start_now,\n\"StartData\": start_date,\n\"IsInterestEarning\": is_interest_earning,\n}\nreturn await self._api_call(\nservice_type=ServiceType.PRE_CREATE_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/savings/#pykuda2.wrappers.async_wrappers.savings.AsyncSavings.withdrawal_from_flexible_savings_account","title":"<code>withdrawal_from_flexible_savings_account(amount, tracking_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Union[int, float]</code> <p>Amount to be removed. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>tracking_reference</code> <code>str</code> <p>Unique identifier for savings.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/savings.py</code> <pre><code>async def withdrawal_from_flexible_savings_account(\nself,\namount: Union[int, float],\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n    Args:\n        amount: Amount to be removed. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        tracking_reference: Unique identifier for savings.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"Amount\": amount, \"TrackingReference\": tracking_reference}\nreturn await self._api_call(\nservice_type=ServiceType.COMPLETE_OPEN_FLEXIBLE_SAVE_WITHDRAWAL,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/","title":"Transaction","text":""},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction","title":"<code>AsyncTransaction</code>","text":"<p>         Bases: <code>BaseAsyncAPIWrapper</code></p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>class AsyncTransaction(BaseAsyncAPIWrapper):\nasync def get_banks(self, request_reference: Optional[str] = None) -&gt; APIResponse:\n\"\"\"Retrieves all the banks available from NIPS\n         In production, the list of banks and bank codes may change based on\n         the responses gotten from NIBSS (Nigerian Interbank Settlement System).\n         Args:\n             request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n         Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\nreturn await self._api_call(\nservice_type=ServiceType.BANK_LIST, request_reference=request_reference\n)\nasync def confirm_transfer_recipient(\nself,\nbeneficiary_account_number: str,\nbeneficiary_bank_code: str,\nsender_tracking_reference: Optional[str],\nis_request_from_virtual_account: bool,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n        Retrieves information of a beneficiary for validation before initiating a transfer.\n        Args:\n            beneficiary_account_number: Destination bank account number.\n            beneficiary_bank_code: Destination bank code.\n            sender_tracking_reference: Tracking reference of the virtual account trying to\n                do the actual transfer. Leave it empty if the intended transfer is going to\n                be from the main account.\n            is_request_from_virtual_account: If the intended transfer is to be made by the\n                virtual account.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"beneficiaryAccountNumber\": beneficiary_account_number,\n\"beneficiaryBankCode\": beneficiary_bank_code,\n\"SenderTrackingReference\": sender_tracking_reference,\n\"isRequestFromVirtualAccount\": is_request_from_virtual_account,\n}\nreturn await self._api_call(\nservice_type=ServiceType.NAME_ENQUIRY,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def fund_transfer(\nself,\nbeneficiary_account: str,\nbeneficiary_bank_code: str,\nbeneficiary_name: str,\namount: Union[int, float],\nnarration: str,\nname_enquiry_session_id: str,\nsender_name: str,\nclient_fee_charge: int = 0,\nclient_account_number: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n        Sends money from your main Kuda account to another bank accounts.\n        Please, do not use sensitive data while doing test transactions so\n        as not to save it in your sandbox environment.\n        Args:\n            beneficiary_account: Destination bank account number.\n            beneficiary_bank_code: Destination bank code.\n            beneficiary_name: Name of the recipient.\n            amount: Amount to be transferred. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            narration: User defined reason for the transaction.\n            name_enquiry_session_id: Session ID generated from the nameEnquiry request.\n            sender_name: Name of the person sending money.\n            client_fee_charge: It is an amount a client wishes to charge their customer\n                for a transfer being carried out.\n            client_account_number: Account number of the client where the charged fee is\n                sent to.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"ClientAccountNumber\": client_account_number,\n\"beneficiaryAccount\": beneficiary_account,\n\"beneficiaryBankCode\": beneficiary_bank_code,\n\"beneficiaryName\": beneficiary_name,\n\"amount\": amount,\n\"narration\": narration,\n\"nameEnquirySessionID\": name_enquiry_session_id,\n\"senderName\": sender_name,\n\"clientFeeCharge\": client_fee_charge,\n}\nreturn await self._api_call(\nservice_type=ServiceType.SINGLE_FUND_TRANSFER,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def virtual_account_fund_transfer(\nself,\ntracking_reference: str,\nbeneficiary_account: str,\namount: Union[int, float],\nbeneficiary_name: str,\nnarration: str,\nbeneficiary_bank_code: str,\nsender_name: str,\nname_enquiry_id: str,\nclient_fee_charge: Union[int, float] = 0,\nclient_account_number: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Transfer money from a virtual account to another and any other Nigerian bank account.\n        Args:\n            tracking_reference: Unique identifier of the sender.\n            beneficiary_account: Destination bank account number.\n            beneficiary_bank_code: Destination bank code.\n            beneficiary_name: Name of the recipient.\n            amount: Amount to be transferred. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            narration: User defined reason for the transaction.\n            name_enquiry_id: Session ID generated from the nameEnquiry request.\n            sender_name: Name of the person sending money.\n            client_fee_charge: It is an amount a client wishes to charge their customer\n                for a transfer being carried out. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            client_account_number: Account number of the client where the charged fee is\n                sent to.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"beneficiaryAccount\": beneficiary_account,\n\"amount\": amount,\n\"narration\": narration,\n\"beneficiaryBankCode\": beneficiary_bank_code,\n\"beneficiaryName\": beneficiary_name,\n\"senderName\": sender_name,\n\"nameEnquiryId\": name_enquiry_id,\n\"clientFeeCharge\": client_fee_charge,\n\"ClientAccountNumber\": client_account_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.VIRTUAL_ACCOUNT_FUND_TRANSFER,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def process_transfers(\nself,\nfund_transfer_instructions: list[TransferInstruction],\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows you to send a list of transfer instructions to Kuda, to make the payments on your behalf.\n        Args:\n            fund_transfer_instructions: A list of transfer instructions for transfers to be made.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"FundTransferInstructions\": [\nfund_transfer_instruction.to_dict()\nfor fund_transfer_instruction in fund_transfer_instructions\n]\n}\nreturn await self._api_call(\nservice_type=ServiceType.FUND_TRANSFER_INSTRUCTION,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_transfer_instructions(\nself,\naccount_number: str,\nreference: str,\namount: Union[int, float],\noriginal_request_ref: str,\nstatus: TransactionStatus,\npage_number: int,\npage_size: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves transfer instructions and returns the status of the transaction.\n        Args:\n            account_number: The beneficiary\u2019s account number.\n            reference: The reference on the transfer instruction.\n            amount: The transaction amount. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            original_request_ref: The request reference used in logging the instruction.\n            status: The status of the transaction.\n            page_size: This specifies the number of transfer instructions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"AccountNumber\": account_number,\n\"Reference\": reference,\n\"Amount\": amount,\n\"OriginalRequestRef\": original_request_ref,\n\"Status\": status,\n\"PageNumber\": page_number,\n\"PageSize\": page_size,\n}\nreturn await self._api_call(\nservice_type=ServiceType.SEARCH_FUND_TRANSFER_INSTRUCTION,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_transaction_logs(\nself,\nrequest_reference: str,\nresponse_reference: str,\ntransaction_date: str,\nhas_transaction_date_range_filter: bool,\nstart_date: str,\nend_date: str,\npage_size: int,\npage_number: int,\nfetch_successful_records: bool =False,\n) -&gt; APIResponse:\n\"\"\"Retrieves all transactions.\n        Args:\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n            response_reference: Transaction response reference.\n            fetch_successful_records: If set to `True`, only successful transactions\n                will be retrieved.\n            transaction_date: The transaction date. Format (YYYY-MM-DD)\n            has_transaction_date_range_filter: Is set to `True`, then the `start_date` and\n                `end_date` parameter will be used instead of `transaction_date`\n            start_date: Transaction start date. Format (YYYY-MM-DD)\n            end_date: Transaction end date. Format (YYYY-MM-DD)\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"RequestReference\": request_reference,\n\"ResponseReference\": response_reference,\n\"FetchSuccessfulRecords\": fetch_successful_records,\n\"TransactionDate\": transaction_date,\n\"HasTransactionDateRangeFilter\": has_transaction_date_range_filter,\n\"StartDate\": start_date,\n\"EndDate\": end_date,\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.RETRIEVE_TRANSACTION_LOGS,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_transaction_history(\nself, page_size: int, page_number: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves a list of all main account transactions.\n        Args:\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"pageSize\": page_size, \"pageNumber\": page_number}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_MAIN_ACCOUNT_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_filtered_transaction_history(\nself,\npage_size: int,\npage_number: int,\nstart_date: str,\nend_date: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a filtered transaction history.\n        Args:\n            start_date: Transaction start date. Format (YYYY-MM-DD)\n            end_date: Transaction end date. Format (YYYY-MM-DD)\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n\"startDate\": start_date,\n\"endDate\": end_date,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_MAIN_ACCOUNT_FILTERED_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_virtual_account_transaction_history(\nself,\ntracking_reference: str,\npage_size: int,\npage_number: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a list of all virtual account transactions.\n        Args:\n            tracking_reference: The virtual account unique identifier.\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_VIRTUAL_ACCOUNT_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_virtual_account_filtered_transaction_history(\nself,\ntracking_reference: str,\npage_size: int,\npage_number: int,\nstart_date: str,\nend_date: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a filtered list of all virtual account transactions.\n        Args:\n            tracking_reference: The virtual account unique identifier.\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            start_date: Transaction start date. Format (YYYY-MM-DD)\n            end_date: Transaction end date. Format (YYYY-MM-DD)\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n\"startDate\": start_date,\n\"endDate\": end_date,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_VIRTUAL_ACCOUNT_FILTERED_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def get_status(\nself,\nis_third_party_bank_transfer: bool,\ntransaction_request_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves the status of a transaction.\n        Args:\n            is_third_party_bank_transfer: Flag to determine if the transaction was interbank or\n                intra-bank.\n            transaction_request_reference: The request reference used when make transaction.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"isThirdPartyBankTransfer\": is_third_party_bank_transfer,\n\"transactionRequestReference\": transaction_request_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.TRANSACTION_STATUS_QUERY,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def fund_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\nnarration: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Add funds to a virtual account.\n        Args:\n            tracking_reference: The virtual account tracking reference.\n            amount: The amount you want to fund your account. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            narration: The additional description for the transaction.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"narration\": narration,\n}\nreturn await self._api_call(\nservice_type=ServiceType.FUND_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\nasync def withdraw_from_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\nnarration: str,\nclient_fee_charge: int = 0,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Transfer funds from a virtual account to an associated Kuda account or to any other Nigerian Bank account.\n        Args:\n            tracking_reference: The virtual account tracking reference.\n            amount: The amount you want to fund your account. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            narration: The additional description for the transaction.\n            client_fee_charge: It is an amount a client wishes to charge their customer for a transfer\n                being carried out.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"narration\": narration,\n\"ClientFeeCharge\": client_fee_charge,\n}\nreturn await self._api_call(\nservice_type=ServiceType.WITHDRAW_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction.confirm_transfer_recipient","title":"<code>confirm_transfer_recipient(beneficiary_account_number, beneficiary_bank_code, sender_tracking_reference, is_request_from_virtual_account, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves information of a beneficiary for validation before initiating a transfer.</p> <p>Parameters:</p> Name Type Description Default <code>beneficiary_account_number</code> <code>str</code> <p>Destination bank account number.</p> required <code>beneficiary_bank_code</code> <code>str</code> <p>Destination bank code.</p> required <code>sender_tracking_reference</code> <code>Optional[str]</code> <p>Tracking reference of the virtual account trying to do the actual transfer. Leave it empty if the intended transfer is going to be from the main account.</p> required <code>is_request_from_virtual_account</code> <code>bool</code> <p>If the intended transfer is to be made by the virtual account.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>async def confirm_transfer_recipient(\nself,\nbeneficiary_account_number: str,\nbeneficiary_bank_code: str,\nsender_tracking_reference: Optional[str],\nis_request_from_virtual_account: bool,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n    Retrieves information of a beneficiary for validation before initiating a transfer.\n    Args:\n        beneficiary_account_number: Destination bank account number.\n        beneficiary_bank_code: Destination bank code.\n        sender_tracking_reference: Tracking reference of the virtual account trying to\n            do the actual transfer. Leave it empty if the intended transfer is going to\n            be from the main account.\n        is_request_from_virtual_account: If the intended transfer is to be made by the\n            virtual account.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"beneficiaryAccountNumber\": beneficiary_account_number,\n\"beneficiaryBankCode\": beneficiary_bank_code,\n\"SenderTrackingReference\": sender_tracking_reference,\n\"isRequestFromVirtualAccount\": is_request_from_virtual_account,\n}\nreturn await self._api_call(\nservice_type=ServiceType.NAME_ENQUIRY,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction.fund_transfer","title":"<code>fund_transfer(beneficiary_account, beneficiary_bank_code, beneficiary_name, amount, narration, name_enquiry_session_id, sender_name, client_fee_charge=0, client_account_number=None, request_reference=None)</code>  <code>async</code>","text":"<p>Sends money from your main Kuda account to another bank accounts.</p> <p>Please, do not use sensitive data while doing test transactions so as not to save it in your sandbox environment.</p> <p>Parameters:</p> Name Type Description Default <code>beneficiary_account</code> <code>str</code> <p>Destination bank account number.</p> required <code>beneficiary_bank_code</code> <code>str</code> <p>Destination bank code.</p> required <code>beneficiary_name</code> <code>str</code> <p>Name of the recipient.</p> required <code>amount</code> <code>Union[int, float]</code> <p>Amount to be transferred. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>narration</code> <code>str</code> <p>User defined reason for the transaction.</p> required <code>name_enquiry_session_id</code> <code>str</code> <p>Session ID generated from the nameEnquiry request.</p> required <code>sender_name</code> <code>str</code> <p>Name of the person sending money.</p> required <code>client_fee_charge</code> <code>int</code> <p>It is an amount a client wishes to charge their customer for a transfer being carried out.</p> <code>0</code> <code>client_account_number</code> <code>Optional[str]</code> <p>Account number of the client where the charged fee is sent to.</p> <code>None</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>async def fund_transfer(\nself,\nbeneficiary_account: str,\nbeneficiary_bank_code: str,\nbeneficiary_name: str,\namount: Union[int, float],\nnarration: str,\nname_enquiry_session_id: str,\nsender_name: str,\nclient_fee_charge: int = 0,\nclient_account_number: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n    Sends money from your main Kuda account to another bank accounts.\n    Please, do not use sensitive data while doing test transactions so\n    as not to save it in your sandbox environment.\n    Args:\n        beneficiary_account: Destination bank account number.\n        beneficiary_bank_code: Destination bank code.\n        beneficiary_name: Name of the recipient.\n        amount: Amount to be transferred. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        narration: User defined reason for the transaction.\n        name_enquiry_session_id: Session ID generated from the nameEnquiry request.\n        sender_name: Name of the person sending money.\n        client_fee_charge: It is an amount a client wishes to charge their customer\n            for a transfer being carried out.\n        client_account_number: Account number of the client where the charged fee is\n            sent to.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"ClientAccountNumber\": client_account_number,\n\"beneficiaryAccount\": beneficiary_account,\n\"beneficiaryBankCode\": beneficiary_bank_code,\n\"beneficiaryName\": beneficiary_name,\n\"amount\": amount,\n\"narration\": narration,\n\"nameEnquirySessionID\": name_enquiry_session_id,\n\"senderName\": sender_name,\n\"clientFeeCharge\": client_fee_charge,\n}\nreturn await self._api_call(\nservice_type=ServiceType.SINGLE_FUND_TRANSFER,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction.fund_virtual_account","title":"<code>fund_virtual_account(tracking_reference, amount, narration, request_reference=None)</code>  <code>async</code>","text":"<p>Add funds to a virtual account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The virtual account tracking reference.</p> required <code>amount</code> <code>Union[int, float]</code> <p>The amount you want to fund your account. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>narration</code> <code>str</code> <p>The additional description for the transaction.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>async def fund_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\nnarration: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Add funds to a virtual account.\n    Args:\n        tracking_reference: The virtual account tracking reference.\n        amount: The amount you want to fund your account. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        narration: The additional description for the transaction.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"narration\": narration,\n}\nreturn await self._api_call(\nservice_type=ServiceType.FUND_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction.get_banks","title":"<code>get_banks(request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves all the banks available from NIPS</p> <p>In production, the list of banks and bank codes may change based on  the responses gotten from NIBSS (Nigerian Interbank Settlement System).</p> <p>Args:      request_reference: a unique identifier for this api call.         it is automatically generated if not provided.</p> <p>Returns:     An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result         of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>async def get_banks(self, request_reference: Optional[str] = None) -&gt; APIResponse:\n\"\"\"Retrieves all the banks available from NIPS\n     In production, the list of banks and bank codes may change based on\n     the responses gotten from NIBSS (Nigerian Interbank Settlement System).\n     Args:\n         request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n     Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\nreturn await self._api_call(\nservice_type=ServiceType.BANK_LIST, request_reference=request_reference\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction.get_filtered_transaction_history","title":"<code>get_filtered_transaction_history(page_size, page_number, start_date, end_date, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves a filtered transaction history.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>Transaction start date. Format (YYYY-MM-DD)</p> required <code>end_date</code> <code>str</code> <p>Transaction end date. Format (YYYY-MM-DD)</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>async def get_filtered_transaction_history(\nself,\npage_size: int,\npage_number: int,\nstart_date: str,\nend_date: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a filtered transaction history.\n    Args:\n        start_date: Transaction start date. Format (YYYY-MM-DD)\n        end_date: Transaction end date. Format (YYYY-MM-DD)\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n\"startDate\": start_date,\n\"endDate\": end_date,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_MAIN_ACCOUNT_FILTERED_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction.get_status","title":"<code>get_status(is_third_party_bank_transfer, transaction_request_reference, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves the status of a transaction.</p> <p>Parameters:</p> Name Type Description Default <code>is_third_party_bank_transfer</code> <code>bool</code> <p>Flag to determine if the transaction was interbank or intra-bank.</p> required <code>transaction_request_reference</code> <code>str</code> <p>The request reference used when make transaction.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>async def get_status(\nself,\nis_third_party_bank_transfer: bool,\ntransaction_request_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves the status of a transaction.\n    Args:\n        is_third_party_bank_transfer: Flag to determine if the transaction was interbank or\n            intra-bank.\n        transaction_request_reference: The request reference used when make transaction.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"isThirdPartyBankTransfer\": is_third_party_bank_transfer,\n\"transactionRequestReference\": transaction_request_reference,\n}\nreturn await self._api_call(\nservice_type=ServiceType.TRANSACTION_STATUS_QUERY,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction.get_transaction_history","title":"<code>get_transaction_history(page_size, page_number, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves a list of all main account transactions.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>async def get_transaction_history(\nself, page_size: int, page_number: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves a list of all main account transactions.\n    Args:\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"pageSize\": page_size, \"pageNumber\": page_number}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_MAIN_ACCOUNT_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction.get_transaction_logs","title":"<code>get_transaction_logs(request_reference, response_reference, transaction_date, has_transaction_date_range_filter, start_date, end_date, page_size, page_number, fetch_successful_records=False)</code>  <code>async</code>","text":"<p>Retrieves all transactions.</p> <p>Parameters:</p> Name Type Description Default <code>request_reference</code> <code>str</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> required <code>response_reference</code> <code>str</code> <p>Transaction response reference.</p> required <code>fetch_successful_records</code> <code>bool</code> <p>If set to <code>True</code>, only successful transactions will be retrieved.</p> <code>False</code> <code>transaction_date</code> <code>str</code> <p>The transaction date. Format (YYYY-MM-DD)</p> required <code>has_transaction_date_range_filter</code> <code>bool</code> <p>Is set to <code>True</code>, then the <code>start_date</code> and <code>end_date</code> parameter will be used instead of <code>transaction_date</code></p> required <code>start_date</code> <code>str</code> <p>Transaction start date. Format (YYYY-MM-DD)</p> required <code>end_date</code> <code>str</code> <p>Transaction end date. Format (YYYY-MM-DD)</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>async def get_transaction_logs(\nself,\nrequest_reference: str,\nresponse_reference: str,\ntransaction_date: str,\nhas_transaction_date_range_filter: bool,\nstart_date: str,\nend_date: str,\npage_size: int,\npage_number: int,\nfetch_successful_records: bool =False,\n) -&gt; APIResponse:\n\"\"\"Retrieves all transactions.\n    Args:\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n        response_reference: Transaction response reference.\n        fetch_successful_records: If set to `True`, only successful transactions\n            will be retrieved.\n        transaction_date: The transaction date. Format (YYYY-MM-DD)\n        has_transaction_date_range_filter: Is set to `True`, then the `start_date` and\n            `end_date` parameter will be used instead of `transaction_date`\n        start_date: Transaction start date. Format (YYYY-MM-DD)\n        end_date: Transaction end date. Format (YYYY-MM-DD)\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"RequestReference\": request_reference,\n\"ResponseReference\": response_reference,\n\"FetchSuccessfulRecords\": fetch_successful_records,\n\"TransactionDate\": transaction_date,\n\"HasTransactionDateRangeFilter\": has_transaction_date_range_filter,\n\"StartDate\": start_date,\n\"EndDate\": end_date,\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.RETRIEVE_TRANSACTION_LOGS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction.get_transfer_instructions","title":"<code>get_transfer_instructions(account_number, reference, amount, original_request_ref, status, page_number, page_size, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves transfer instructions and returns the status of the transaction.</p> <p>Parameters:</p> Name Type Description Default <code>account_number</code> <code>str</code> <p>The beneficiary\u2019s account number.</p> required <code>reference</code> <code>str</code> <p>The reference on the transfer instruction.</p> required <code>amount</code> <code>Union[int, float]</code> <p>The transaction amount. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>original_request_ref</code> <code>str</code> <p>The request reference used in logging the instruction.</p> required <code>status</code> <code>TransactionStatus</code> <p>The status of the transaction.</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transfer instructions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>async def get_transfer_instructions(\nself,\naccount_number: str,\nreference: str,\namount: Union[int, float],\noriginal_request_ref: str,\nstatus: TransactionStatus,\npage_number: int,\npage_size: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves transfer instructions and returns the status of the transaction.\n    Args:\n        account_number: The beneficiary\u2019s account number.\n        reference: The reference on the transfer instruction.\n        amount: The transaction amount. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        original_request_ref: The request reference used in logging the instruction.\n        status: The status of the transaction.\n        page_size: This specifies the number of transfer instructions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"AccountNumber\": account_number,\n\"Reference\": reference,\n\"Amount\": amount,\n\"OriginalRequestRef\": original_request_ref,\n\"Status\": status,\n\"PageNumber\": page_number,\n\"PageSize\": page_size,\n}\nreturn await self._api_call(\nservice_type=ServiceType.SEARCH_FUND_TRANSFER_INSTRUCTION,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction.get_virtual_account_filtered_transaction_history","title":"<code>get_virtual_account_filtered_transaction_history(tracking_reference, page_size, page_number, start_date, end_date, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves a filtered list of all virtual account transactions.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The virtual account unique identifier.</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>start_date</code> <code>str</code> <p>Transaction start date. Format (YYYY-MM-DD)</p> required <code>end_date</code> <code>str</code> <p>Transaction end date. Format (YYYY-MM-DD)</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>async def get_virtual_account_filtered_transaction_history(\nself,\ntracking_reference: str,\npage_size: int,\npage_number: int,\nstart_date: str,\nend_date: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a filtered list of all virtual account transactions.\n    Args:\n        tracking_reference: The virtual account unique identifier.\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        start_date: Transaction start date. Format (YYYY-MM-DD)\n        end_date: Transaction end date. Format (YYYY-MM-DD)\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n\"startDate\": start_date,\n\"endDate\": end_date,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_VIRTUAL_ACCOUNT_FILTERED_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction.get_virtual_account_transaction_history","title":"<code>get_virtual_account_transaction_history(tracking_reference, page_size, page_number, request_reference=None)</code>  <code>async</code>","text":"<p>Retrieves a list of all virtual account transactions.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The virtual account unique identifier.</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>async def get_virtual_account_transaction_history(\nself,\ntracking_reference: str,\npage_size: int,\npage_number: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a list of all virtual account transactions.\n    Args:\n        tracking_reference: The virtual account unique identifier.\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.ADMIN_VIRTUAL_ACCOUNT_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction.process_transfers","title":"<code>process_transfers(fund_transfer_instructions, request_reference=None)</code>  <code>async</code>","text":"<p>Allows you to send a list of transfer instructions to Kuda, to make the payments on your behalf.</p> <p>Parameters:</p> Name Type Description Default <code>fund_transfer_instructions</code> <code>list[TransferInstruction]</code> <p>A list of transfer instructions for transfers to be made.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>async def process_transfers(\nself,\nfund_transfer_instructions: list[TransferInstruction],\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows you to send a list of transfer instructions to Kuda, to make the payments on your behalf.\n    Args:\n        fund_transfer_instructions: A list of transfer instructions for transfers to be made.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"FundTransferInstructions\": [\nfund_transfer_instruction.to_dict()\nfor fund_transfer_instruction in fund_transfer_instructions\n]\n}\nreturn await self._api_call(\nservice_type=ServiceType.FUND_TRANSFER_INSTRUCTION,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction.virtual_account_fund_transfer","title":"<code>virtual_account_fund_transfer(tracking_reference, beneficiary_account, amount, beneficiary_name, narration, beneficiary_bank_code, sender_name, name_enquiry_id, client_fee_charge=0, client_account_number=None, request_reference=None)</code>  <code>async</code>","text":"<p>Transfer money from a virtual account to another and any other Nigerian bank account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Unique identifier of the sender.</p> required <code>beneficiary_account</code> <code>str</code> <p>Destination bank account number.</p> required <code>beneficiary_bank_code</code> <code>str</code> <p>Destination bank code.</p> required <code>beneficiary_name</code> <code>str</code> <p>Name of the recipient.</p> required <code>amount</code> <code>Union[int, float]</code> <p>Amount to be transferred. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>narration</code> <code>str</code> <p>User defined reason for the transaction.</p> required <code>name_enquiry_id</code> <code>str</code> <p>Session ID generated from the nameEnquiry request.</p> required <code>sender_name</code> <code>str</code> <p>Name of the person sending money.</p> required <code>client_fee_charge</code> <code>Union[int, float]</code> <p>It is an amount a client wishes to charge their customer for a transfer being carried out. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> <code>0</code> <code>client_account_number</code> <code>Optional[str]</code> <p>Account number of the client where the charged fee is sent to.</p> <code>None</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>async def virtual_account_fund_transfer(\nself,\ntracking_reference: str,\nbeneficiary_account: str,\namount: Union[int, float],\nbeneficiary_name: str,\nnarration: str,\nbeneficiary_bank_code: str,\nsender_name: str,\nname_enquiry_id: str,\nclient_fee_charge: Union[int, float] = 0,\nclient_account_number: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Transfer money from a virtual account to another and any other Nigerian bank account.\n    Args:\n        tracking_reference: Unique identifier of the sender.\n        beneficiary_account: Destination bank account number.\n        beneficiary_bank_code: Destination bank code.\n        beneficiary_name: Name of the recipient.\n        amount: Amount to be transferred. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        narration: User defined reason for the transaction.\n        name_enquiry_id: Session ID generated from the nameEnquiry request.\n        sender_name: Name of the person sending money.\n        client_fee_charge: It is an amount a client wishes to charge their customer\n            for a transfer being carried out. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        client_account_number: Account number of the client where the charged fee is\n            sent to.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"beneficiaryAccount\": beneficiary_account,\n\"amount\": amount,\n\"narration\": narration,\n\"beneficiaryBankCode\": beneficiary_bank_code,\n\"beneficiaryName\": beneficiary_name,\n\"senderName\": sender_name,\n\"nameEnquiryId\": name_enquiry_id,\n\"clientFeeCharge\": client_fee_charge,\n\"ClientAccountNumber\": client_account_number,\n}\nreturn await self._api_call(\nservice_type=ServiceType.VIRTUAL_ACCOUNT_FUND_TRANSFER,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/async_wrappers/transaction/#pykuda2.wrappers.async_wrappers.transaction.AsyncTransaction.withdraw_from_virtual_account","title":"<code>withdraw_from_virtual_account(tracking_reference, amount, narration, client_fee_charge=0, request_reference=None)</code>  <code>async</code>","text":"<p>Transfer funds from a virtual account to an associated Kuda account or to any other Nigerian Bank account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The virtual account tracking reference.</p> required <code>amount</code> <code>Union[int, float]</code> <p>The amount you want to fund your account. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>narration</code> <code>str</code> <p>The additional description for the transaction.</p> required <code>client_fee_charge</code> <code>int</code> <p>It is an amount a client wishes to charge their customer for a transfer being carried out.</p> <code>0</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/async_wrappers/transaction.py</code> <pre><code>async def withdraw_from_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\nnarration: str,\nclient_fee_charge: int = 0,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Transfer funds from a virtual account to an associated Kuda account or to any other Nigerian Bank account.\n    Args:\n        tracking_reference: The virtual account tracking reference.\n        amount: The amount you want to fund your account. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        narration: The additional description for the transaction.\n        client_fee_charge: It is an amount a client wishes to charge their customer for a transfer\n            being carried out.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"narration\": narration,\n\"ClientFeeCharge\": client_fee_charge,\n}\nreturn await self._api_call(\nservice_type=ServiceType.WITHDRAW_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/accounts/","title":"Accounts","text":""},{"location":"reference/wrappers/sync_wrappers/accounts/#pykuda2.wrappers.sync_wrappers.accounts.Account","title":"<code>Account</code>","text":"<p>         Bases: <code>BaseAPIWrapper</code></p> Source code in <code>pykuda2/wrappers/sync_wrappers/accounts.py</code> <pre><code>class Account(BaseAPIWrapper):\ndef create_virtual_account(\nself,\nemail: str,\nphone_number: str,\nlast_name: str,\nfirst_name: str,\nmiddle_name: str,\nbusiness_name: str,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Creates a new virtual account for customers.\n        Args:\n            email: customer's email address.\n            phone_number: customer's phone number.\n            last_name: customer's last name.\n            first_name: customer's first name.\n            middle_name: customer's middle name.\n            business_name: customer's business name.\n            tracking_reference: a unique identifier for the account to be created.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"email\": email,\n\"phoneNumber\": phone_number,\n\"lastName\": last_name,\n\"firstName\": first_name,\n\"middleName\": middle_name,\n\"businessName\": business_name,\n\"trackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_CREATE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\ndef update_virtual_account(\nself,\ntracking_reference: str,\nfirst_name: Optional[str] = None,\nlast_name: Optional[str] = None,\nemail: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Modifies a virtual account data.\n        Good to know: For context, you cannot alter the phone number of the customer.\n        You may only alter either the first name/last name or email address tied to\n        the account information.\n        Do not update the name and the email address together on a single request.\n        Args:\n            tracking_reference: The customer's unique identifier.\n            first_name: The new first name the customer's first name should be updated to if provided.\n            last_name: The new last name the customer's last name should be updated to if provided.\n            email: The new email address the customer's email address should be updated to if provided.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n            ValueError: If none of the optional parameters is provided.\n        \"\"\"\nif not any([first_name, last_name, email]):\nraise ValueError(\n\"At least one of the parameters `first_name`, `last_name` or `email` must be provided\"\n)\ndata = {\n\"trackingReference\": tracking_reference,\n\"firstName\": first_name,\n\"lastName\": last_name,\n\"email\": email,\n}\nif not first_name:\ndata.pop(\"firstName\")\nif not last_name:\ndata.pop(\"lastName\")\nif not email:\ndata.pop(\"email\")\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_UPDATE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_virtual_accounts(\nself, page_size: int, page_number: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves your existing virtual accounts.\n        Args:\n            page_size: This specifies the number of virtual accounts to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_VIRTUAL_ACCOUNTS,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves an existing virtual account.\n        Args:\n            tracking_reference: the unique identifier tied to the account to be retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_RETRIEVE_SINGLE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\ndef disable_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Disables a user\u2019s virtual static account.\n        Kuda encourages Admins and account managers to review accounts and transactions\n        frequently. This will avoid situations where a user has an over bloated customer\n        database without real customers or helping to reduce the menace of fraudulent transactions.\n        Args:\n            tracking_reference: the unique identifier tied to the account to be disabled.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_DISABLE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\ndef enable_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Enables a user\u2019s virtual static account.\n        Args:\n            tracking_reference: the unique identifier tied to the account to be enabled.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_ENABLE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_admin_account_balance(\nself, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves the account balance on your main account.\n        Args:\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_RETRIEVE_MAIN_ACCOUNT_BALANCE,\nrequest_reference=request_reference,\n)\ndef get_virtual_account_balance(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves the account balance on your virtual account.\n        Args:\n            tracking_reference: a unique identifier for the virtual account.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.RETRIEVE_VIRTUAL_ACCOUNT_BALANCE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/accounts/#pykuda2.wrappers.sync_wrappers.accounts.Account.create_virtual_account","title":"<code>create_virtual_account(email, phone_number, last_name, first_name, middle_name, business_name, tracking_reference, request_reference=None)</code>","text":"<p>Creates a new virtual account for customers.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>customer's email address.</p> required <code>phone_number</code> <code>str</code> <p>customer's phone number.</p> required <code>last_name</code> <code>str</code> <p>customer's last name.</p> required <code>first_name</code> <code>str</code> <p>customer's first name.</p> required <code>middle_name</code> <code>str</code> <p>customer's middle name.</p> required <code>business_name</code> <code>str</code> <p>customer's business name.</p> required <code>tracking_reference</code> <code>str</code> <p>a unique identifier for the account to be created.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/accounts.py</code> <pre><code>def create_virtual_account(\nself,\nemail: str,\nphone_number: str,\nlast_name: str,\nfirst_name: str,\nmiddle_name: str,\nbusiness_name: str,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Creates a new virtual account for customers.\n    Args:\n        email: customer's email address.\n        phone_number: customer's phone number.\n        last_name: customer's last name.\n        first_name: customer's first name.\n        middle_name: customer's middle name.\n        business_name: customer's business name.\n        tracking_reference: a unique identifier for the account to be created.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"email\": email,\n\"phoneNumber\": phone_number,\n\"lastName\": last_name,\n\"firstName\": first_name,\n\"middleName\": middle_name,\n\"businessName\": business_name,\n\"trackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_CREATE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/accounts/#pykuda2.wrappers.sync_wrappers.accounts.Account.disable_virtual_account","title":"<code>disable_virtual_account(tracking_reference, request_reference=None)</code>","text":"<p>Disables a user\u2019s virtual static account.</p> <p>Kuda encourages Admins and account managers to review accounts and transactions frequently. This will avoid situations where a user has an over bloated customer database without real customers or helping to reduce the menace of fraudulent transactions.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>the unique identifier tied to the account to be disabled.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/accounts.py</code> <pre><code>def disable_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Disables a user\u2019s virtual static account.\n    Kuda encourages Admins and account managers to review accounts and transactions\n    frequently. This will avoid situations where a user has an over bloated customer\n    database without real customers or helping to reduce the menace of fraudulent transactions.\n    Args:\n        tracking_reference: the unique identifier tied to the account to be disabled.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_DISABLE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/accounts/#pykuda2.wrappers.sync_wrappers.accounts.Account.enable_virtual_account","title":"<code>enable_virtual_account(tracking_reference, request_reference=None)</code>","text":"<p>Enables a user\u2019s virtual static account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>the unique identifier tied to the account to be enabled.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/accounts.py</code> <pre><code>def enable_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Enables a user\u2019s virtual static account.\n    Args:\n        tracking_reference: the unique identifier tied to the account to be enabled.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_ENABLE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/accounts/#pykuda2.wrappers.sync_wrappers.accounts.Account.get_admin_account_balance","title":"<code>get_admin_account_balance(request_reference=None)</code>","text":"<p>Retrieves the account balance on your main account.</p> <p>Parameters:</p> Name Type Description Default <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/accounts.py</code> <pre><code>def get_admin_account_balance(\nself, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves the account balance on your main account.\n    Args:\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_RETRIEVE_MAIN_ACCOUNT_BALANCE,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/accounts/#pykuda2.wrappers.sync_wrappers.accounts.Account.get_virtual_account","title":"<code>get_virtual_account(tracking_reference, request_reference=None)</code>","text":"<p>Retrieves an existing virtual account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>the unique identifier tied to the account to be retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/accounts.py</code> <pre><code>def get_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves an existing virtual account.\n    Args:\n        tracking_reference: the unique identifier tied to the account to be retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_RETRIEVE_SINGLE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/accounts/#pykuda2.wrappers.sync_wrappers.accounts.Account.get_virtual_account_balance","title":"<code>get_virtual_account_balance(tracking_reference, request_reference=None)</code>","text":"<p>Retrieves the account balance on your virtual account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>a unique identifier for the virtual account.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/accounts.py</code> <pre><code>def get_virtual_account_balance(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves the account balance on your virtual account.\n    Args:\n        tracking_reference: a unique identifier for the virtual account.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.RETRIEVE_VIRTUAL_ACCOUNT_BALANCE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/accounts/#pykuda2.wrappers.sync_wrappers.accounts.Account.get_virtual_accounts","title":"<code>get_virtual_accounts(page_size, page_number, request_reference=None)</code>","text":"<p>Retrieves your existing virtual accounts.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>This specifies the number of virtual accounts to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/accounts.py</code> <pre><code>def get_virtual_accounts(\nself, page_size: int, page_number: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves your existing virtual accounts.\n    Args:\n        page_size: This specifies the number of virtual accounts to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_VIRTUAL_ACCOUNTS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/accounts/#pykuda2.wrappers.sync_wrappers.accounts.Account.update_virtual_account","title":"<code>update_virtual_account(tracking_reference, first_name=None, last_name=None, email=None, request_reference=None)</code>","text":"<p>Modifies a virtual account data.</p> <p>Good to know: For context, you cannot alter the phone number of the customer. You may only alter either the first name/last name or email address tied to the account information. Do not update the name and the email address together on a single request.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The customer's unique identifier.</p> required <code>first_name</code> <code>Optional[str]</code> <p>The new first name the customer's first name should be updated to if provided.</p> <code>None</code> <code>last_name</code> <code>Optional[str]</code> <p>The new last name the customer's last name should be updated to if provided.</p> <code>None</code> <code>email</code> <code>Optional[str]</code> <p>The new email address the customer's email address should be updated to if provided.</p> <code>None</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> <code>ValueError</code> <p>If none of the optional parameters is provided.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/accounts.py</code> <pre><code>def update_virtual_account(\nself,\ntracking_reference: str,\nfirst_name: Optional[str] = None,\nlast_name: Optional[str] = None,\nemail: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Modifies a virtual account data.\n    Good to know: For context, you cannot alter the phone number of the customer.\n    You may only alter either the first name/last name or email address tied to\n    the account information.\n    Do not update the name and the email address together on a single request.\n    Args:\n        tracking_reference: The customer's unique identifier.\n        first_name: The new first name the customer's first name should be updated to if provided.\n        last_name: The new last name the customer's last name should be updated to if provided.\n        email: The new email address the customer's email address should be updated to if provided.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n        ValueError: If none of the optional parameters is provided.\n    \"\"\"\nif not any([first_name, last_name, email]):\nraise ValueError(\n\"At least one of the parameters `first_name`, `last_name` or `email` must be provided\"\n)\ndata = {\n\"trackingReference\": tracking_reference,\n\"firstName\": first_name,\n\"lastName\": last_name,\n\"email\": email,\n}\nif not first_name:\ndata.pop(\"firstName\")\nif not last_name:\ndata.pop(\"lastName\")\nif not email:\ndata.pop(\"email\")\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_UPDATE_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/billing_and_betting/","title":"Billing and betting","text":""},{"location":"reference/wrappers/sync_wrappers/billing_and_betting/#pykuda2.wrappers.sync_wrappers.billing_and_betting.BillingAndBetting","title":"<code>BillingAndBetting</code>","text":"<p>         Bases: <code>BaseAPIWrapper</code></p> Source code in <code>pykuda2/wrappers/sync_wrappers/billing_and_betting.py</code> <pre><code>class BillingAndBetting(BaseAPIWrapper):\ndef get_bill_type_options(\nself, bill_type: BillType, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves all the options of a bill type that are available from Kuda.\n        Args:\n            bill_type: The bill type we want to get the options available for e.g.\n                BillType.INTERNET_DATA, BillType.CABLE_TV\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"BillTypeName\": bill_type}\nreturn self._api_call(\nservice_type=ServiceType.GET_BILLERS_BY_TYPE,\ndata=data,\nrequest_reference=request_reference,\n)\ndef verify_customer_before_purchase(\nself,\ntracking_reference: str,\nkuda_bill_item_identifier: str,\ncustomer_identification: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Verifies the identity of  the beneficiary.\n        Just like an account or bank transfer, You need to verify a customer's identity before\n        successfully initiating a bill purchase instance. This way you reduce the issue of theft\n        or erroneous bill payments which are hard to retrieve.\n        You don't need to verify the customer if the bill type is airtime\n        Args:\n            tracking_reference: Customer's wallet identifier.\n            kuda_bill_item_identifier: The Kuda bill unique identifier.\n            customer_identification: The customer's unique identifier.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"TrackingRef\": tracking_reference,\n\"KudaBillItemIdentifier\": kuda_bill_item_identifier,\n\"CustomerIdentification\": customer_identification,\n}\nreturn self._api_call(\nservice_type=ServiceType.VERIFY_BILL_CUSTOMER,\ndata=data,\nrequest_reference=request_reference,\n)\ndef purchase_bill(\nself,\namount: Union[int, float],\nbill_item_identifier: str,\ncustomer_identifier: str,\nphone_number: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Purchase a bill from your main account.\n        Args:\n            amount: Bill amount. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            bill_item_identifier: The Kuda bill unique identifier\n            customer_identifier: The customer's unique identifier\n            phone_number: The customer's phone number It is not required\n                if you're purchasing airtime.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Amount\": amount,\n\"BillItemIdentifier\": bill_item_identifier,\n\"PhoneNumber\": phone_number,\n\"CustomerIdentifier\": customer_identifier,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_PURCHASE_BILL,\ndata=data,\nrequest_reference=request_reference,\n)\ndef purchase_bill_from_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\nbill_item_identifier: str,\nphone_number: str,\ncustomer_identifier: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Purchase a bill from your virtual account.\n        Args:\n            tracking_reference: The customer virtual account Identifier.\n            amount: Bill amount. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            bill_item_identifier: The Kuda bill unique identifier\n            customer_identifier: The customer's unique identifier\n            phone_number: The customer's phone number It is not required\n                if you're purchasing airtime.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Amount\": amount,\n\"BillItemIdentifier\": bill_item_identifier,\n\"PhoneNumber\": phone_number,\n\"CustomerIdentifier\": customer_identifier,\n\"TrackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.PURCHASE_BILL,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_bill_purchase_status(\nself,\nbill_request_ref: Optional[str],\nbill_response_reference: Optional[str],\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieve the status of a bill purchase.\n        Args:\n            bill_request_ref: The bill request reference.\n            bill_response_reference: The bill reference gotten from purchasing the bill.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\nif bill_response_reference and bill_request_ref:\nraise ValueError(\n\"Both `bill_response_reference` and `bill_request_ref` should\"\n\" not be provided. Please provide any but not both\"\n)\ndata = {\n\"BillResponseReference\": bill_response_reference,\n\"BillRequestRef\": bill_request_ref,\n}\nreturn self._api_call(\nservice_type=ServiceType.BILL_TSQ,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_purchased_bills(\nself, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieve bills purchased from the main account.\n        Args:\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_GET_PURCHASED_BILLS,\nrequest_reference=request_reference,\n)\ndef get_purchased_bill_from_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieve bills purchased from a virtual account.\n        Args:\n            tracking_reference: The unique identifier of the virtual account.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"TrackingReference\": tracking_reference}\nreturn self._api_call(\nservice_type=ServiceType.GET_PURCHASED_BILLS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/billing_and_betting/#pykuda2.wrappers.sync_wrappers.billing_and_betting.BillingAndBetting.get_bill_purchase_status","title":"<code>get_bill_purchase_status(bill_request_ref, bill_response_reference, request_reference=None)</code>","text":"<p>Retrieve the status of a bill purchase.</p> <p>Parameters:</p> Name Type Description Default <code>bill_request_ref</code> <code>Optional[str]</code> <p>The bill request reference.</p> required <code>bill_response_reference</code> <code>Optional[str]</code> <p>The bill reference gotten from purchasing the bill.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/billing_and_betting.py</code> <pre><code>def get_bill_purchase_status(\nself,\nbill_request_ref: Optional[str],\nbill_response_reference: Optional[str],\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieve the status of a bill purchase.\n    Args:\n        bill_request_ref: The bill request reference.\n        bill_response_reference: The bill reference gotten from purchasing the bill.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\nif bill_response_reference and bill_request_ref:\nraise ValueError(\n\"Both `bill_response_reference` and `bill_request_ref` should\"\n\" not be provided. Please provide any but not both\"\n)\ndata = {\n\"BillResponseReference\": bill_response_reference,\n\"BillRequestRef\": bill_request_ref,\n}\nreturn self._api_call(\nservice_type=ServiceType.BILL_TSQ,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/billing_and_betting/#pykuda2.wrappers.sync_wrappers.billing_and_betting.BillingAndBetting.get_bill_type_options","title":"<code>get_bill_type_options(bill_type, request_reference=None)</code>","text":"<p>Retrieves all the options of a bill type that are available from Kuda.</p> <p>Parameters:</p> Name Type Description Default <code>bill_type</code> <code>BillType</code> <p>The bill type we want to get the options available for e.g. BillType.INTERNET_DATA, BillType.CABLE_TV</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/billing_and_betting.py</code> <pre><code>def get_bill_type_options(\nself, bill_type: BillType, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves all the options of a bill type that are available from Kuda.\n    Args:\n        bill_type: The bill type we want to get the options available for e.g.\n            BillType.INTERNET_DATA, BillType.CABLE_TV\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"BillTypeName\": bill_type}\nreturn self._api_call(\nservice_type=ServiceType.GET_BILLERS_BY_TYPE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/billing_and_betting/#pykuda2.wrappers.sync_wrappers.billing_and_betting.BillingAndBetting.get_purchased_bill_from_virtual_account","title":"<code>get_purchased_bill_from_virtual_account(tracking_reference, request_reference=None)</code>","text":"<p>Retrieve bills purchased from a virtual account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The unique identifier of the virtual account.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/billing_and_betting.py</code> <pre><code>def get_purchased_bill_from_virtual_account(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieve bills purchased from a virtual account.\n    Args:\n        tracking_reference: The unique identifier of the virtual account.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"TrackingReference\": tracking_reference}\nreturn self._api_call(\nservice_type=ServiceType.GET_PURCHASED_BILLS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/billing_and_betting/#pykuda2.wrappers.sync_wrappers.billing_and_betting.BillingAndBetting.get_purchased_bills","title":"<code>get_purchased_bills(request_reference=None)</code>","text":"<p>Retrieve bills purchased from the main account.</p> <p>Parameters:</p> Name Type Description Default <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/billing_and_betting.py</code> <pre><code>def get_purchased_bills(\nself, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieve bills purchased from the main account.\n    Args:\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_GET_PURCHASED_BILLS,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/billing_and_betting/#pykuda2.wrappers.sync_wrappers.billing_and_betting.BillingAndBetting.purchase_bill","title":"<code>purchase_bill(amount, bill_item_identifier, customer_identifier, phone_number=None, request_reference=None)</code>","text":"<p>Purchase a bill from your main account.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Union[int, float]</code> <p>Bill amount. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>bill_item_identifier</code> <code>str</code> <p>The Kuda bill unique identifier</p> required <code>customer_identifier</code> <code>str</code> <p>The customer's unique identifier</p> required <code>phone_number</code> <code>Optional[str]</code> <p>The customer's phone number It is not required if you're purchasing airtime.</p> <code>None</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/billing_and_betting.py</code> <pre><code>def purchase_bill(\nself,\namount: Union[int, float],\nbill_item_identifier: str,\ncustomer_identifier: str,\nphone_number: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Purchase a bill from your main account.\n    Args:\n        amount: Bill amount. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        bill_item_identifier: The Kuda bill unique identifier\n        customer_identifier: The customer's unique identifier\n        phone_number: The customer's phone number It is not required\n            if you're purchasing airtime.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Amount\": amount,\n\"BillItemIdentifier\": bill_item_identifier,\n\"PhoneNumber\": phone_number,\n\"CustomerIdentifier\": customer_identifier,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_PURCHASE_BILL,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/billing_and_betting/#pykuda2.wrappers.sync_wrappers.billing_and_betting.BillingAndBetting.purchase_bill_from_virtual_account","title":"<code>purchase_bill_from_virtual_account(tracking_reference, amount, bill_item_identifier, phone_number, customer_identifier, request_reference=None)</code>","text":"<p>Purchase a bill from your virtual account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The customer virtual account Identifier.</p> required <code>amount</code> <code>Union[int, float]</code> <p>Bill amount. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>bill_item_identifier</code> <code>str</code> <p>The Kuda bill unique identifier</p> required <code>customer_identifier</code> <code>str</code> <p>The customer's unique identifier</p> required <code>phone_number</code> <code>str</code> <p>The customer's phone number It is not required if you're purchasing airtime.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/billing_and_betting.py</code> <pre><code>def purchase_bill_from_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\nbill_item_identifier: str,\nphone_number: str,\ncustomer_identifier: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Purchase a bill from your virtual account.\n    Args:\n        tracking_reference: The customer virtual account Identifier.\n        amount: Bill amount. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        bill_item_identifier: The Kuda bill unique identifier\n        customer_identifier: The customer's unique identifier\n        phone_number: The customer's phone number It is not required\n            if you're purchasing airtime.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Amount\": amount,\n\"BillItemIdentifier\": bill_item_identifier,\n\"PhoneNumber\": phone_number,\n\"CustomerIdentifier\": customer_identifier,\n\"TrackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.PURCHASE_BILL,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/billing_and_betting/#pykuda2.wrappers.sync_wrappers.billing_and_betting.BillingAndBetting.verify_customer_before_purchase","title":"<code>verify_customer_before_purchase(tracking_reference, kuda_bill_item_identifier, customer_identification, request_reference=None)</code>","text":"<p>Verifies the identity of  the beneficiary.</p> <p>Just like an account or bank transfer, You need to verify a customer's identity before successfully initiating a bill purchase instance. This way you reduce the issue of theft or erroneous bill payments which are hard to retrieve. You don't need to verify the customer if the bill type is airtime</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Customer's wallet identifier.</p> required <code>kuda_bill_item_identifier</code> <code>str</code> <p>The Kuda bill unique identifier.</p> required <code>customer_identification</code> <code>str</code> <p>The customer's unique identifier.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/billing_and_betting.py</code> <pre><code>def verify_customer_before_purchase(\nself,\ntracking_reference: str,\nkuda_bill_item_identifier: str,\ncustomer_identification: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Verifies the identity of  the beneficiary.\n    Just like an account or bank transfer, You need to verify a customer's identity before\n    successfully initiating a bill purchase instance. This way you reduce the issue of theft\n    or erroneous bill payments which are hard to retrieve.\n    You don't need to verify the customer if the bill type is airtime\n    Args:\n        tracking_reference: Customer's wallet identifier.\n        kuda_bill_item_identifier: The Kuda bill unique identifier.\n        customer_identification: The customer's unique identifier.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"TrackingRef\": tracking_reference,\n\"KudaBillItemIdentifier\": kuda_bill_item_identifier,\n\"CustomerIdentification\": customer_identification,\n}\nreturn self._api_call(\nservice_type=ServiceType.VERIFY_BILL_CUSTOMER,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/card/","title":"Card","text":""},{"location":"reference/wrappers/sync_wrappers/card/#pykuda2.wrappers.sync_wrappers.card.Card","title":"<code>Card</code>","text":"<p>         Bases: <code>BaseAPIWrapper</code></p> Source code in <code>pykuda2/wrappers/sync_wrappers/card.py</code> <pre><code>class Card(BaseAPIWrapper):\ndef request_card(\nself,\ntracking_reference: str,\nname_on_card: str,\ncountry: str,\ngender: Gender,\nadditional_phone_number: str,\ndelivery_city: str,\ndelivery_lga: str,\ndelivery_landmark: str,\ndate_of_birth: str,\ndelivery_state: str,\ndelivery_street_no_and_name: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Request for a new card for a customer and get it delivered to their location.\n        Args:\n            tracking_reference: The unique identifier of the virtual account.\n            name_on_card: The virtual account name.\n            date_of_birth: The customer's date of birth. Format(YYYY-MM-DD).\n            gender: Customer's gender e.g. Gender.MALE, Gender.FEMALE.\n            delivery_state: The state of residence for card delivery.\n            delivery_street_no_and_name: The street no and name for card delivery.\n            delivery_city: Name of city for card delivery.\n            delivery_lga: Local government area for card delivery\n            delivery_landmark: Landmark for card delivery.\n            country: Country of residence for card delivery.\n            additional_phone_number: additional phone number.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"NameOnCard\": name_on_card,\n\"dateofBirth\": date_of_birth,\n\"Gender\": gender,\n\"DeliveryState\": delivery_state,\n\"DeliveryStreetNoAndName\": delivery_street_no_and_name,\n\"DeliveryCity\": delivery_city,\n\"DeliveryLGA\": delivery_lga,\n\"DeliveryLandmark\": delivery_landmark,\n\"Country\": country,\n\"additionalPhoneNumber\": additional_phone_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.REQUEST_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_cards(\nself,\ntracking_reference: str,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a list of cards requested.\n        Args:\n            tracking_reference: The unique identifier of the account.\n            simulate_request: Flag to simulate request.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"SimulateRequest\": simulate_request,\n}\nreturn self._api_call(\nservice_type=ServiceType.GET_CUSTOMER_CARDS,\ndata=data,\nrequest_reference=request_reference,\n)\ndef activate_card(\nself,\npan: int,\ncvv: int,\nid: int,\ntracking_reference: str,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers activate their cards once they receive it.\n        Args:\n            pan: Card primary account number issued after processing.\n            cvv: Card CVV.\n            tracking_reference: The unique identifier of the account.\n            id: Card unique identifier.\n            simulate_request: Flag to simulate request.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Pan\": pan,\n\"CVV\": cvv,\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"SimulateRequest\": simulate_request,\n}\nreturn self._api_call(\nservice_type=ServiceType.ACTIVATE_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\ndef deactivate_card(\nself,\nid: int,\ntracking_reference: str,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers deactivate their cards.\n        Args:\n            tracking_reference: The unique identifier of the account.\n            id: Card unique identifier.\n            simulate_request: Flag to simulate request.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"SimulateRequest\": simulate_request,\n}\nreturn self._api_call(\nservice_type=ServiceType.DEACTIVATE_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\ndef set_card_limit(\nself,\nid: int,\ntracking_reference: str,\nchannel: CardChannel,\nlimit: int,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Set spend limit on a card.\n        Card limits are a good way to manage individual spend on their accounts.\n        There are use cases for this, especially in the edtech space where an individual\n        will like to manage spending limits or even in the contracting space where clients\n        want to manage spend limits on purchases.\n            - A good way to start this is to manage where and how these limits can be set\n                and across the channels the card can be accessed.\n        Args:\n            id: Card unique identifier.\n            tracking_reference: The virtual account number.\n            channel: Card channels e.g. CardChannel.ATM, CardChannel.POS.\n            limit: Transaction amount limit in kobo.\n            simulate_request: Flag to simulate request.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"Channel\": channel,\n\"Limit\": limit,\n\"SimulateRequest\": simulate_request,\n}\nreturn self._api_call(\nservice_type=ServiceType.MANAGE_CARD_TRANSACTION_LIMIT,\ndata=data,\nrequest_reference=request_reference,\n)\ndef manage_card_channel(\nself,\nid: int,\ntracking_reference: str,\nchannel: CardChannel,\nlimit: int,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers manage where their cards can be used.\n        Args:\n            id: Card unique identifier.\n            tracking_reference: The virtual account number.\n            channel: Card channels e.g. CardChannel.ATM, CardChannel.POS.\n            limit: Transaction amount limit in kobo.\n            simulate_request: Flag to simulate request.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"Channel\": channel,\n\"Limit\": limit,\n\"SimulateRequest\": simulate_request,\n}\nreturn self._api_call(\nservice_type=ServiceType.MANAGE_CARD_CHANNEL,\ndata=data,\nrequest_reference=request_reference,\n)\ndef change_card_pin(\nself,\nid: int,\ntracking_reference: str,\nnew_pin: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers change their 4 digits PIN to any combination they desire.\n        Args:\n            id: Card unique identifier.\n            tracking_reference: The virtual account number.\n            new_pin: Customer's new PIN.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\"\"\"\ndata = {\"Id\": id, \"TrackingReference\": tracking_reference, \"NewPIN\": new_pin}\nreturn self._api_call(\nservice_type=ServiceType.CHANGE_CARD_PIN,\ndata=data,\nrequest_reference=request_reference,\n)\ndef block_card(\nself, tracking_reference: str, id: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Block a customer's card.\n        It allows them to longer be able to make card transactions with it.\n        In an emergency, a user may require to block a card in the event that the\n        card is stolen or lost. Use this method to quickly block the card.\n        Args:\n            id: Card unique identifier.\n            tracking_reference: The virtual account number.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.BLOCK_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\ndef unblock_card(\nself, tracking_reference: str, id: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Unblocks a customers card.\n        Args:\n            id: Card unique identifier.\n            tracking_reference: The virtual account number.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.UNBLOCK_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/card/#pykuda2.wrappers.sync_wrappers.card.Card.activate_card","title":"<code>activate_card(pan, cvv, id, tracking_reference, simulate_request=False, request_reference=None)</code>","text":"<p>Allows customers activate their cards once they receive it.</p> <p>Parameters:</p> Name Type Description Default <code>pan</code> <code>int</code> <p>Card primary account number issued after processing.</p> required <code>cvv</code> <code>int</code> <p>Card CVV.</p> required <code>tracking_reference</code> <code>str</code> <p>The unique identifier of the account.</p> required <code>id</code> <code>int</code> <p>Card unique identifier.</p> required <code>simulate_request</code> <code>bool</code> <p>Flag to simulate request.</p> <code>False</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/card.py</code> <pre><code>def activate_card(\nself,\npan: int,\ncvv: int,\nid: int,\ntracking_reference: str,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers activate their cards once they receive it.\n    Args:\n        pan: Card primary account number issued after processing.\n        cvv: Card CVV.\n        tracking_reference: The unique identifier of the account.\n        id: Card unique identifier.\n        simulate_request: Flag to simulate request.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Pan\": pan,\n\"CVV\": cvv,\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"SimulateRequest\": simulate_request,\n}\nreturn self._api_call(\nservice_type=ServiceType.ACTIVATE_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/card/#pykuda2.wrappers.sync_wrappers.card.Card.block_card","title":"<code>block_card(tracking_reference, id, request_reference=None)</code>","text":"<p>Block a customer's card.</p> <p>It allows them to longer be able to make card transactions with it. In an emergency, a user may require to block a card in the event that the card is stolen or lost. Use this method to quickly block the card.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Card unique identifier.</p> required <code>tracking_reference</code> <code>str</code> <p>The virtual account number.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/card.py</code> <pre><code>def block_card(\nself, tracking_reference: str, id: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Block a customer's card.\n    It allows them to longer be able to make card transactions with it.\n    In an emergency, a user may require to block a card in the event that the\n    card is stolen or lost. Use this method to quickly block the card.\n    Args:\n        id: Card unique identifier.\n        tracking_reference: The virtual account number.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.BLOCK_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/card/#pykuda2.wrappers.sync_wrappers.card.Card.change_card_pin","title":"<code>change_card_pin(id, tracking_reference, new_pin, request_reference=None)</code>","text":"<p>Allows customers change their 4 digits PIN to any combination they desire.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Card unique identifier.</p> required <code>tracking_reference</code> <code>str</code> <p>The virtual account number.</p> required <code>new_pin</code> <code>int</code> <p>Customer's new PIN.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/card.py</code> <pre><code>def change_card_pin(\nself,\nid: int,\ntracking_reference: str,\nnew_pin: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers change their 4 digits PIN to any combination they desire.\n    Args:\n        id: Card unique identifier.\n        tracking_reference: The virtual account number.\n        new_pin: Customer's new PIN.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\"\"\"\ndata = {\"Id\": id, \"TrackingReference\": tracking_reference, \"NewPIN\": new_pin}\nreturn self._api_call(\nservice_type=ServiceType.CHANGE_CARD_PIN,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/card/#pykuda2.wrappers.sync_wrappers.card.Card.deactivate_card","title":"<code>deactivate_card(id, tracking_reference, simulate_request=False, request_reference=None)</code>","text":"<p>Allows customers deactivate their cards.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The unique identifier of the account.</p> required <code>id</code> <code>int</code> <p>Card unique identifier.</p> required <code>simulate_request</code> <code>bool</code> <p>Flag to simulate request.</p> <code>False</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/card.py</code> <pre><code>def deactivate_card(\nself,\nid: int,\ntracking_reference: str,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers deactivate their cards.\n    Args:\n        tracking_reference: The unique identifier of the account.\n        id: Card unique identifier.\n        simulate_request: Flag to simulate request.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"SimulateRequest\": simulate_request,\n}\nreturn self._api_call(\nservice_type=ServiceType.DEACTIVATE_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/card/#pykuda2.wrappers.sync_wrappers.card.Card.get_cards","title":"<code>get_cards(tracking_reference, simulate_request=False, request_reference=None)</code>","text":"<p>Retrieves a list of cards requested.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The unique identifier of the account.</p> required <code>simulate_request</code> <code>bool</code> <p>Flag to simulate request.</p> <code>False</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/card.py</code> <pre><code>def get_cards(\nself,\ntracking_reference: str,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a list of cards requested.\n    Args:\n        tracking_reference: The unique identifier of the account.\n        simulate_request: Flag to simulate request.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"SimulateRequest\": simulate_request,\n}\nreturn self._api_call(\nservice_type=ServiceType.GET_CUSTOMER_CARDS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/card/#pykuda2.wrappers.sync_wrappers.card.Card.manage_card_channel","title":"<code>manage_card_channel(id, tracking_reference, channel, limit, simulate_request=False, request_reference=None)</code>","text":"<p>Allows customers manage where their cards can be used.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Card unique identifier.</p> required <code>tracking_reference</code> <code>str</code> <p>The virtual account number.</p> required <code>channel</code> <code>CardChannel</code> <p>Card channels e.g. CardChannel.ATM, CardChannel.POS.</p> required <code>limit</code> <code>int</code> <p>Transaction amount limit in kobo.</p> required <code>simulate_request</code> <code>bool</code> <p>Flag to simulate request.</p> <code>False</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/card.py</code> <pre><code>def manage_card_channel(\nself,\nid: int,\ntracking_reference: str,\nchannel: CardChannel,\nlimit: int,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows customers manage where their cards can be used.\n    Args:\n        id: Card unique identifier.\n        tracking_reference: The virtual account number.\n        channel: Card channels e.g. CardChannel.ATM, CardChannel.POS.\n        limit: Transaction amount limit in kobo.\n        simulate_request: Flag to simulate request.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"Channel\": channel,\n\"Limit\": limit,\n\"SimulateRequest\": simulate_request,\n}\nreturn self._api_call(\nservice_type=ServiceType.MANAGE_CARD_CHANNEL,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/card/#pykuda2.wrappers.sync_wrappers.card.Card.request_card","title":"<code>request_card(tracking_reference, name_on_card, country, gender, additional_phone_number, delivery_city, delivery_lga, delivery_landmark, date_of_birth, delivery_state, delivery_street_no_and_name, request_reference=None)</code>","text":"<p>Request for a new card for a customer and get it delivered to their location.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The unique identifier of the virtual account.</p> required <code>name_on_card</code> <code>str</code> <p>The virtual account name.</p> required <code>date_of_birth</code> <code>str</code> <p>The customer's date of birth. Format(YYYY-MM-DD).</p> required <code>gender</code> <code>Gender</code> <p>Customer's gender e.g. Gender.MALE, Gender.FEMALE.</p> required <code>delivery_state</code> <code>str</code> <p>The state of residence for card delivery.</p> required <code>delivery_street_no_and_name</code> <code>str</code> <p>The street no and name for card delivery.</p> required <code>delivery_city</code> <code>str</code> <p>Name of city for card delivery.</p> required <code>delivery_lga</code> <code>str</code> <p>Local government area for card delivery</p> required <code>delivery_landmark</code> <code>str</code> <p>Landmark for card delivery.</p> required <code>country</code> <code>str</code> <p>Country of residence for card delivery.</p> required <code>additional_phone_number</code> <code>str</code> <p>additional phone number.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/card.py</code> <pre><code>def request_card(\nself,\ntracking_reference: str,\nname_on_card: str,\ncountry: str,\ngender: Gender,\nadditional_phone_number: str,\ndelivery_city: str,\ndelivery_lga: str,\ndelivery_landmark: str,\ndate_of_birth: str,\ndelivery_state: str,\ndelivery_street_no_and_name: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Request for a new card for a customer and get it delivered to their location.\n    Args:\n        tracking_reference: The unique identifier of the virtual account.\n        name_on_card: The virtual account name.\n        date_of_birth: The customer's date of birth. Format(YYYY-MM-DD).\n        gender: Customer's gender e.g. Gender.MALE, Gender.FEMALE.\n        delivery_state: The state of residence for card delivery.\n        delivery_street_no_and_name: The street no and name for card delivery.\n        delivery_city: Name of city for card delivery.\n        delivery_lga: Local government area for card delivery\n        delivery_landmark: Landmark for card delivery.\n        country: Country of residence for card delivery.\n        additional_phone_number: additional phone number.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"NameOnCard\": name_on_card,\n\"dateofBirth\": date_of_birth,\n\"Gender\": gender,\n\"DeliveryState\": delivery_state,\n\"DeliveryStreetNoAndName\": delivery_street_no_and_name,\n\"DeliveryCity\": delivery_city,\n\"DeliveryLGA\": delivery_lga,\n\"DeliveryLandmark\": delivery_landmark,\n\"Country\": country,\n\"additionalPhoneNumber\": additional_phone_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.REQUEST_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/card/#pykuda2.wrappers.sync_wrappers.card.Card.set_card_limit","title":"<code>set_card_limit(id, tracking_reference, channel, limit, simulate_request=False, request_reference=None)</code>","text":"<p>Set spend limit on a card.</p> <p>Card limits are a good way to manage individual spend on their accounts. There are use cases for this, especially in the edtech space where an individual will like to manage spending limits or even in the contracting space where clients want to manage spend limits on purchases.     - A good way to start this is to manage where and how these limits can be set         and across the channels the card can be accessed.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Card unique identifier.</p> required <code>tracking_reference</code> <code>str</code> <p>The virtual account number.</p> required <code>channel</code> <code>CardChannel</code> <p>Card channels e.g. CardChannel.ATM, CardChannel.POS.</p> required <code>limit</code> <code>int</code> <p>Transaction amount limit in kobo.</p> required <code>simulate_request</code> <code>bool</code> <p>Flag to simulate request.</p> <code>False</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/card.py</code> <pre><code>def set_card_limit(\nself,\nid: int,\ntracking_reference: str,\nchannel: CardChannel,\nlimit: int,\nsimulate_request: bool = False,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Set spend limit on a card.\n    Card limits are a good way to manage individual spend on their accounts.\n    There are use cases for this, especially in the edtech space where an individual\n    will like to manage spending limits or even in the contracting space where clients\n    want to manage spend limits on purchases.\n        - A good way to start this is to manage where and how these limits can be set\n            and across the channels the card can be accessed.\n    Args:\n        id: Card unique identifier.\n        tracking_reference: The virtual account number.\n        channel: Card channels e.g. CardChannel.ATM, CardChannel.POS.\n        limit: Transaction amount limit in kobo.\n        simulate_request: Flag to simulate request.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n\"Channel\": channel,\n\"Limit\": limit,\n\"SimulateRequest\": simulate_request,\n}\nreturn self._api_call(\nservice_type=ServiceType.MANAGE_CARD_TRANSACTION_LIMIT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/card/#pykuda2.wrappers.sync_wrappers.card.Card.unblock_card","title":"<code>unblock_card(tracking_reference, id, request_reference=None)</code>","text":"<p>Unblocks a customers card.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Card unique identifier.</p> required <code>tracking_reference</code> <code>str</code> <p>The virtual account number.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/card.py</code> <pre><code>def unblock_card(\nself, tracking_reference: str, id: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Unblocks a customers card.\n    Args:\n        id: Card unique identifier.\n        tracking_reference: The virtual account number.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Id\": id,\n\"TrackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.UNBLOCK_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/gift_card/","title":"Gift card","text":""},{"location":"reference/wrappers/sync_wrappers/gift_card/#pykuda2.wrappers.sync_wrappers.gift_card.GiftCard","title":"<code>GiftCard</code>","text":"<p>         Bases: <code>BaseAPIWrapper</code></p> Source code in <code>pykuda2/wrappers/sync_wrappers/gift_card.py</code> <pre><code>class GiftCard(BaseAPIWrapper):\ndef get_gift_cards(self, request_reference: Optional[str] = None) -&gt; APIResponse:\n\"\"\"Retrieves a curated list of gift cards supported by Kuda.\n        Args:\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\nreturn self._api_call(\nservice_type=ServiceType.GET_GIFT_CARD, request_reference=request_reference\n)\ndef purchase_gift_card(\nself,\namount: Union[int, float],\ncustomer_name: str,\ncustomer_mobile: str,\ncustomer_email: str,\nbiller_identifier: str,\nnote: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Buy gift cards from the admin account\n        Args:\n            amount: The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            customer_name: Name of the customer receiving the gift card.\n            customer_mobile: Mobile number of customer.\n            customer_email: The email address of customer.\n            biller_identifier: The Biller ID or identifier. You can find it in the `APIResponse` of\n                `self.gift_cards`.\n            note: An optional gift card note.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"amount\": amount,\n\"requestingCustomerName\": customer_name,\n\"requestingCustomerMobile\": customer_mobile,\n\"requestingCustomerEmail\": customer_email,\n\"billerIdentifier\": biller_identifier,\n\"note\": note,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_BUY_GIFT_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\ndef purchase_gift_card_from_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\ncustomer_name: str,\ncustomer_mobile: str,\ncustomer_email: str,\nbiller_identifier: str,\nnote: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Buy gift cards from the virtual account.\n        Args:\n            tracking_reference: The unique identifier of the virtual account.\n            amount: The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            customer_name: Name of the customer receiving the gift card.\n            customer_mobile: Mobile number of customer.\n            customer_email: The email address of customer.\n            biller_identifier: The Biller ID or identifier. You can find it in the `APIResponse` of\n                `self.gift_cards`.\n            note: An optional gift card note.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"requestingCustomerName\": customer_name,\n\"requestingCustomerMobile\": customer_mobile,\n\"requestingCustomerEmail\": customer_email,\n\"billerIdentifier\": biller_identifier,\n\"note\": note,\n}\nreturn self._api_call(\nservice_type=ServiceType.BUY_GIFT_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_gift_card_status(\nself,\ntracking_reference: str,\namount: Union[int, float],\ncustomer_name: str,\ncustomer_mobile: str,\ncustomer_email: str,\nbiller_identifier: str,\nnote: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves the status of all gift cards purchased.\n        Args:\n            tracking_reference: The unique identifier of the virtual account.\n            amount: The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            customer_name: Name of the customer receiving the gift card.\n            customer_mobile: Mobile number of customer.\n            customer_email: The email address of customer.\n            biller_identifier: The Biller ID or identifier. You can find it in the `APIResponse` of\n                `self.gift_cards`.\n            note: An optional gift card note.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"requestingCustomerName\": customer_name,\n\"requestingCustomerMobile\": customer_mobile,\n\"requestingCustomerEmail\": customer_email,\n\"billerIdentifier\": biller_identifier,\n\"note\": note,\n}\nreturn self._api_call(\nservice_type=ServiceType.GIFT_CARD_TSQ,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/gift_card/#pykuda2.wrappers.sync_wrappers.gift_card.GiftCard.get_gift_card_status","title":"<code>get_gift_card_status(tracking_reference, amount, customer_name, customer_mobile, customer_email, biller_identifier, note=None, request_reference=None)</code>","text":"<p>Retrieves the status of all gift cards purchased.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The unique identifier of the virtual account.</p> required <code>amount</code> <code>Union[int, float]</code> <p>The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>customer_name</code> <code>str</code> <p>Name of the customer receiving the gift card.</p> required <code>customer_mobile</code> <code>str</code> <p>Mobile number of customer.</p> required <code>customer_email</code> <code>str</code> <p>The email address of customer.</p> required <code>biller_identifier</code> <code>str</code> <p>The Biller ID or identifier. You can find it in the <code>APIResponse</code> of <code>self.gift_cards</code>.</p> required <code>note</code> <code>Optional[str]</code> <p>An optional gift card note.</p> <code>None</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/gift_card.py</code> <pre><code>def get_gift_card_status(\nself,\ntracking_reference: str,\namount: Union[int, float],\ncustomer_name: str,\ncustomer_mobile: str,\ncustomer_email: str,\nbiller_identifier: str,\nnote: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves the status of all gift cards purchased.\n    Args:\n        tracking_reference: The unique identifier of the virtual account.\n        amount: The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        customer_name: Name of the customer receiving the gift card.\n        customer_mobile: Mobile number of customer.\n        customer_email: The email address of customer.\n        biller_identifier: The Biller ID or identifier. You can find it in the `APIResponse` of\n            `self.gift_cards`.\n        note: An optional gift card note.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"requestingCustomerName\": customer_name,\n\"requestingCustomerMobile\": customer_mobile,\n\"requestingCustomerEmail\": customer_email,\n\"billerIdentifier\": biller_identifier,\n\"note\": note,\n}\nreturn self._api_call(\nservice_type=ServiceType.GIFT_CARD_TSQ,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/gift_card/#pykuda2.wrappers.sync_wrappers.gift_card.GiftCard.get_gift_cards","title":"<code>get_gift_cards(request_reference=None)</code>","text":"<p>Retrieves a curated list of gift cards supported by Kuda.</p> <p>Parameters:</p> Name Type Description Default <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/gift_card.py</code> <pre><code>def get_gift_cards(self, request_reference: Optional[str] = None) -&gt; APIResponse:\n\"\"\"Retrieves a curated list of gift cards supported by Kuda.\n    Args:\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\nreturn self._api_call(\nservice_type=ServiceType.GET_GIFT_CARD, request_reference=request_reference\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/gift_card/#pykuda2.wrappers.sync_wrappers.gift_card.GiftCard.purchase_gift_card","title":"<code>purchase_gift_card(amount, customer_name, customer_mobile, customer_email, biller_identifier, note=None, request_reference=None)</code>","text":"<p>Buy gift cards from the admin account</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Union[int, float]</code> <p>The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>customer_name</code> <code>str</code> <p>Name of the customer receiving the gift card.</p> required <code>customer_mobile</code> <code>str</code> <p>Mobile number of customer.</p> required <code>customer_email</code> <code>str</code> <p>The email address of customer.</p> required <code>biller_identifier</code> <code>str</code> <p>The Biller ID or identifier. You can find it in the <code>APIResponse</code> of <code>self.gift_cards</code>.</p> required <code>note</code> <code>Optional[str]</code> <p>An optional gift card note.</p> <code>None</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/gift_card.py</code> <pre><code>def purchase_gift_card(\nself,\namount: Union[int, float],\ncustomer_name: str,\ncustomer_mobile: str,\ncustomer_email: str,\nbiller_identifier: str,\nnote: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Buy gift cards from the admin account\n    Args:\n        amount: The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        customer_name: Name of the customer receiving the gift card.\n        customer_mobile: Mobile number of customer.\n        customer_email: The email address of customer.\n        biller_identifier: The Biller ID or identifier. You can find it in the `APIResponse` of\n            `self.gift_cards`.\n        note: An optional gift card note.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"amount\": amount,\n\"requestingCustomerName\": customer_name,\n\"requestingCustomerMobile\": customer_mobile,\n\"requestingCustomerEmail\": customer_email,\n\"billerIdentifier\": biller_identifier,\n\"note\": note,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_BUY_GIFT_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/gift_card/#pykuda2.wrappers.sync_wrappers.gift_card.GiftCard.purchase_gift_card_from_virtual_account","title":"<code>purchase_gift_card_from_virtual_account(tracking_reference, amount, customer_name, customer_mobile, customer_email, biller_identifier, note=None, request_reference=None)</code>","text":"<p>Buy gift cards from the virtual account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The unique identifier of the virtual account.</p> required <code>amount</code> <code>Union[int, float]</code> <p>The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>customer_name</code> <code>str</code> <p>Name of the customer receiving the gift card.</p> required <code>customer_mobile</code> <code>str</code> <p>Mobile number of customer.</p> required <code>customer_email</code> <code>str</code> <p>The email address of customer.</p> required <code>biller_identifier</code> <code>str</code> <p>The Biller ID or identifier. You can find it in the <code>APIResponse</code> of <code>self.gift_cards</code>.</p> required <code>note</code> <code>Optional[str]</code> <p>An optional gift card note.</p> <code>None</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/gift_card.py</code> <pre><code>def purchase_gift_card_from_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\ncustomer_name: str,\ncustomer_mobile: str,\ncustomer_email: str,\nbiller_identifier: str,\nnote: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Buy gift cards from the virtual account.\n    Args:\n        tracking_reference: The unique identifier of the virtual account.\n        amount: The gift card amount to be purchased. It could be in USD/ GBP/ EUR/ NGN/ AED , e.t.c. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        customer_name: Name of the customer receiving the gift card.\n        customer_mobile: Mobile number of customer.\n        customer_email: The email address of customer.\n        biller_identifier: The Biller ID or identifier. You can find it in the `APIResponse` of\n            `self.gift_cards`.\n        note: An optional gift card note.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"requestingCustomerName\": customer_name,\n\"requestingCustomerMobile\": customer_mobile,\n\"requestingCustomerEmail\": customer_email,\n\"billerIdentifier\": biller_identifier,\n\"note\": note,\n}\nreturn self._api_call(\nservice_type=ServiceType.BUY_GIFT_CARD,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/instant_settlement_service/","title":"Instant settlement service","text":""},{"location":"reference/wrappers/sync_wrappers/instant_settlement_service/#pykuda2.wrappers.sync_wrappers.instant_settlement_service.InstantSettlementService","title":"<code>InstantSettlementService</code>","text":"<p>         Bases: <code>BaseAPIWrapper</code></p> Source code in <code>pykuda2/wrappers/sync_wrappers/instant_settlement_service.py</code> <pre><code>class InstantSettlementService(BaseAPIWrapper):\ndef __init__(self, secret_key: str, client_password: str, mode=Mode.DEVELOPMENT):\nsuper().__init__(email=\"\", api_key=\"\", mode=mode)\nself.secret_key = secret_key\nself.client_password = client_password\n@property\ndef _base_url(self) -&gt; str:\n\"\"\"Returns the base url.\n        The url returned depends on the mode in which the class was instantiated.\"\"\"\nreturn {\nMode.DEVELOPMENT: \"https://partners-uat.kudabank.com\",\nMode.PRODUCTION: \"https://partners.kuda.com\",\n}[self._mode]\n@property\ndef _token(self) -&gt; str:\nif self._token:\nreturn self._token\nelse:\nresponse = self._api_call(\nservice_type=ServiceType.NO_OP,\ndata={\n\"secretKey\": self.secret_key,\n\"clientPassword\": self.client_password,\n},\nendpoint_path=\"/api/Auth/authenticate\",\nexclude_auth_header=True,\n)\nif response.data:\nself._token = response.data[\"auth_token\"]\nreturn self._token\nraise TokenException(\n\"Unable to get access token for InstantSettlementService. \"\nf\"{response.message}. Please ensure valid credentials were provided\"\n)\ndef create_terminal(\nself,\nterminal_id: str,\nmerchant_id: str,\nkuda_account_number: int,\nserial_number: str,\nis_receiving_payment: bool,\nis_active: bool,\n) -&gt; APIResponse:\n\"\"\"Gives the partner the ability to add certain parameters to a POS device.\n        It allows the partner to anchor routing communications between the processor and the Kuda settlement system.\n        Args:\n            terminal_id: The terminal identifier.\n            merchant_id: The merchant identifier.\n            kuda_account_number: The client's Kuda account number.\n            serial_number: The serial number.\n            is_receiving_payment: Set to `True` for receiving payment or `False` for otherwise.\n            is_active: Set to `True` for an active terminal or `False` for otherwise.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\npayload = {\n\"terminalId\": terminal_id,\n\"merchantId\": merchant_id,\n\"kudaAccountNumber\": kuda_account_number,\n\"serialNumber\": serial_number,\n\"isReceivingPayment\": is_receiving_payment,\n\"isActive\": is_active,\n}\nreturn self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/api/terminal/createterminal\",\n)\ndef update_terminal(\nself,\nkuda_merchant_id: str,\nterminal_id: str,\nkuda_account_number: int,\nkuda_account_name: str,\nserial_number: str,\nis_active: bool,\nis_receiving_payment: bool,\nfee_percentage: float,\ndate_created: str,\n) -&gt; APIResponse:\n\"\"\"Allows a partner to swap the location and user of a POS device.\n        Args:\n            kuda_merchant_id: The client's Kuda merchant identifier\n            terminal_id: The  terminal unique identifier\n            kuda_account_number: The client's Kuda account number\n            kuda_account_name: The client's account name\n            serial_number: The terminal's serial number\n            is_active: Set to `True` for an active terminal or otherwise.\n            is_receiving_payment: Set to `True` if the terminal is receiving payment else otherwise.\n            fee_percentage: Fee percentage\n            date_created: The date the terminal was created\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\npayload = {\n\"id\": id,\n\"kudaMerchantId\": kuda_merchant_id,\n\"terminalId\": terminal_id,\n\"kudaAccountNumber\": kuda_account_number,\n\"kudaAccountName\": kuda_account_name,\n\"serialNumber\": serial_number,\n\"isActive\": is_active,\n\"isReceivingPayment\": is_receiving_payment,\n\"feePercentage\": fee_percentage,\n\"dateCreated\": date_created,\n}\nreturn self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/EditTerminal\",\n)\ndef all(self, page_size: int, page_number: int) -&gt; APIResponse:\n\"\"\"Allows a user to get all merchants and the terminals assigned to them.\n        Args:\n            page_size: This specifies the maximum number of terminals to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\npayload = {\"pageSize\": page_size, \"pageNumber\": page_number}\nreturn self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/RetrieveMerchantTerminals\",\n)\ndef get_settlement_status(self, transaction_id: str) -&gt; APIResponse:\n\"\"\"Retrieves insight on the status of a particular/all settlements for a terminal.\n        Args:\n            transaction_id: The transaction reference number or unique identifier.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\npayload = {\"transactionId\": transaction_id}\nreturn self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/settlementstatus\",\n)\ndef log_transaction(\nself, amount: Union[int, float], transaction_id: str, terminal_id: str\n) -&gt; APIResponse:\n\"\"\"Logs a complete transaction.\n        For complete transaction fulfilment, a user will call this method with the transaction amount\n        that needs to be fulfilled. This way, the terminal management system is updated with the transaction\n        status in real-time and completes settlement to the specified user's account.\n        Logging a transaction sends a notification to Kuda which triggers instant settlement.\n        Args:\n            amount: The transaction amount. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            transaction_id: The transaction reference number or unique identifier.\n            terminal_id: The terminal unique identifier.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\npayload = {\n\"amount\": amount,\n\"transactionId\": transaction_id,\n\"terminalId\": terminal_id,\n}\nreturn self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/logtransaction\",\n)\ndef transactions(\nself, terminal_id: str, from_: str, to: str, page_size: int, page_number: int\n) -&gt; APIResponse:\n\"\"\"Retrieves transactions.\n        This method allows a user to do back office operations while searching for transactions disputes.\n        Args:\n            terminal_id: The terminal unique identifier\n            from_: The start date\n            to: The end date\n            page_size: This specifies the maximum number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\npayload = {\n\"terminalId\": terminal_id,\n\"dateFrom\": from_,\n\"dateTo\": to,\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/searchtransaction\",\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/instant_settlement_service/#pykuda2.wrappers.sync_wrappers.instant_settlement_service.InstantSettlementService.all","title":"<code>all(page_size, page_number)</code>","text":"<p>Allows a user to get all merchants and the terminals assigned to them.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>This specifies the maximum number of terminals to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/instant_settlement_service.py</code> <pre><code>def all(self, page_size: int, page_number: int) -&gt; APIResponse:\n\"\"\"Allows a user to get all merchants and the terminals assigned to them.\n    Args:\n        page_size: This specifies the maximum number of terminals to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\npayload = {\"pageSize\": page_size, \"pageNumber\": page_number}\nreturn self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/RetrieveMerchantTerminals\",\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/instant_settlement_service/#pykuda2.wrappers.sync_wrappers.instant_settlement_service.InstantSettlementService.create_terminal","title":"<code>create_terminal(terminal_id, merchant_id, kuda_account_number, serial_number, is_receiving_payment, is_active)</code>","text":"<p>Gives the partner the ability to add certain parameters to a POS device.</p> <p>It allows the partner to anchor routing communications between the processor and the Kuda settlement system.</p> <p>Parameters:</p> Name Type Description Default <code>terminal_id</code> <code>str</code> <p>The terminal identifier.</p> required <code>merchant_id</code> <code>str</code> <p>The merchant identifier.</p> required <code>kuda_account_number</code> <code>int</code> <p>The client's Kuda account number.</p> required <code>serial_number</code> <code>str</code> <p>The serial number.</p> required <code>is_receiving_payment</code> <code>bool</code> <p>Set to <code>True</code> for receiving payment or <code>False</code> for otherwise.</p> required <code>is_active</code> <code>bool</code> <p>Set to <code>True</code> for an active terminal or <code>False</code> for otherwise.</p> required <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/instant_settlement_service.py</code> <pre><code>def create_terminal(\nself,\nterminal_id: str,\nmerchant_id: str,\nkuda_account_number: int,\nserial_number: str,\nis_receiving_payment: bool,\nis_active: bool,\n) -&gt; APIResponse:\n\"\"\"Gives the partner the ability to add certain parameters to a POS device.\n    It allows the partner to anchor routing communications between the processor and the Kuda settlement system.\n    Args:\n        terminal_id: The terminal identifier.\n        merchant_id: The merchant identifier.\n        kuda_account_number: The client's Kuda account number.\n        serial_number: The serial number.\n        is_receiving_payment: Set to `True` for receiving payment or `False` for otherwise.\n        is_active: Set to `True` for an active terminal or `False` for otherwise.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\npayload = {\n\"terminalId\": terminal_id,\n\"merchantId\": merchant_id,\n\"kudaAccountNumber\": kuda_account_number,\n\"serialNumber\": serial_number,\n\"isReceivingPayment\": is_receiving_payment,\n\"isActive\": is_active,\n}\nreturn self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/api/terminal/createterminal\",\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/instant_settlement_service/#pykuda2.wrappers.sync_wrappers.instant_settlement_service.InstantSettlementService.get_settlement_status","title":"<code>get_settlement_status(transaction_id)</code>","text":"<p>Retrieves insight on the status of a particular/all settlements for a terminal.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>The transaction reference number or unique identifier.</p> required <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/instant_settlement_service.py</code> <pre><code>def get_settlement_status(self, transaction_id: str) -&gt; APIResponse:\n\"\"\"Retrieves insight on the status of a particular/all settlements for a terminal.\n    Args:\n        transaction_id: The transaction reference number or unique identifier.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\npayload = {\"transactionId\": transaction_id}\nreturn self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/settlementstatus\",\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/instant_settlement_service/#pykuda2.wrappers.sync_wrappers.instant_settlement_service.InstantSettlementService.log_transaction","title":"<code>log_transaction(amount, transaction_id, terminal_id)</code>","text":"<p>Logs a complete transaction.</p> <p>For complete transaction fulfilment, a user will call this method with the transaction amount that needs to be fulfilled. This way, the terminal management system is updated with the transaction status in real-time and completes settlement to the specified user's account.</p> <p>Logging a transaction sends a notification to Kuda which triggers instant settlement.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Union[int, float]</code> <p>The transaction amount. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>transaction_id</code> <code>str</code> <p>The transaction reference number or unique identifier.</p> required <code>terminal_id</code> <code>str</code> <p>The terminal unique identifier.</p> required <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/instant_settlement_service.py</code> <pre><code>def log_transaction(\nself, amount: Union[int, float], transaction_id: str, terminal_id: str\n) -&gt; APIResponse:\n\"\"\"Logs a complete transaction.\n    For complete transaction fulfilment, a user will call this method with the transaction amount\n    that needs to be fulfilled. This way, the terminal management system is updated with the transaction\n    status in real-time and completes settlement to the specified user's account.\n    Logging a transaction sends a notification to Kuda which triggers instant settlement.\n    Args:\n        amount: The transaction amount. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        transaction_id: The transaction reference number or unique identifier.\n        terminal_id: The terminal unique identifier.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\npayload = {\n\"amount\": amount,\n\"transactionId\": transaction_id,\n\"terminalId\": terminal_id,\n}\nreturn self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/logtransaction\",\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/instant_settlement_service/#pykuda2.wrappers.sync_wrappers.instant_settlement_service.InstantSettlementService.transactions","title":"<code>transactions(terminal_id, from_, to, page_size, page_number)</code>","text":"<p>Retrieves transactions.</p> <p>This method allows a user to do back office operations while searching for transactions disputes.</p> <p>Parameters:</p> Name Type Description Default <code>terminal_id</code> <code>str</code> <p>The terminal unique identifier</p> required <code>from_</code> <code>str</code> <p>The start date</p> required <code>to</code> <code>str</code> <p>The end date</p> required <code>page_size</code> <code>int</code> <p>This specifies the maximum number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/instant_settlement_service.py</code> <pre><code>def transactions(\nself, terminal_id: str, from_: str, to: str, page_size: int, page_number: int\n) -&gt; APIResponse:\n\"\"\"Retrieves transactions.\n    This method allows a user to do back office operations while searching for transactions disputes.\n    Args:\n        terminal_id: The terminal unique identifier\n        from_: The start date\n        to: The end date\n        page_size: This specifies the maximum number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\npayload = {\n\"terminalId\": terminal_id,\n\"dateFrom\": from_,\n\"dateTo\": to,\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/searchtransaction\",\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/instant_settlement_service/#pykuda2.wrappers.sync_wrappers.instant_settlement_service.InstantSettlementService.update_terminal","title":"<code>update_terminal(kuda_merchant_id, terminal_id, kuda_account_number, kuda_account_name, serial_number, is_active, is_receiving_payment, fee_percentage, date_created)</code>","text":"<p>Allows a partner to swap the location and user of a POS device.</p> <p>Parameters:</p> Name Type Description Default <code>kuda_merchant_id</code> <code>str</code> <p>The client's Kuda merchant identifier</p> required <code>terminal_id</code> <code>str</code> <p>The  terminal unique identifier</p> required <code>kuda_account_number</code> <code>int</code> <p>The client's Kuda account number</p> required <code>kuda_account_name</code> <code>str</code> <p>The client's account name</p> required <code>serial_number</code> <code>str</code> <p>The terminal's serial number</p> required <code>is_active</code> <code>bool</code> <p>Set to <code>True</code> for an active terminal or otherwise.</p> required <code>is_receiving_payment</code> <code>bool</code> <p>Set to <code>True</code> if the terminal is receiving payment else otherwise.</p> required <code>fee_percentage</code> <code>float</code> <p>Fee percentage</p> required <code>date_created</code> <code>str</code> <p>The date the terminal was created</p> required <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/instant_settlement_service.py</code> <pre><code>def update_terminal(\nself,\nkuda_merchant_id: str,\nterminal_id: str,\nkuda_account_number: int,\nkuda_account_name: str,\nserial_number: str,\nis_active: bool,\nis_receiving_payment: bool,\nfee_percentage: float,\ndate_created: str,\n) -&gt; APIResponse:\n\"\"\"Allows a partner to swap the location and user of a POS device.\n    Args:\n        kuda_merchant_id: The client's Kuda merchant identifier\n        terminal_id: The  terminal unique identifier\n        kuda_account_number: The client's Kuda account number\n        kuda_account_name: The client's account name\n        serial_number: The terminal's serial number\n        is_active: Set to `True` for an active terminal or otherwise.\n        is_receiving_payment: Set to `True` if the terminal is receiving payment else otherwise.\n        fee_percentage: Fee percentage\n        date_created: The date the terminal was created\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\npayload = {\n\"id\": id,\n\"kudaMerchantId\": kuda_merchant_id,\n\"terminalId\": terminal_id,\n\"kudaAccountNumber\": kuda_account_number,\n\"kudaAccountName\": kuda_account_name,\n\"serialNumber\": serial_number,\n\"isActive\": is_active,\n\"isReceivingPayment\": is_receiving_payment,\n\"feePercentage\": fee_percentage,\n\"dateCreated\": date_created,\n}\nreturn self._api_call(\nservice_type=ServiceType.NO_OP,\ndata=payload,\nendpoint_path=\"/api/terminal/EditTerminal\",\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/","title":"Savings","text":""},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings","title":"<code>Savings</code>","text":"<p>         Bases: <code>BaseAPIWrapper</code></p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>class Savings(BaseAPIWrapper):\ndef create_plain_savings_account(\nself,\nname: str,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Create a Plain Savings Account.\n        To create a Plain savings, in your request, you need to state the Virtual Account\n        associated with this savings account as well as create a unique identifier for\n        the savings account to be created.\n        Args:\n            name: The savings plan name.\n            tracking_reference: The virtual account transaction reference number.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"Name\": name, \"TrackingReference\": tracking_reference}\nreturn self._api_call(\nservice_type=ServiceType.CREATE_PLAIN_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_plain_savings_account(\nself,\ntracking_reference: str,\nprimary_account_number: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a customers plain savings account\n        Args:\n            tracking_reference: Account transaction reference number of the savings you want to retrieve.\n                This parameter is for specific plain savings.\n            primary_account_number: Account number of the specific customer.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"PrimaryAccountNumber\": primary_account_number,\n}\nreturn self._api_call(service_type=ServiceType.GET_PLAIN_SAVE, data=data)\ndef get_plain_savings_accounts(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves all customers plain savings accounts\n        Args:\n            tracking_reference: Account transaction reference number of the savings you want to retrieve.\n                This parameter is for specific plain savings.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"TrackingReference\": tracking_reference}\nreturn self._api_call(\nservice_type=ServiceType.GET_ALL_CUSTOMER_PLAIN_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\ndef credit_or_debit_plain_savings_account(\nself,\namount: Union[int, float],\nnarration: str,\ntransaction_type: TransactionType,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Adds or removes money from a plain savings account.\n        Args:\n            amount: The amount to be added or removed. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            narration: The transaction description.\n            transaction_type: The transaction type e.g. TransactionType.CREDIT.\n            tracking_reference: Unique identifier for savings.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"Amount\": amount,\n\"Narration\": narration,\n\"TransactionType\": transaction_type,\n\"TrackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.PLAIN_SAVE_DEBIT_CREDIT,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_plain_savings_account_transactions(\nself,\npage_size: int,\npage_number: int,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves all plain savings account transaction data.\n        Args:\n            tracking_reference: Unique identifier for account.\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n\"TrackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.RETRIEVE_PLAIN_SAVE_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\ndef create_open_flexible_savings_account(\nself,\nsavings_tracking_reference: str,\nname: str,\nvirtual_account_tracking_reference: str,\namount: Union[int, float],\nduration: str,\nfrequency: str,\nstart_now: bool,\nstart_date: Optional[str],\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Create an open savings plan.\n        Args:\n            savings_tracking_reference: The unique identifier for savings.\n            name: Name of the savings plan.\n            virtual_account_tracking_reference: Unique identifier for the associated virtual account.\n            amount: Amount to be saved. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            duration: Length of savings.\n            frequency: How often the savings should happen.\n            start_now: Flag to start the savings immediately.\n            start_date: Starting date of the savings. Required if `start_now` is `False`.\n                Format (YYYY-MM-DD).\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"SavingsTrackingReference\": savings_tracking_reference,\n\"Name\": name,\n\"VirtualAccountTrackingReference\": virtual_account_tracking_reference,\n\"Amount\": amount,\n\"Duration\": duration,\n\"Frequency\": frequency,\n\"StartNow\": start_now,\n\"StartData\": start_date,\n}\nreturn self._api_call(\nservice_type=ServiceType.CREATE_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\ndef pre_create_open_flexible_savings_account(\nself,\nsavings_tracking_reference: str,\nname: str,\nvirtual_account_tracking_reference: str,\namount: Union[int, float],\nduration: str,\nfrequency: str,\nstart_now: bool,\nstart_date: str,\nis_interest_earning: bool,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Pre create an Open Flexible Savings account.\n        Args:\n            savings_tracking_reference: The unique identifier for savings.\n            name: Name of the savings plan.\n            virtual_account_tracking_reference: Unique identifier for the associated virtual account.\n            amount: Amount to be saved. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            duration: Length of savings.\n            frequency: How often the savings should happen.\n            start_now: Flag to start the savings immediately.\n            start_date: Starting date of the savings. Required if `start_now` is `False`.\n                Format (YYYY-MM-DD).\n            is_interest_earning: Will the savings earn interest or not.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"SavingsTrackingReference\": savings_tracking_reference,\n\"Name\": name,\n\"VirtualAccountTrackingReference\": virtual_account_tracking_reference,\n\"Amount\": amount,\n\"Duration\": duration,\n\"Frequency\": frequency,\n\"StartNow\": start_now,\n\"StartData\": start_date,\n\"IsInterestEarning\": is_interest_earning,\n}\nreturn self._api_call(\nservice_type=ServiceType.PRE_CREATE_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_open_flexible_savings_account(\nself,\ntracking_reference: str,\nprimary_account_number: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieve an open flexible savings account.\n        Args:\n            tracking_reference: Account transaction reference number of the savings you want to retrieve.\n            primary_account_number: Account number of the specific customer.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"PrimaryAccountNumber\": primary_account_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.GET_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_open_flexible_savings_accounts(\nself,\ntracking_reference: str,\nprimary_account_number: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves all flexible savings account.\n        Args:\n            tracking_reference: Account transaction reference number of the savings you want to retrieve.\n            primary_account_number: Account number of the specific customer.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"PrimaryAccountNumber\": primary_account_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.GET_ALL_CUSTOMER_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\ndef withdrawal_from_flexible_savings_account(\nself,\namount: Union[int, float],\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n        Args:\n            amount: Amount to be removed. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            tracking_reference: Unique identifier for savings.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"Amount\": amount, \"TrackingReference\": tracking_reference}\nreturn self._api_call(\nservice_type=ServiceType.COMPLETE_OPEN_FLEXIBLE_SAVE_WITHDRAWAL,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_flexible_savings_account_transactions(\nself,\ntracking_reference: str,\npage_size: int,\npage_number: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n        Args:\n            tracking_reference: Account tracking reference number.\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n\"TrackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.RETRIEVE_OPEN_FLEXIBLE_SAVE_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\ndef create_fixed_savings_account(\nself,\nsavings_tracking_reference: str,\nname: str,\nvirtual_account_tracking_reference: str,\namount: Union[int, float],\nduration: str,\nfrequency: str,\nstart_now: bool,\nstart_date: str,\nis_interest_earning: bool,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Creates a fixed account.\n        Args:\n            savings_tracking_reference: The unique identifier for savings.\n            name: Name of the savings plan.\n            virtual_account_tracking_reference: Unique identifier for the associated virtual account.\n            amount: Amount to be saved. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            duration: Length of savings.\n            frequency: How often the savings should happen.\n            start_now: Flag to start the savings immediately.\n            start_date: Starting date of the savings. Required if `start_now` is `False`.\n                Format (YYYY-MM-DD).\n            is_interest_earning: Will the savings earn interest or not.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"SavingsTrackingReference\": savings_tracking_reference,\n\"Name\": name,\n\"VirtualAccountTrackingReference\": virtual_account_tracking_reference,\n\"Amount\": amount,\n\"Duration\": duration,\n\"Frequency\": frequency,\n\"StartNow\": start_now,\n\"StartData\": start_date,\n\"IsInterestEarning\": is_interest_earning,\n}\nreturn self._api_call(\nservice_type=ServiceType.CREATE_FIXED_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_fixed_savings_account(\nself,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a fixed savings account.\n        Args:\n            tracking_reference: Account transaction reference number of the savings you want to retrieve.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"SavingsId\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.GET_FIXED_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_fixed_savings_accounts(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves all fixed savings you want to retrieve.\n        Args:\n            tracking_reference: Account transaction reference number of the savings you want to retrieve.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"TrackingReference\": tracking_reference}\nreturn self._api_call(\nservice_type=ServiceType.GET_ALL_CUSTOMER_FIXED_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\ndef close_fixed_savings_account(\nself,\namount: Union[int, float],\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n        Args:\n            amount: amount to be removed. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            tracking_reference: unique identifier for the savings.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"Amount\": amount, \"SavingsId\": tracking_reference}\nreturn self._api_call(\nservice_type=ServiceType.COMPLETE_FIXED_SAVE_WITHDRAWAL,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_fixed_savings_account_transactions(\nself,\ntracking_reference: str,\npage_number: int,\npage_size: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves all fixed savings account transaction\n        Args:\n            tracking_reference: Account tracking reference number.\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"PageNumber\": page_number,\n\"PageSize\": page_size,\n\"SavingsId\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.RETRIEVE_FIXED_SAVE_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.close_fixed_savings_account","title":"<code>close_fixed_savings_account(amount, tracking_reference, request_reference=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Union[int, float]</code> <p>amount to be removed. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>tracking_reference</code> <code>str</code> <p>unique identifier for the savings.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def close_fixed_savings_account(\nself,\namount: Union[int, float],\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n    Args:\n        amount: amount to be removed. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        tracking_reference: unique identifier for the savings.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"Amount\": amount, \"SavingsId\": tracking_reference}\nreturn self._api_call(\nservice_type=ServiceType.COMPLETE_FIXED_SAVE_WITHDRAWAL,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.create_fixed_savings_account","title":"<code>create_fixed_savings_account(savings_tracking_reference, name, virtual_account_tracking_reference, amount, duration, frequency, start_now, start_date, is_interest_earning, request_reference=None)</code>","text":"<p>Creates a fixed account.</p> <p>Parameters:</p> Name Type Description Default <code>savings_tracking_reference</code> <code>str</code> <p>The unique identifier for savings.</p> required <code>name</code> <code>str</code> <p>Name of the savings plan.</p> required <code>virtual_account_tracking_reference</code> <code>str</code> <p>Unique identifier for the associated virtual account.</p> required <code>amount</code> <code>Union[int, float]</code> <p>Amount to be saved. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>duration</code> <code>str</code> <p>Length of savings.</p> required <code>frequency</code> <code>str</code> <p>How often the savings should happen.</p> required <code>start_now</code> <code>bool</code> <p>Flag to start the savings immediately.</p> required <code>start_date</code> <code>str</code> <p>Starting date of the savings. Required if <code>start_now</code> is <code>False</code>. Format (YYYY-MM-DD).</p> required <code>is_interest_earning</code> <code>bool</code> <p>Will the savings earn interest or not.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def create_fixed_savings_account(\nself,\nsavings_tracking_reference: str,\nname: str,\nvirtual_account_tracking_reference: str,\namount: Union[int, float],\nduration: str,\nfrequency: str,\nstart_now: bool,\nstart_date: str,\nis_interest_earning: bool,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Creates a fixed account.\n    Args:\n        savings_tracking_reference: The unique identifier for savings.\n        name: Name of the savings plan.\n        virtual_account_tracking_reference: Unique identifier for the associated virtual account.\n        amount: Amount to be saved. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        duration: Length of savings.\n        frequency: How often the savings should happen.\n        start_now: Flag to start the savings immediately.\n        start_date: Starting date of the savings. Required if `start_now` is `False`.\n            Format (YYYY-MM-DD).\n        is_interest_earning: Will the savings earn interest or not.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"SavingsTrackingReference\": savings_tracking_reference,\n\"Name\": name,\n\"VirtualAccountTrackingReference\": virtual_account_tracking_reference,\n\"Amount\": amount,\n\"Duration\": duration,\n\"Frequency\": frequency,\n\"StartNow\": start_now,\n\"StartData\": start_date,\n\"IsInterestEarning\": is_interest_earning,\n}\nreturn self._api_call(\nservice_type=ServiceType.CREATE_FIXED_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.create_open_flexible_savings_account","title":"<code>create_open_flexible_savings_account(savings_tracking_reference, name, virtual_account_tracking_reference, amount, duration, frequency, start_now, start_date, request_reference=None)</code>","text":"<p>Create an open savings plan.</p> <p>Parameters:</p> Name Type Description Default <code>savings_tracking_reference</code> <code>str</code> <p>The unique identifier for savings.</p> required <code>name</code> <code>str</code> <p>Name of the savings plan.</p> required <code>virtual_account_tracking_reference</code> <code>str</code> <p>Unique identifier for the associated virtual account.</p> required <code>amount</code> <code>Union[int, float]</code> <p>Amount to be saved. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>duration</code> <code>str</code> <p>Length of savings.</p> required <code>frequency</code> <code>str</code> <p>How often the savings should happen.</p> required <code>start_now</code> <code>bool</code> <p>Flag to start the savings immediately.</p> required <code>start_date</code> <code>Optional[str]</code> <p>Starting date of the savings. Required if <code>start_now</code> is <code>False</code>. Format (YYYY-MM-DD).</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def create_open_flexible_savings_account(\nself,\nsavings_tracking_reference: str,\nname: str,\nvirtual_account_tracking_reference: str,\namount: Union[int, float],\nduration: str,\nfrequency: str,\nstart_now: bool,\nstart_date: Optional[str],\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Create an open savings plan.\n    Args:\n        savings_tracking_reference: The unique identifier for savings.\n        name: Name of the savings plan.\n        virtual_account_tracking_reference: Unique identifier for the associated virtual account.\n        amount: Amount to be saved. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        duration: Length of savings.\n        frequency: How often the savings should happen.\n        start_now: Flag to start the savings immediately.\n        start_date: Starting date of the savings. Required if `start_now` is `False`.\n            Format (YYYY-MM-DD).\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"SavingsTrackingReference\": savings_tracking_reference,\n\"Name\": name,\n\"VirtualAccountTrackingReference\": virtual_account_tracking_reference,\n\"Amount\": amount,\n\"Duration\": duration,\n\"Frequency\": frequency,\n\"StartNow\": start_now,\n\"StartData\": start_date,\n}\nreturn self._api_call(\nservice_type=ServiceType.CREATE_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.create_plain_savings_account","title":"<code>create_plain_savings_account(name, tracking_reference, request_reference=None)</code>","text":"<p>Create a Plain Savings Account.</p> <p>To create a Plain savings, in your request, you need to state the Virtual Account associated with this savings account as well as create a unique identifier for the savings account to be created.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The savings plan name.</p> required <code>tracking_reference</code> <code>str</code> <p>The virtual account transaction reference number.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def create_plain_savings_account(\nself,\nname: str,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Create a Plain Savings Account.\n    To create a Plain savings, in your request, you need to state the Virtual Account\n    associated with this savings account as well as create a unique identifier for\n    the savings account to be created.\n    Args:\n        name: The savings plan name.\n        tracking_reference: The virtual account transaction reference number.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"Name\": name, \"TrackingReference\": tracking_reference}\nreturn self._api_call(\nservice_type=ServiceType.CREATE_PLAIN_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.credit_or_debit_plain_savings_account","title":"<code>credit_or_debit_plain_savings_account(amount, narration, transaction_type, tracking_reference, request_reference=None)</code>","text":"<p>Adds or removes money from a plain savings account.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Union[int, float]</code> <p>The amount to be added or removed. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>narration</code> <code>str</code> <p>The transaction description.</p> required <code>transaction_type</code> <code>TransactionType</code> <p>The transaction type e.g. TransactionType.CREDIT.</p> required <code>tracking_reference</code> <code>str</code> <p>Unique identifier for savings.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def credit_or_debit_plain_savings_account(\nself,\namount: Union[int, float],\nnarration: str,\ntransaction_type: TransactionType,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Adds or removes money from a plain savings account.\n    Args:\n        amount: The amount to be added or removed. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        narration: The transaction description.\n        transaction_type: The transaction type e.g. TransactionType.CREDIT.\n        tracking_reference: Unique identifier for savings.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"Amount\": amount,\n\"Narration\": narration,\n\"TransactionType\": transaction_type,\n\"TrackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.PLAIN_SAVE_DEBIT_CREDIT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.get_fixed_savings_account","title":"<code>get_fixed_savings_account(tracking_reference, request_reference=None)</code>","text":"<p>Retrieves a fixed savings account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account transaction reference number of the savings you want to retrieve.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def get_fixed_savings_account(\nself,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a fixed savings account.\n    Args:\n        tracking_reference: Account transaction reference number of the savings you want to retrieve.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"SavingsId\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.GET_FIXED_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.get_fixed_savings_account_transactions","title":"<code>get_fixed_savings_account_transactions(tracking_reference, page_number, page_size, request_reference=None)</code>","text":"<p>Retrieves all fixed savings account transaction</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account tracking reference number.</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def get_fixed_savings_account_transactions(\nself,\ntracking_reference: str,\npage_number: int,\npage_size: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves all fixed savings account transaction\n    Args:\n        tracking_reference: Account tracking reference number.\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"PageNumber\": page_number,\n\"PageSize\": page_size,\n\"SavingsId\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.RETRIEVE_FIXED_SAVE_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.get_fixed_savings_accounts","title":"<code>get_fixed_savings_accounts(tracking_reference, request_reference=None)</code>","text":"<p>Retrieves all fixed savings you want to retrieve.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account transaction reference number of the savings you want to retrieve.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def get_fixed_savings_accounts(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves all fixed savings you want to retrieve.\n    Args:\n        tracking_reference: Account transaction reference number of the savings you want to retrieve.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"TrackingReference\": tracking_reference}\nreturn self._api_call(\nservice_type=ServiceType.GET_ALL_CUSTOMER_FIXED_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.get_flexible_savings_account_transactions","title":"<code>get_flexible_savings_account_transactions(tracking_reference, page_size, page_number, request_reference=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account tracking reference number.</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def get_flexible_savings_account_transactions(\nself,\ntracking_reference: str,\npage_size: int,\npage_number: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n    Args:\n        tracking_reference: Account tracking reference number.\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n\"TrackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.RETRIEVE_OPEN_FLEXIBLE_SAVE_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.get_open_flexible_savings_account","title":"<code>get_open_flexible_savings_account(tracking_reference, primary_account_number, request_reference=None)</code>","text":"<p>Retrieve an open flexible savings account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account transaction reference number of the savings you want to retrieve.</p> required <code>primary_account_number</code> <code>str</code> <p>Account number of the specific customer.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def get_open_flexible_savings_account(\nself,\ntracking_reference: str,\nprimary_account_number: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieve an open flexible savings account.\n    Args:\n        tracking_reference: Account transaction reference number of the savings you want to retrieve.\n        primary_account_number: Account number of the specific customer.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"PrimaryAccountNumber\": primary_account_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.GET_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.get_open_flexible_savings_accounts","title":"<code>get_open_flexible_savings_accounts(tracking_reference, primary_account_number, request_reference=None)</code>","text":"<p>Retrieves all flexible savings account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account transaction reference number of the savings you want to retrieve.</p> required <code>primary_account_number</code> <code>str</code> <p>Account number of the specific customer.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def get_open_flexible_savings_accounts(\nself,\ntracking_reference: str,\nprimary_account_number: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves all flexible savings account.\n    Args:\n        tracking_reference: Account transaction reference number of the savings you want to retrieve.\n        primary_account_number: Account number of the specific customer.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"PrimaryAccountNumber\": primary_account_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.GET_ALL_CUSTOMER_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.get_plain_savings_account","title":"<code>get_plain_savings_account(tracking_reference, primary_account_number, request_reference=None)</code>","text":"<p>Retrieves a customers plain savings account</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account transaction reference number of the savings you want to retrieve. This parameter is for specific plain savings.</p> required <code>primary_account_number</code> <code>str</code> <p>Account number of the specific customer.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def get_plain_savings_account(\nself,\ntracking_reference: str,\nprimary_account_number: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a customers plain savings account\n    Args:\n        tracking_reference: Account transaction reference number of the savings you want to retrieve.\n            This parameter is for specific plain savings.\n        primary_account_number: Account number of the specific customer.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"TrackingReference\": tracking_reference,\n\"PrimaryAccountNumber\": primary_account_number,\n}\nreturn self._api_call(service_type=ServiceType.GET_PLAIN_SAVE, data=data)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.get_plain_savings_account_transactions","title":"<code>get_plain_savings_account_transactions(page_size, page_number, tracking_reference, request_reference=None)</code>","text":"<p>Retrieves all plain savings account transaction data.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Unique identifier for account.</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def get_plain_savings_account_transactions(\nself,\npage_size: int,\npage_number: int,\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves all plain savings account transaction data.\n    Args:\n        tracking_reference: Unique identifier for account.\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n\"TrackingReference\": tracking_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.RETRIEVE_PLAIN_SAVE_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.get_plain_savings_accounts","title":"<code>get_plain_savings_accounts(tracking_reference, request_reference=None)</code>","text":"<p>Retrieves all customers plain savings accounts</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Account transaction reference number of the savings you want to retrieve. This parameter is for specific plain savings.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def get_plain_savings_accounts(\nself, tracking_reference: str, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves all customers plain savings accounts\n    Args:\n        tracking_reference: Account transaction reference number of the savings you want to retrieve.\n            This parameter is for specific plain savings.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"TrackingReference\": tracking_reference}\nreturn self._api_call(\nservice_type=ServiceType.GET_ALL_CUSTOMER_PLAIN_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.pre_create_open_flexible_savings_account","title":"<code>pre_create_open_flexible_savings_account(savings_tracking_reference, name, virtual_account_tracking_reference, amount, duration, frequency, start_now, start_date, is_interest_earning, request_reference=None)</code>","text":"<p>Pre create an Open Flexible Savings account.</p> <p>Parameters:</p> Name Type Description Default <code>savings_tracking_reference</code> <code>str</code> <p>The unique identifier for savings.</p> required <code>name</code> <code>str</code> <p>Name of the savings plan.</p> required <code>virtual_account_tracking_reference</code> <code>str</code> <p>Unique identifier for the associated virtual account.</p> required <code>amount</code> <code>Union[int, float]</code> <p>Amount to be saved. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>duration</code> <code>str</code> <p>Length of savings.</p> required <code>frequency</code> <code>str</code> <p>How often the savings should happen.</p> required <code>start_now</code> <code>bool</code> <p>Flag to start the savings immediately.</p> required <code>start_date</code> <code>str</code> <p>Starting date of the savings. Required if <code>start_now</code> is <code>False</code>. Format (YYYY-MM-DD).</p> required <code>is_interest_earning</code> <code>bool</code> <p>Will the savings earn interest or not.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def pre_create_open_flexible_savings_account(\nself,\nsavings_tracking_reference: str,\nname: str,\nvirtual_account_tracking_reference: str,\namount: Union[int, float],\nduration: str,\nfrequency: str,\nstart_now: bool,\nstart_date: str,\nis_interest_earning: bool,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Pre create an Open Flexible Savings account.\n    Args:\n        savings_tracking_reference: The unique identifier for savings.\n        name: Name of the savings plan.\n        virtual_account_tracking_reference: Unique identifier for the associated virtual account.\n        amount: Amount to be saved. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        duration: Length of savings.\n        frequency: How often the savings should happen.\n        start_now: Flag to start the savings immediately.\n        start_date: Starting date of the savings. Required if `start_now` is `False`.\n            Format (YYYY-MM-DD).\n        is_interest_earning: Will the savings earn interest or not.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"SavingsTrackingReference\": savings_tracking_reference,\n\"Name\": name,\n\"VirtualAccountTrackingReference\": virtual_account_tracking_reference,\n\"Amount\": amount,\n\"Duration\": duration,\n\"Frequency\": frequency,\n\"StartNow\": start_now,\n\"StartData\": start_date,\n\"IsInterestEarning\": is_interest_earning,\n}\nreturn self._api_call(\nservice_type=ServiceType.PRE_CREATE_OPEN_FLEXIBLE_SAVE,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/savings/#pykuda2.wrappers.sync_wrappers.savings.Savings.withdrawal_from_flexible_savings_account","title":"<code>withdrawal_from_flexible_savings_account(amount, tracking_reference, request_reference=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Union[int, float]</code> <p>Amount to be removed. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>tracking_reference</code> <code>str</code> <p>Unique identifier for savings.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/savings.py</code> <pre><code>def withdrawal_from_flexible_savings_account(\nself,\namount: Union[int, float],\ntracking_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n    Args:\n        amount: Amount to be removed. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        tracking_reference: Unique identifier for savings.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"Amount\": amount, \"TrackingReference\": tracking_reference}\nreturn self._api_call(\nservice_type=ServiceType.COMPLETE_OPEN_FLEXIBLE_SAVE_WITHDRAWAL,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/","title":"Transaction","text":""},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction","title":"<code>Transaction</code>","text":"<p>         Bases: <code>BaseAPIWrapper</code></p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>class Transaction(BaseAPIWrapper):\ndef get_banks(self, request_reference: Optional[str] = None) -&gt; APIResponse:\n\"\"\"Retrieves all the banks available from NIPS\n         In production, the list of banks and bank codes may change based on\n         the responses gotten from NIBSS (Nigerian Interbank Settlement System).\n         Args:\n             request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n         Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\nreturn self._api_call(\nservice_type=ServiceType.BANK_LIST, request_reference=request_reference\n)\ndef confirm_transfer_recipient(\nself,\nbeneficiary_account_number: str,\nbeneficiary_bank_code: str,\nsender_tracking_reference: Optional[str],\nis_request_from_virtual_account: bool,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n        Retrieves information of a beneficiary for validation before initiating a transfer.\n        Args:\n            beneficiary_account_number: Destination bank account number.\n            beneficiary_bank_code: Destination bank code.\n            sender_tracking_reference: Tracking reference of the virtual account trying to\n                do the actual transfer. Leave it empty if the intended transfer is going to\n                be from the main account.\n            is_request_from_virtual_account: If the intended transfer is to be made by the\n                virtual account.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"beneficiaryAccountNumber\": beneficiary_account_number,\n\"beneficiaryBankCode\": beneficiary_bank_code,\n\"SenderTrackingReference\": sender_tracking_reference,\n\"isRequestFromVirtualAccount\": is_request_from_virtual_account,\n}\nreturn self._api_call(\nservice_type=ServiceType.NAME_ENQUIRY,\ndata=data,\nrequest_reference=request_reference,\n)\ndef fund_transfer(\nself,\nbeneficiary_account: str,\nbeneficiary_bank_code: str,\nbeneficiary_name: str,\namount: Union[int, float],\nnarration: str,\nname_enquiry_session_id: str,\nsender_name: str,\nclient_fee_charge: int = 0,\nclient_account_number: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n        Sends money from your main Kuda account to another bank accounts.\n        Please, do not use sensitive data while doing test transactions so\n        as not to save it in your sandbox environment.\n        Args:\n            beneficiary_account: Destination bank account number.\n            beneficiary_bank_code: Destination bank code.\n            beneficiary_name: Name of the recipient.\n            amount: Amount to be transferred. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            narration: User defined reason for the transaction.\n            name_enquiry_session_id: Session ID generated from the nameEnquiry request.\n            sender_name: Name of the person sending money.\n            client_fee_charge: It is an amount a client wishes to charge their customer\n                for a transfer being carried out.\n            client_account_number: Account number of the client where the charged fee is\n                sent to.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"ClientAccountNumber\": client_account_number,\n\"beneficiaryAccount\": beneficiary_account,\n\"beneficiaryBankCode\": beneficiary_bank_code,\n\"beneficiaryName\": beneficiary_name,\n\"amount\": amount,\n\"narration\": narration,\n\"nameEnquirySessionID\": name_enquiry_session_id,\n\"senderName\": sender_name,\n\"clientFeeCharge\": client_fee_charge,\n}\nreturn self._api_call(\nservice_type=ServiceType.SINGLE_FUND_TRANSFER,\ndata=data,\nrequest_reference=request_reference,\n)\ndef virtual_account_fund_transfer(\nself,\ntracking_reference: str,\nbeneficiary_account: str,\namount: Union[int, float],\nbeneficiary_name: str,\nnarration: str,\nbeneficiary_bank_code: str,\nsender_name: str,\nname_enquiry_id: str,\nclient_fee_charge: Union[int, float] = 0,\nclient_account_number: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Transfer money from a virtual account to another and any other Nigerian bank account.\n        Args:\n            tracking_reference: Unique identifier of the sender.\n            beneficiary_account: Destination bank account number.\n            beneficiary_bank_code: Destination bank code.\n            beneficiary_name: Name of the recipient.\n            amount: Amount to be transferred. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            narration: User defined reason for the transaction.\n            name_enquiry_id: Session ID generated from the nameEnquiry request.\n            sender_name: Name of the person sending money.\n            client_fee_charge: It is an amount a client wishes to charge their customer\n                for a transfer being carried out. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            client_account_number: Account number of the client where the charged fee is\n                sent to.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"beneficiaryAccount\": beneficiary_account,\n\"amount\": amount,\n\"narration\": narration,\n\"beneficiaryBankCode\": beneficiary_bank_code,\n\"beneficiaryName\": beneficiary_name,\n\"senderName\": sender_name,\n\"nameEnquiryId\": name_enquiry_id,\n\"clientFeeCharge\": client_fee_charge,\n\"ClientAccountNumber\": client_account_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.VIRTUAL_ACCOUNT_FUND_TRANSFER,\ndata=data,\nrequest_reference=request_reference,\n)\ndef process_transfers(\nself,\nfund_transfer_instructions: list[TransferInstruction],\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows you to send a list of transfer instructions to Kuda, to make the payments on your behalf.\n        Args:\n            fund_transfer_instructions: A list of transfer instructions for transfers to be made.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"FundTransferInstructions\": [\nfund_transfer_instruction.to_dict()\nfor fund_transfer_instruction in fund_transfer_instructions\n]\n}\nreturn self._api_call(\nservice_type=ServiceType.FUND_TRANSFER_INSTRUCTION,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_transfer_instructions(\nself,\naccount_number: str,\nreference: str,\namount: Union[int, float],\noriginal_request_ref: str,\nstatus: TransactionStatus,\npage_number: int,\npage_size: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves transfer instructions and returns the status of the transaction.\n        Args:\n            account_number: The beneficiary\u2019s account number.\n            reference: The reference on the transfer instruction.\n            amount: The transaction amount. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            original_request_ref: The request reference used in logging the instruction.\n            status: The status of the transaction.\n            page_size: This specifies the number of transfer instructions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"AccountNumber\": account_number,\n\"Reference\": reference,\n\"Amount\": amount,\n\"OriginalRequestRef\": original_request_ref,\n\"Status\": status,\n\"PageNumber\": page_number,\n\"PageSize\": page_size,\n}\nreturn self._api_call(\nservice_type=ServiceType.SEARCH_FUND_TRANSFER_INSTRUCTION,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_transaction_logs(\nself,\nrequest_reference: str,\nresponse_reference: str,\ntransaction_date: str,\nhas_transaction_date_range_filter: bool,\nstart_date: str,\nend_date: str,\npage_size: int,\npage_number: int,\nfetch_successful_records: bool=False,\n) -&gt; APIResponse:\n\"\"\"Retrieves all transactions.\n        Args:\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n            response_reference: Transaction response reference.\n            fetch_successful_records: If set to `True`, only successful transactions\n                will be retrieved.\n            transaction_date: The transaction date. Format (YYYY-MM-DD)\n            has_transaction_date_range_filter: Is set to `True`, then the `start_date` and\n                `end_date` parameter will be used instead of `transaction_date`\n            start_date: Transaction start date. Format (YYYY-MM-DD)\n            end_date: Transaction end date. Format (YYYY-MM-DD)\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"RequestReference\": request_reference,\n\"ResponseReference\": response_reference,\n\"FetchSuccessfulRecords\": fetch_successful_records,\n\"TransactionDate\": transaction_date,\n\"HasTransactionDateRangeFilter\": has_transaction_date_range_filter,\n\"StartDate\": start_date,\n\"EndDate\": end_date,\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.RETRIEVE_TRANSACTION_LOGS,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_transaction_history(\nself, page_size: int, page_number: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves a list of all main account transactions.\n        Args:\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\"pageSize\": page_size, \"pageNumber\": page_number}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_MAIN_ACCOUNT_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_filtered_transaction_history(\nself,\npage_size: int,\npage_number: int,\nstart_date: str,\nend_date: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a filtered transaction history.\n        Args:\n            start_date: Transaction start date. Format (YYYY-MM-DD)\n            end_date: Transaction end date. Format (YYYY-MM-DD)\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n\"startDate\": start_date,\n\"endDate\": end_date,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_MAIN_ACCOUNT_FILTERED_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_virtual_account_transaction_history(\nself,\ntracking_reference: str,\npage_size: int,\npage_number: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a list of all virtual account transactions.\n        Args:\n            tracking_reference: The virtual account unique identifier.\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_VIRTUAL_ACCOUNT_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_virtual_account_filtered_transaction_history(\nself,\ntracking_reference: str,\npage_size: int,\npage_number: int,\nstart_date: str,\nend_date: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a filtered list of all virtual account transactions.\n        Args:\n            tracking_reference: The virtual account unique identifier.\n            page_size: This specifies the number of transactions to be retrieved.\n            page_number: This specifies the index of the paginated results retrieved.\n            start_date: Transaction start date. Format (YYYY-MM-DD)\n            end_date: Transaction end date. Format (YYYY-MM-DD)\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n\"startDate\": start_date,\n\"endDate\": end_date,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_VIRTUAL_ACCOUNT_FILTERED_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\ndef get_status(\nself,\nis_third_party_bank_transfer: bool,\ntransaction_request_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves the status of a transaction.\n        Args:\n            is_third_party_bank_transfer: Flag to determine if the transaction was interbank or\n                intra-bank.\n            transaction_request_reference: The request reference used when make transaction.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"isThirdPartyBankTransfer\": is_third_party_bank_transfer,\n\"transactionRequestReference\": transaction_request_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.TRANSACTION_STATUS_QUERY,\ndata=data,\nrequest_reference=request_reference,\n)\ndef fund_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\nnarration: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Add funds to a virtual account.\n        Args:\n            tracking_reference: The virtual account tracking reference.\n            amount: The amount you want to fund your account. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            narration: The additional description for the transaction.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"narration\": narration,\n}\nreturn self._api_call(\nservice_type=ServiceType.FUND_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\ndef withdraw_from_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\nnarration: str,\nclient_fee_charge: int = 0,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Transfer funds from a virtual account to an associated Kuda account or to any other Nigerian Bank account.\n        Args:\n            tracking_reference: The virtual account tracking reference.\n            amount: The amount you want to fund your account. Note care should be taken when performing calculations as money is involved.\n                a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n                it is advisable that static values are passed for this parameter. see\n                https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n            narration: The additional description for the transaction.\n            client_fee_charge: It is an amount a client wishes to charge their customer for a transfer\n                being carried out.\n            request_reference: a unique identifier for this api call.\n                it is automatically generated if not provided.\n        Returns:\n            An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n                of calling this function.\n        Raises:\n            ConnectionException: when the request times out or in the absence of an internet connection.\n        \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"narration\": narration,\n\"ClientFeeCharge\": client_fee_charge,\n}\nreturn self._api_call(\nservice_type=ServiceType.WITHDRAW_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction.confirm_transfer_recipient","title":"<code>confirm_transfer_recipient(beneficiary_account_number, beneficiary_bank_code, sender_tracking_reference, is_request_from_virtual_account, request_reference=None)</code>","text":"<p>Retrieves information of a beneficiary for validation before initiating a transfer.</p> <p>Parameters:</p> Name Type Description Default <code>beneficiary_account_number</code> <code>str</code> <p>Destination bank account number.</p> required <code>beneficiary_bank_code</code> <code>str</code> <p>Destination bank code.</p> required <code>sender_tracking_reference</code> <code>Optional[str]</code> <p>Tracking reference of the virtual account trying to do the actual transfer. Leave it empty if the intended transfer is going to be from the main account.</p> required <code>is_request_from_virtual_account</code> <code>bool</code> <p>If the intended transfer is to be made by the virtual account.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>def confirm_transfer_recipient(\nself,\nbeneficiary_account_number: str,\nbeneficiary_bank_code: str,\nsender_tracking_reference: Optional[str],\nis_request_from_virtual_account: bool,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n    Retrieves information of a beneficiary for validation before initiating a transfer.\n    Args:\n        beneficiary_account_number: Destination bank account number.\n        beneficiary_bank_code: Destination bank code.\n        sender_tracking_reference: Tracking reference of the virtual account trying to\n            do the actual transfer. Leave it empty if the intended transfer is going to\n            be from the main account.\n        is_request_from_virtual_account: If the intended transfer is to be made by the\n            virtual account.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"beneficiaryAccountNumber\": beneficiary_account_number,\n\"beneficiaryBankCode\": beneficiary_bank_code,\n\"SenderTrackingReference\": sender_tracking_reference,\n\"isRequestFromVirtualAccount\": is_request_from_virtual_account,\n}\nreturn self._api_call(\nservice_type=ServiceType.NAME_ENQUIRY,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction.fund_transfer","title":"<code>fund_transfer(beneficiary_account, beneficiary_bank_code, beneficiary_name, amount, narration, name_enquiry_session_id, sender_name, client_fee_charge=0, client_account_number=None, request_reference=None)</code>","text":"<p>Sends money from your main Kuda account to another bank accounts.</p> <p>Please, do not use sensitive data while doing test transactions so as not to save it in your sandbox environment.</p> <p>Parameters:</p> Name Type Description Default <code>beneficiary_account</code> <code>str</code> <p>Destination bank account number.</p> required <code>beneficiary_bank_code</code> <code>str</code> <p>Destination bank code.</p> required <code>beneficiary_name</code> <code>str</code> <p>Name of the recipient.</p> required <code>amount</code> <code>Union[int, float]</code> <p>Amount to be transferred. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>narration</code> <code>str</code> <p>User defined reason for the transaction.</p> required <code>name_enquiry_session_id</code> <code>str</code> <p>Session ID generated from the nameEnquiry request.</p> required <code>sender_name</code> <code>str</code> <p>Name of the person sending money.</p> required <code>client_fee_charge</code> <code>int</code> <p>It is an amount a client wishes to charge their customer for a transfer being carried out.</p> <code>0</code> <code>client_account_number</code> <code>Optional[str]</code> <p>Account number of the client where the charged fee is sent to.</p> <code>None</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>def fund_transfer(\nself,\nbeneficiary_account: str,\nbeneficiary_bank_code: str,\nbeneficiary_name: str,\namount: Union[int, float],\nnarration: str,\nname_enquiry_session_id: str,\nsender_name: str,\nclient_fee_charge: int = 0,\nclient_account_number: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"\n    Sends money from your main Kuda account to another bank accounts.\n    Please, do not use sensitive data while doing test transactions so\n    as not to save it in your sandbox environment.\n    Args:\n        beneficiary_account: Destination bank account number.\n        beneficiary_bank_code: Destination bank code.\n        beneficiary_name: Name of the recipient.\n        amount: Amount to be transferred. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        narration: User defined reason for the transaction.\n        name_enquiry_session_id: Session ID generated from the nameEnquiry request.\n        sender_name: Name of the person sending money.\n        client_fee_charge: It is an amount a client wishes to charge their customer\n            for a transfer being carried out.\n        client_account_number: Account number of the client where the charged fee is\n            sent to.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"ClientAccountNumber\": client_account_number,\n\"beneficiaryAccount\": beneficiary_account,\n\"beneficiaryBankCode\": beneficiary_bank_code,\n\"beneficiaryName\": beneficiary_name,\n\"amount\": amount,\n\"narration\": narration,\n\"nameEnquirySessionID\": name_enquiry_session_id,\n\"senderName\": sender_name,\n\"clientFeeCharge\": client_fee_charge,\n}\nreturn self._api_call(\nservice_type=ServiceType.SINGLE_FUND_TRANSFER,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction.fund_virtual_account","title":"<code>fund_virtual_account(tracking_reference, amount, narration, request_reference=None)</code>","text":"<p>Add funds to a virtual account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The virtual account tracking reference.</p> required <code>amount</code> <code>Union[int, float]</code> <p>The amount you want to fund your account. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>narration</code> <code>str</code> <p>The additional description for the transaction.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>def fund_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\nnarration: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Add funds to a virtual account.\n    Args:\n        tracking_reference: The virtual account tracking reference.\n        amount: The amount you want to fund your account. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        narration: The additional description for the transaction.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"narration\": narration,\n}\nreturn self._api_call(\nservice_type=ServiceType.FUND_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction.get_banks","title":"<code>get_banks(request_reference=None)</code>","text":"<p>Retrieves all the banks available from NIPS</p> <p>In production, the list of banks and bank codes may change based on  the responses gotten from NIBSS (Nigerian Interbank Settlement System).</p> <p>Args:      request_reference: a unique identifier for this api call.         it is automatically generated if not provided.</p> <p>Returns:     An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result         of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>def get_banks(self, request_reference: Optional[str] = None) -&gt; APIResponse:\n\"\"\"Retrieves all the banks available from NIPS\n     In production, the list of banks and bank codes may change based on\n     the responses gotten from NIBSS (Nigerian Interbank Settlement System).\n     Args:\n         request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n     Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\nreturn self._api_call(\nservice_type=ServiceType.BANK_LIST, request_reference=request_reference\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction.get_filtered_transaction_history","title":"<code>get_filtered_transaction_history(page_size, page_number, start_date, end_date, request_reference=None)</code>","text":"<p>Retrieves a filtered transaction history.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>Transaction start date. Format (YYYY-MM-DD)</p> required <code>end_date</code> <code>str</code> <p>Transaction end date. Format (YYYY-MM-DD)</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>def get_filtered_transaction_history(\nself,\npage_size: int,\npage_number: int,\nstart_date: str,\nend_date: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a filtered transaction history.\n    Args:\n        start_date: Transaction start date. Format (YYYY-MM-DD)\n        end_date: Transaction end date. Format (YYYY-MM-DD)\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n\"startDate\": start_date,\n\"endDate\": end_date,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_MAIN_ACCOUNT_FILTERED_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction.get_status","title":"<code>get_status(is_third_party_bank_transfer, transaction_request_reference, request_reference=None)</code>","text":"<p>Retrieves the status of a transaction.</p> <p>Parameters:</p> Name Type Description Default <code>is_third_party_bank_transfer</code> <code>bool</code> <p>Flag to determine if the transaction was interbank or intra-bank.</p> required <code>transaction_request_reference</code> <code>str</code> <p>The request reference used when make transaction.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>def get_status(\nself,\nis_third_party_bank_transfer: bool,\ntransaction_request_reference: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves the status of a transaction.\n    Args:\n        is_third_party_bank_transfer: Flag to determine if the transaction was interbank or\n            intra-bank.\n        transaction_request_reference: The request reference used when make transaction.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"isThirdPartyBankTransfer\": is_third_party_bank_transfer,\n\"transactionRequestReference\": transaction_request_reference,\n}\nreturn self._api_call(\nservice_type=ServiceType.TRANSACTION_STATUS_QUERY,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction.get_transaction_history","title":"<code>get_transaction_history(page_size, page_number, request_reference=None)</code>","text":"<p>Retrieves a list of all main account transactions.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>def get_transaction_history(\nself, page_size: int, page_number: int, request_reference: Optional[str] = None\n) -&gt; APIResponse:\n\"\"\"Retrieves a list of all main account transactions.\n    Args:\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\"pageSize\": page_size, \"pageNumber\": page_number}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_MAIN_ACCOUNT_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction.get_transaction_logs","title":"<code>get_transaction_logs(request_reference, response_reference, transaction_date, has_transaction_date_range_filter, start_date, end_date, page_size, page_number, fetch_successful_records=False)</code>","text":"<p>Retrieves all transactions.</p> <p>Parameters:</p> Name Type Description Default <code>request_reference</code> <code>str</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> required <code>response_reference</code> <code>str</code> <p>Transaction response reference.</p> required <code>fetch_successful_records</code> <code>bool</code> <p>If set to <code>True</code>, only successful transactions will be retrieved.</p> <code>False</code> <code>transaction_date</code> <code>str</code> <p>The transaction date. Format (YYYY-MM-DD)</p> required <code>has_transaction_date_range_filter</code> <code>bool</code> <p>Is set to <code>True</code>, then the <code>start_date</code> and <code>end_date</code> parameter will be used instead of <code>transaction_date</code></p> required <code>start_date</code> <code>str</code> <p>Transaction start date. Format (YYYY-MM-DD)</p> required <code>end_date</code> <code>str</code> <p>Transaction end date. Format (YYYY-MM-DD)</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>def get_transaction_logs(\nself,\nrequest_reference: str,\nresponse_reference: str,\ntransaction_date: str,\nhas_transaction_date_range_filter: bool,\nstart_date: str,\nend_date: str,\npage_size: int,\npage_number: int,\nfetch_successful_records: bool=False,\n) -&gt; APIResponse:\n\"\"\"Retrieves all transactions.\n    Args:\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n        response_reference: Transaction response reference.\n        fetch_successful_records: If set to `True`, only successful transactions\n            will be retrieved.\n        transaction_date: The transaction date. Format (YYYY-MM-DD)\n        has_transaction_date_range_filter: Is set to `True`, then the `start_date` and\n            `end_date` parameter will be used instead of `transaction_date`\n        start_date: Transaction start date. Format (YYYY-MM-DD)\n        end_date: Transaction end date. Format (YYYY-MM-DD)\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"RequestReference\": request_reference,\n\"ResponseReference\": response_reference,\n\"FetchSuccessfulRecords\": fetch_successful_records,\n\"TransactionDate\": transaction_date,\n\"HasTransactionDateRangeFilter\": has_transaction_date_range_filter,\n\"StartDate\": start_date,\n\"EndDate\": end_date,\n\"PageSize\": page_size,\n\"PageNumber\": page_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.RETRIEVE_TRANSACTION_LOGS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction.get_transfer_instructions","title":"<code>get_transfer_instructions(account_number, reference, amount, original_request_ref, status, page_number, page_size, request_reference=None)</code>","text":"<p>Retrieves transfer instructions and returns the status of the transaction.</p> <p>Parameters:</p> Name Type Description Default <code>account_number</code> <code>str</code> <p>The beneficiary\u2019s account number.</p> required <code>reference</code> <code>str</code> <p>The reference on the transfer instruction.</p> required <code>amount</code> <code>Union[int, float]</code> <p>The transaction amount. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>original_request_ref</code> <code>str</code> <p>The request reference used in logging the instruction.</p> required <code>status</code> <code>TransactionStatus</code> <p>The status of the transaction.</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transfer instructions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>def get_transfer_instructions(\nself,\naccount_number: str,\nreference: str,\namount: Union[int, float],\noriginal_request_ref: str,\nstatus: TransactionStatus,\npage_number: int,\npage_size: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves transfer instructions and returns the status of the transaction.\n    Args:\n        account_number: The beneficiary\u2019s account number.\n        reference: The reference on the transfer instruction.\n        amount: The transaction amount. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        original_request_ref: The request reference used in logging the instruction.\n        status: The status of the transaction.\n        page_size: This specifies the number of transfer instructions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"AccountNumber\": account_number,\n\"Reference\": reference,\n\"Amount\": amount,\n\"OriginalRequestRef\": original_request_ref,\n\"Status\": status,\n\"PageNumber\": page_number,\n\"PageSize\": page_size,\n}\nreturn self._api_call(\nservice_type=ServiceType.SEARCH_FUND_TRANSFER_INSTRUCTION,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction.get_virtual_account_filtered_transaction_history","title":"<code>get_virtual_account_filtered_transaction_history(tracking_reference, page_size, page_number, start_date, end_date, request_reference=None)</code>","text":"<p>Retrieves a filtered list of all virtual account transactions.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The virtual account unique identifier.</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>start_date</code> <code>str</code> <p>Transaction start date. Format (YYYY-MM-DD)</p> required <code>end_date</code> <code>str</code> <p>Transaction end date. Format (YYYY-MM-DD)</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>def get_virtual_account_filtered_transaction_history(\nself,\ntracking_reference: str,\npage_size: int,\npage_number: int,\nstart_date: str,\nend_date: str,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a filtered list of all virtual account transactions.\n    Args:\n        tracking_reference: The virtual account unique identifier.\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        start_date: Transaction start date. Format (YYYY-MM-DD)\n        end_date: Transaction end date. Format (YYYY-MM-DD)\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n\"startDate\": start_date,\n\"endDate\": end_date,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_VIRTUAL_ACCOUNT_FILTERED_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction.get_virtual_account_transaction_history","title":"<code>get_virtual_account_transaction_history(tracking_reference, page_size, page_number, request_reference=None)</code>","text":"<p>Retrieves a list of all virtual account transactions.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The virtual account unique identifier.</p> required <code>page_size</code> <code>int</code> <p>This specifies the number of transactions to be retrieved.</p> required <code>page_number</code> <code>int</code> <p>This specifies the index of the paginated results retrieved.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>def get_virtual_account_transaction_history(\nself,\ntracking_reference: str,\npage_size: int,\npage_number: int,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Retrieves a list of all virtual account transactions.\n    Args:\n        tracking_reference: The virtual account unique identifier.\n        page_size: This specifies the number of transactions to be retrieved.\n        page_number: This specifies the index of the paginated results retrieved.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"pageSize\": page_size,\n\"pageNumber\": page_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.ADMIN_VIRTUAL_ACCOUNT_TRANSACTIONS,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction.process_transfers","title":"<code>process_transfers(fund_transfer_instructions, request_reference=None)</code>","text":"<p>Allows you to send a list of transfer instructions to Kuda, to make the payments on your behalf.</p> <p>Parameters:</p> Name Type Description Default <code>fund_transfer_instructions</code> <code>list[TransferInstruction]</code> <p>A list of transfer instructions for transfers to be made.</p> required <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>def process_transfers(\nself,\nfund_transfer_instructions: list[TransferInstruction],\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Allows you to send a list of transfer instructions to Kuda, to make the payments on your behalf.\n    Args:\n        fund_transfer_instructions: A list of transfer instructions for transfers to be made.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"FundTransferInstructions\": [\nfund_transfer_instruction.to_dict()\nfor fund_transfer_instruction in fund_transfer_instructions\n]\n}\nreturn self._api_call(\nservice_type=ServiceType.FUND_TRANSFER_INSTRUCTION,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction.virtual_account_fund_transfer","title":"<code>virtual_account_fund_transfer(tracking_reference, beneficiary_account, amount, beneficiary_name, narration, beneficiary_bank_code, sender_name, name_enquiry_id, client_fee_charge=0, client_account_number=None, request_reference=None)</code>","text":"<p>Transfer money from a virtual account to another and any other Nigerian bank account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>Unique identifier of the sender.</p> required <code>beneficiary_account</code> <code>str</code> <p>Destination bank account number.</p> required <code>beneficiary_bank_code</code> <code>str</code> <p>Destination bank code.</p> required <code>beneficiary_name</code> <code>str</code> <p>Name of the recipient.</p> required <code>amount</code> <code>Union[int, float]</code> <p>Amount to be transferred. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>narration</code> <code>str</code> <p>User defined reason for the transaction.</p> required <code>name_enquiry_id</code> <code>str</code> <p>Session ID generated from the nameEnquiry request.</p> required <code>sender_name</code> <code>str</code> <p>Name of the person sending money.</p> required <code>client_fee_charge</code> <code>Union[int, float]</code> <p>It is an amount a client wishes to charge their customer for a transfer being carried out. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> <code>0</code> <code>client_account_number</code> <code>Optional[str]</code> <p>Account number of the client where the charged fee is sent to.</p> <code>None</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>def virtual_account_fund_transfer(\nself,\ntracking_reference: str,\nbeneficiary_account: str,\namount: Union[int, float],\nbeneficiary_name: str,\nnarration: str,\nbeneficiary_bank_code: str,\nsender_name: str,\nname_enquiry_id: str,\nclient_fee_charge: Union[int, float] = 0,\nclient_account_number: Optional[str] = None,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Transfer money from a virtual account to another and any other Nigerian bank account.\n    Args:\n        tracking_reference: Unique identifier of the sender.\n        beneficiary_account: Destination bank account number.\n        beneficiary_bank_code: Destination bank code.\n        beneficiary_name: Name of the recipient.\n        amount: Amount to be transferred. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        narration: User defined reason for the transaction.\n        name_enquiry_id: Session ID generated from the nameEnquiry request.\n        sender_name: Name of the person sending money.\n        client_fee_charge: It is an amount a client wishes to charge their customer\n            for a transfer being carried out. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        client_account_number: Account number of the client where the charged fee is\n            sent to.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"beneficiaryAccount\": beneficiary_account,\n\"amount\": amount,\n\"narration\": narration,\n\"beneficiaryBankCode\": beneficiary_bank_code,\n\"beneficiaryName\": beneficiary_name,\n\"senderName\": sender_name,\n\"nameEnquiryId\": name_enquiry_id,\n\"clientFeeCharge\": client_fee_charge,\n\"ClientAccountNumber\": client_account_number,\n}\nreturn self._api_call(\nservice_type=ServiceType.VIRTUAL_ACCOUNT_FUND_TRANSFER,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"},{"location":"reference/wrappers/sync_wrappers/transaction/#pykuda2.wrappers.sync_wrappers.transaction.Transaction.withdraw_from_virtual_account","title":"<code>withdraw_from_virtual_account(tracking_reference, amount, narration, client_fee_charge=0, request_reference=None)</code>","text":"<p>Transfer funds from a virtual account to an associated Kuda account or to any other Nigerian Bank account.</p> <p>Parameters:</p> Name Type Description Default <code>tracking_reference</code> <code>str</code> <p>The virtual account tracking reference.</p> required <code>amount</code> <code>Union[int, float]</code> <p>The amount you want to fund your account. Note care should be taken when performing calculations as money is involved. a <code>Decimal</code> would have been the preferred type compared to <code>Union[int, float]</code> that was used. it is advisable that static values are passed for this parameter. see https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</p> required <code>narration</code> <code>str</code> <p>The additional description for the transaction.</p> required <code>client_fee_charge</code> <code>int</code> <p>It is an amount a client wishes to charge their customer for a transfer being carried out.</p> <code>0</code> <code>request_reference</code> <code>Optional[str]</code> <p>a unique identifier for this api call. it is automatically generated if not provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>APIResponse</code> <p>An <code>APIResponse</code> which is basically just a dataclass containing the data returned by the server as result of calling this function.</p> <p>Raises:</p> Type Description <code>ConnectionException</code> <p>when the request times out or in the absence of an internet connection.</p> Source code in <code>pykuda2/wrappers/sync_wrappers/transaction.py</code> <pre><code>def withdraw_from_virtual_account(\nself,\ntracking_reference: str,\namount: Union[int, float],\nnarration: str,\nclient_fee_charge: int = 0,\nrequest_reference: Optional[str] = None,\n) -&gt; APIResponse:\n\"\"\"Transfer funds from a virtual account to an associated Kuda account or to any other Nigerian Bank account.\n    Args:\n        tracking_reference: The virtual account tracking reference.\n        amount: The amount you want to fund your account. Note care should be taken when performing calculations as money is involved.\n            a `Decimal` would have been the preferred type compared to `Union[int, float]` that was used.\n            it is advisable that static values are passed for this parameter. see\n            https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency\n        narration: The additional description for the transaction.\n        client_fee_charge: It is an amount a client wishes to charge their customer for a transfer\n            being carried out.\n        request_reference: a unique identifier for this api call.\n            it is automatically generated if not provided.\n    Returns:\n        An `APIResponse` which is basically just a dataclass containing the data returned by the server as result\n            of calling this function.\n    Raises:\n        ConnectionException: when the request times out or in the absence of an internet connection.\n    \"\"\"\ndata = {\n\"trackingReference\": tracking_reference,\n\"amount\": amount,\n\"narration\": narration,\n\"ClientFeeCharge\": client_fee_charge,\n}\nreturn self._api_call(\nservice_type=ServiceType.WITHDRAW_VIRTUAL_ACCOUNT,\ndata=data,\nrequest_reference=request_reference,\n)\n</code></pre>"}]}